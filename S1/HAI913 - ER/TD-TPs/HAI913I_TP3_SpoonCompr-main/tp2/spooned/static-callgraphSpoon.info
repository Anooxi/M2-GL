Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.

parsers.Spoon@4089713
Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger::getClass()
	---> ::getClass() [0 time(s)]

wait(long)
	---> ::wait(long) [0 time(s)]

wait(long,int)
	---> ::wait(long,int) [0 time(s)]

wait()
	---> ::wait() [0 time(s)]

write(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

notifyAll()
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [4 time(s)]

equals(java.lang.Object)
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [4 time(s)]

registerNatives()
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [4 time(s)]

notify()
	---> behavioral.chain_of_responsibility.ILogger::notify() [4 time(s)]

hashCode()
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [4 time(s)]

setNextLogger(behavioral.chain_of_responsibility.ILogger)
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [4 time(s)]

finalize()
	---> behavioral.chain_of_responsibility.ILogger::finalize() [4 time(s)]

toString()
	---> behavioral.chain_of_responsibility.ILogger::toString() [4 time(s)]

clone()
	---> behavioral.chain_of_responsibility.ILogger::clone() [4 time(s)]

behavioral.chain_of_responsibility.ErrorLogger::getClass()
	---> behavioral.chain_of_responsibility.ILogger::getClass() [4 time(s)]

wait(long)
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [4 time(s)]

wait(long,int)
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [4 time(s)]

wait()
	---> behavioral.chain_of_responsibility.ILogger::wait() [4 time(s)]

write(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [10 time(s)]

notifyAll()
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [10 time(s)]

equals(java.lang.Object)
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [10 time(s)]

registerNatives()
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [10 time(s)]

notify()
	---> behavioral.chain_of_responsibility.ILogger::notify() [10 time(s)]

hashCode()
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [10 time(s)]

setNextLogger(behavioral.chain_of_responsibility.ILogger)
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [10 time(s)]

finalize()
	---> behavioral.chain_of_responsibility.ILogger::finalize() [10 time(s)]

toString()
	---> behavioral.chain_of_responsibility.ILogger::toString() [10 time(s)]

clone()
	---> behavioral.chain_of_responsibility.ILogger::clone() [10 time(s)]

behavioral.chain_of_responsibility.FileLogger::getClass()
	---> behavioral.chain_of_responsibility.ILogger::getClass() [10 time(s)]

wait(long)
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [10 time(s)]

wait(long,int)
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [10 time(s)]

wait()
	---> behavioral.chain_of_responsibility.ILogger::wait() [10 time(s)]

write(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [12 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [17 time(s)]

notifyAll()
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [17 time(s)]

equals(java.lang.Object)
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [17 time(s)]

registerNatives()
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [17 time(s)]

notify()
	---> behavioral.chain_of_responsibility.ILogger::notify() [17 time(s)]

hashCode()
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [17 time(s)]

setNextLogger(behavioral.chain_of_responsibility.ILogger)
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [17 time(s)]

getFilePath()
	---> behavioral.chain_of_responsibility.ILogger::getFilePath() [17 time(s)]

finalize()
	---> behavioral.chain_of_responsibility.ILogger::finalize() [17 time(s)]

toString()
	---> behavioral.chain_of_responsibility.ILogger::toString() [17 time(s)]

clone()
	---> behavioral.chain_of_responsibility.ILogger::clone() [17 time(s)]

setFilePath(java.lang.String)
	---> behavioral.chain_of_responsibility.ILogger::setFilePath(java.lang.String) [17 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [17 time(s)]

setNextLogger(behavioral.chain_of_responsibility.ILogger)
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [17 time(s)]

behavioral.chain_of_responsibility.LogRequest::getClass()
	---> behavioral.chain_of_responsibility.ILogger::getClass() [17 time(s)]

wait(long)
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [17 time(s)]

wait(long,int)
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [17 time(s)]

wait()
	---> behavioral.chain_of_responsibility.ILogger::wait() [17 time(s)]

notifyAll()
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [17 time(s)]

equals(java.lang.Object)
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [17 time(s)]

registerNatives()
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [17 time(s)]

getMessage()
	---> behavioral.chain_of_responsibility.ILogger::getMessage() [17 time(s)]

notify()
	---> behavioral.chain_of_responsibility.ILogger::notify() [17 time(s)]

setLevel(behavioral.chain_of_responsibility.LogRequestLevel)
	---> behavioral.chain_of_responsibility.ILogger::setLevel(behavioral.chain_of_responsibility.LogRequestLevel) [17 time(s)]

setMessage(java.lang.String)
	---> behavioral.chain_of_responsibility.ILogger::setMessage(java.lang.String) [17 time(s)]

getLevel()
	---> behavioral.chain_of_responsibility.ILogger::getLevel() [17 time(s)]

hashCode()
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [17 time(s)]

finalize()
	---> behavioral.chain_of_responsibility.ILogger::finalize() [17 time(s)]

toString()
	---> behavioral.chain_of_responsibility.ILogger::toString() [17 time(s)]

clone()
	---> behavioral.chain_of_responsibility.ILogger::clone() [17 time(s)]

value()
	---> behavioral.chain_of_responsibility.ILogger::value() [17 time(s)]

behavioral.chain_of_responsibility.Logger::getClass()
	---> behavioral.chain_of_responsibility.ILogger::getClass() [17 time(s)]

wait(long)
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [17 time(s)]

wait(long,int)
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [17 time(s)]

wait()
	---> behavioral.chain_of_responsibility.ILogger::wait() [17 time(s)]

write(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [17 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [22 time(s)]

notifyAll()
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [22 time(s)]

equals(java.lang.Object)
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [22 time(s)]

registerNatives()
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [22 time(s)]

notify()
	---> behavioral.chain_of_responsibility.ILogger::notify() [22 time(s)]

hashCode()
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [22 time(s)]

setNextLogger(behavioral.chain_of_responsibility.ILogger)
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [22 time(s)]

finalize()
	---> behavioral.chain_of_responsibility.ILogger::finalize() [22 time(s)]

toString()
	---> behavioral.chain_of_responsibility.ILogger::toString() [22 time(s)]

clone()
	---> behavioral.chain_of_responsibility.ILogger::clone() [22 time(s)]

clone()
	---> behavioral.chain_of_responsibility.ILogger::clone() [22 time(s)]

compareTo(java.lang.Enum)
	---> behavioral.chain_of_responsibility.ILogger::compareTo(java.lang.Enum) [22 time(s)]

describeConstable()
	---> behavioral.chain_of_responsibility.ILogger::describeConstable() [22 time(s)]

equals(java.lang.Object)
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [22 time(s)]

finalize()
	---> behavioral.chain_of_responsibility.ILogger::finalize() [22 time(s)]

getDeclaringClass()
	---> behavioral.chain_of_responsibility.ILogger::getDeclaringClass() [22 time(s)]

hashCode()
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [22 time(s)]

name()
	---> behavioral.chain_of_responsibility.ILogger::name() [22 time(s)]

ordinal()
	---> behavioral.chain_of_responsibility.ILogger::ordinal() [22 time(s)]

readObject(java.io.ObjectInputStream)
	---> behavioral.chain_of_responsibility.ILogger::readObject(java.io.ObjectInputStream) [22 time(s)]

readObjectNoData()
	---> behavioral.chain_of_responsibility.ILogger::readObjectNoData() [22 time(s)]

toString()
	---> behavioral.chain_of_responsibility.ILogger::toString() [22 time(s)]

value()
	---> behavioral.chain_of_responsibility.ILogger::value() [22 time(s)]

valueOf(java.lang.Class,java.lang.String)
	---> behavioral.chain_of_responsibility.ILogger::valueOf(java.lang.Class,java.lang.String) [22 time(s)]

valueOf(java.lang.String)
	---> behavioral.chain_of_responsibility.ILogger::valueOf(java.lang.String) [22 time(s)]

values()
	---> behavioral.chain_of_responsibility.ILogger::values() [22 time(s)]

behavioral.chain_of_responsibility.Test::getClass()
	---> behavioral.chain_of_responsibility.ILogger::getClass() [22 time(s)]

wait(long)
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [22 time(s)]

wait(long,int)
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [22 time(s)]

wait()
	---> behavioral.chain_of_responsibility.ILogger::wait() [22 time(s)]

notifyAll()
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [22 time(s)]

equals(java.lang.Object)
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [22 time(s)]

main(java.lang.String[])
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [24 time(s)]

registerNatives()
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [24 time(s)]

notify()
	---> behavioral.chain_of_responsibility.ILogger::notify() [24 time(s)]

hashCode()
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [24 time(s)]

getChainOfLoggers()
	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [25 time(s)]

finalize()
	---> behavioral.chain_of_responsibility.ILogger::finalize() [25 time(s)]

toString()
	---> behavioral.chain_of_responsibility.ILogger::toString() [25 time(s)]

clone()
	---> behavioral.chain_of_responsibility.ILogger::clone() [25 time(s)]

getName()
	---> behavioral.chain_of_responsibility.ILogger::getName() [25 time(s)]

undo()
	---> behavioral.chain_of_responsibility.ILogger::undo() [25 time(s)]

execute()
	---> behavioral.chain_of_responsibility.ILogger::execute() [25 time(s)]

behavioral.command.CommandManager::getClass()
	---> behavioral.chain_of_responsibility.ILogger::getClass() [25 time(s)]

wait(long)
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [25 time(s)]

wait(long,int)
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [25 time(s)]

wait()
	---> behavioral.chain_of_responsibility.ILogger::wait() [25 time(s)]

getRegistryKey(java.lang.Class)
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [25 time(s)]

notifyAll()
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [25 time(s)]

equals(java.lang.Object)
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [25 time(s)]

registerNatives()
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [25 time(s)]

history()
	---> behavioral.chain_of_responsibility.ILogger::history() [25 time(s)]

redo()
	---> behavioral.command.Command::redo() [26 time(s)]

notify()
	---> behavioral.command.Command::notify() [26 time(s)]

execute(behavioral.command.Command)
	---> behavioral.command.Command::execute(behavioral.command.Command) [27 time(s)]

hashCode()
	---> behavioral.command.Command::hashCode() [27 time(s)]

undo()
	---> behavioral.command.Command::undo() [28 time(s)]

finalize()
	---> behavioral.command.Command::finalize() [28 time(s)]

toString()
	---> behavioral.command.Command::toString() [28 time(s)]

clone()
	---> behavioral.command.Command::clone() [28 time(s)]

getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [28 time(s)]

behavioral.command.SwitchChannelCommand::getName()
	---> behavioral.command.TV::getName() [28 time(s)]

getClass()
	---> behavioral.command.TV::getClass() [28 time(s)]

wait(long)
	---> behavioral.command.TV::wait(long) [28 time(s)]

wait(long,int)
	---> behavioral.command.TV::wait(long,int) [28 time(s)]

wait()
	---> behavioral.command.TV::wait() [28 time(s)]

notifyAll()
	---> behavioral.command.TV::notifyAll() [28 time(s)]

equals(java.lang.Object)
	---> behavioral.command.TV::equals(java.lang.Object) [28 time(s)]

registerNatives()
	---> behavioral.command.TV::registerNatives() [28 time(s)]

notify()
	---> behavioral.command.TV::notify() [28 time(s)]

execute()
	---> behavioral.command.TV::execute() [29 time(s)]

hashCode()
	---> behavioral.command.TV::hashCode() [29 time(s)]

undo()
	---> behavioral.command.TV::undo() [31 time(s)]

finalize()
	---> behavioral.command.TV::finalize() [31 time(s)]

toString()
	---> behavioral.command.TV::toString() [31 time(s)]

clone()
	---> behavioral.command.TV::clone() [31 time(s)]

behavioral.command.SwitchOffCommand::getName()
	---> behavioral.command.TV::getName() [32 time(s)]

getClass()
	---> behavioral.command.TV::getClass() [32 time(s)]

wait(long)
	---> behavioral.command.TV::wait(long) [32 time(s)]

wait(long,int)
	---> behavioral.command.TV::wait(long,int) [32 time(s)]

wait()
	---> behavioral.command.TV::wait() [32 time(s)]

notifyAll()
	---> behavioral.command.TV::notifyAll() [32 time(s)]

equals(java.lang.Object)
	---> behavioral.command.TV::equals(java.lang.Object) [32 time(s)]

registerNatives()
	---> behavioral.command.TV::registerNatives() [32 time(s)]

notify()
	---> behavioral.command.TV::notify() [32 time(s)]

execute()
	---> behavioral.command.TV::execute() [33 time(s)]

hashCode()
	---> behavioral.command.TV::hashCode() [33 time(s)]

undo()
	---> behavioral.command.TV::undo() [34 time(s)]

finalize()
	---> behavioral.command.TV::finalize() [34 time(s)]

toString()
	---> behavioral.command.TV::toString() [34 time(s)]

clone()
	---> behavioral.command.TV::clone() [34 time(s)]

behavioral.command.SwitchOnCommand::getName()
	---> behavioral.command.TV::getName() [35 time(s)]

getClass()
	---> behavioral.command.TV::getClass() [35 time(s)]

wait(long)
	---> behavioral.command.TV::wait(long) [35 time(s)]

wait(long,int)
	---> behavioral.command.TV::wait(long,int) [35 time(s)]

wait()
	---> behavioral.command.TV::wait() [35 time(s)]

notifyAll()
	---> behavioral.command.TV::notifyAll() [35 time(s)]

equals(java.lang.Object)
	---> behavioral.command.TV::equals(java.lang.Object) [35 time(s)]

registerNatives()
	---> behavioral.command.TV::registerNatives() [35 time(s)]

notify()
	---> behavioral.command.TV::notify() [35 time(s)]

execute()
	---> behavioral.command.TV::execute() [36 time(s)]

hashCode()
	---> behavioral.command.TV::hashCode() [36 time(s)]

undo()
	---> behavioral.command.TV::undo() [37 time(s)]

finalize()
	---> behavioral.command.TV::finalize() [37 time(s)]

toString()
	---> behavioral.command.TV::toString() [37 time(s)]

clone()
	---> behavioral.command.TV::clone() [37 time(s)]

behavioral.command.TV::getClass()
	---> behavioral.command.TV::getClass() [37 time(s)]

wait(long)
	---> behavioral.command.TV::wait(long) [37 time(s)]

wait(long,int)
	---> behavioral.command.TV::wait(long,int) [37 time(s)]

wait()
	---> behavioral.command.TV::wait() [37 time(s)]

notifyAll()
	---> behavioral.command.TV::notifyAll() [37 time(s)]

equals(java.lang.Object)
	---> behavioral.command.TV::equals(java.lang.Object) [37 time(s)]

switchChannel(int)
	---> behavioral.command.TV::switchChannel(int) [37 time(s)]

registerNatives()
	---> behavioral.command.TV::registerNatives() [37 time(s)]

notify()
	---> behavioral.command.TV::notify() [37 time(s)]

switchOff()
	---> behavioral.command.TV::switchOff() [37 time(s)]

hashCode()
	---> behavioral.command.TV::hashCode() [37 time(s)]

getChannel()
	---> behavioral.command.TV::getChannel() [37 time(s)]

isOn()
	---> behavioral.command.TV::isOn() [37 time(s)]

finalize()
	---> behavioral.command.TV::finalize() [37 time(s)]

toString()
	---> behavioral.command.TV::toString() [37 time(s)]

clone()
	---> behavioral.command.TV::clone() [37 time(s)]

switchOn()
	---> behavioral.command.TV::switchOn() [37 time(s)]

behavioral.command.Test::getClass()
	---> behavioral.command.TV::getClass() [37 time(s)]

wait(long)
	---> behavioral.command.TV::wait(long) [37 time(s)]

wait(long,int)
	---> behavioral.command.TV::wait(long,int) [37 time(s)]

wait()
	---> behavioral.command.TV::wait() [37 time(s)]

notifyAll()
	---> behavioral.command.TV::notifyAll() [37 time(s)]

equals(java.lang.Object)
	---> behavioral.command.TV::equals(java.lang.Object) [37 time(s)]

main(java.lang.String[])
	---> behavioral.command.CommandManager::main(java.lang.String[]) [51 time(s)]

registerNatives()
	---> behavioral.command.CommandManager::registerNatives() [51 time(s)]

notify()
	---> behavioral.command.CommandManager::notify() [51 time(s)]

hashCode()
	---> behavioral.command.CommandManager::hashCode() [51 time(s)]

finalize()
	---> behavioral.command.CommandManager::finalize() [51 time(s)]

toString()
	---> behavioral.command.CommandManager::toString() [51 time(s)]

clone()
	---> behavioral.command.CommandManager::clone() [51 time(s)]

behavioral.interpreter.AndExpression::getClass()
	---> behavioral.command.CommandManager::getClass() [51 time(s)]

wait(long)
	---> behavioral.command.CommandManager::wait(long) [51 time(s)]

wait(long,int)
	---> behavioral.command.CommandManager::wait(long,int) [51 time(s)]

wait()
	---> behavioral.command.CommandManager::wait() [51 time(s)]

notifyAll()
	---> behavioral.command.CommandManager::notifyAll() [51 time(s)]

equals(java.lang.Object)
	---> behavioral.command.CommandManager::equals(java.lang.Object) [51 time(s)]

registerNatives()
	---> behavioral.command.CommandManager::registerNatives() [51 time(s)]

notify()
	---> behavioral.command.CommandManager::notify() [51 time(s)]

hashCode()
	---> behavioral.command.CommandManager::hashCode() [51 time(s)]

interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [52 time(s)]

finalize()
	---> behavioral.interpreter.Expression::finalize() [52 time(s)]

toString()
	---> behavioral.interpreter.Expression::toString() [52 time(s)]

clone()
	---> behavioral.interpreter.Expression::clone() [52 time(s)]

behavioral.interpreter.BinaryExpression::getClass()
	---> behavioral.interpreter.Expression::getClass() [52 time(s)]

wait(long)
	---> behavioral.interpreter.Expression::wait(long) [52 time(s)]

wait(long,int)
	---> behavioral.interpreter.Expression::wait(long,int) [52 time(s)]

wait()
	---> behavioral.interpreter.Expression::wait() [52 time(s)]

notifyAll()
	---> behavioral.interpreter.Expression::notifyAll() [52 time(s)]

equals(java.lang.Object)
	---> behavioral.interpreter.Expression::equals(java.lang.Object) [52 time(s)]

registerNatives()
	---> behavioral.interpreter.Expression::registerNatives() [52 time(s)]

notify()
	---> behavioral.interpreter.Expression::notify() [52 time(s)]

hashCode()
	---> behavioral.interpreter.Expression::hashCode() [52 time(s)]

interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [52 time(s)]

finalize()
	---> behavioral.interpreter.Expression::finalize() [52 time(s)]

toString()
	---> behavioral.interpreter.Expression::toString() [52 time(s)]

clone()
	---> behavioral.interpreter.Expression::clone() [52 time(s)]

interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [52 time(s)]

behavioral.interpreter.OrExpression::getClass()
	---> behavioral.interpreter.Expression::getClass() [52 time(s)]

wait(long)
	---> behavioral.interpreter.Expression::wait(long) [52 time(s)]

wait(long,int)
	---> behavioral.interpreter.Expression::wait(long,int) [52 time(s)]

wait()
	---> behavioral.interpreter.Expression::wait() [52 time(s)]

notifyAll()
	---> behavioral.interpreter.Expression::notifyAll() [52 time(s)]

equals(java.lang.Object)
	---> behavioral.interpreter.Expression::equals(java.lang.Object) [52 time(s)]

registerNatives()
	---> behavioral.interpreter.Expression::registerNatives() [52 time(s)]

notify()
	---> behavioral.interpreter.Expression::notify() [52 time(s)]

hashCode()
	---> behavioral.interpreter.Expression::hashCode() [52 time(s)]

interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [54 time(s)]

finalize()
	---> behavioral.interpreter.Expression::finalize() [54 time(s)]

toString()
	---> behavioral.interpreter.Expression::toString() [54 time(s)]

clone()
	---> behavioral.interpreter.Expression::clone() [54 time(s)]

behavioral.interpreter.TerminalExpression::getClass()
	---> behavioral.interpreter.Expression::getClass() [54 time(s)]

wait(long)
	---> behavioral.interpreter.Expression::wait(long) [54 time(s)]

wait(long,int)
	---> behavioral.interpreter.Expression::wait(long,int) [54 time(s)]

wait()
	---> behavioral.interpreter.Expression::wait() [54 time(s)]

notifyAll()
	---> behavioral.interpreter.Expression::notifyAll() [54 time(s)]

equals(java.lang.Object)
	---> behavioral.interpreter.Expression::equals(java.lang.Object) [54 time(s)]

registerNatives()
	---> behavioral.interpreter.Expression::registerNatives() [54 time(s)]

notify()
	---> behavioral.interpreter.Expression::notify() [54 time(s)]

hashCode()
	---> behavioral.interpreter.Expression::hashCode() [54 time(s)]

interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [54 time(s)]

finalize()
	---> behavioral.interpreter.Expression::finalize() [54 time(s)]

toString()
	---> behavioral.interpreter.Expression::toString() [54 time(s)]

clone()
	---> behavioral.interpreter.Expression::clone() [54 time(s)]

behavioral.interpreter.Test::getClass()
	---> behavioral.interpreter.Expression::getClass() [54 time(s)]

wait(long)
	---> behavioral.interpreter.Expression::wait(long) [54 time(s)]

wait(long,int)
	---> behavioral.interpreter.Expression::wait(long,int) [54 time(s)]

wait()
	---> behavioral.interpreter.Expression::wait() [54 time(s)]

notifyAll()
	---> behavioral.interpreter.Expression::notifyAll() [54 time(s)]

getIsFemaleExpression()
	---> behavioral.interpreter.Expression::getIsFemaleExpression() [54 time(s)]

equals(java.lang.Object)
	---> behavioral.interpreter.Expression::equals(java.lang.Object) [54 time(s)]

main(java.lang.String[])
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [56 time(s)]

registerNatives()
	---> behavioral.interpreter.Expression::registerNatives() [56 time(s)]

notify()
	---> behavioral.interpreter.Expression::notify() [56 time(s)]

hashCode()
	---> behavioral.interpreter.Expression::hashCode() [56 time(s)]

getIsMarriedWomanExpression()
	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [56 time(s)]

finalize()
	---> behavioral.interpreter.Expression::finalize() [56 time(s)]

toString()
	---> behavioral.interpreter.Expression::toString() [56 time(s)]

clone()
	---> behavioral.interpreter.Expression::clone() [56 time(s)]

behavioral.iterator.DiscJockey::getClass()
	---> behavioral.interpreter.Expression::getClass() [56 time(s)]

wait(long)
	---> behavioral.interpreter.Expression::wait(long) [56 time(s)]

wait(long,int)
	---> behavioral.interpreter.Expression::wait(long,int) [56 time(s)]

wait()
	---> behavioral.interpreter.Expression::wait() [56 time(s)]

displaySongs()
	---> structural.composite.Song::displaySongs() [56 time(s)]

notifyAll()
	---> structural.composite.Song::notifyAll() [56 time(s)]

equals(java.lang.Object)
	---> structural.composite.Song::equals(java.lang.Object) [56 time(s)]

registerNatives()
	---> structural.composite.Song::registerNatives() [56 time(s)]

notify()
	---> structural.composite.Song::notify() [56 time(s)]

hashCode()
	---> structural.composite.Song::hashCode() [56 time(s)]

finalize()
	---> structural.composite.Song::finalize() [56 time(s)]

toString()
	---> structural.composite.Song::toString() [56 time(s)]

clone()
	---> structural.composite.Song::clone() [56 time(s)]

behavioral.iterator.Song::getClass()
	---> structural.composite.Song::getClass() [56 time(s)]

wait(long)
	---> structural.composite.Song::wait(long) [56 time(s)]

wait(long,int)
	---> structural.composite.Song::wait(long,int) [56 time(s)]

wait()
	---> structural.composite.Song::wait() [56 time(s)]

notifyAll()
	---> structural.composite.Song::notifyAll() [56 time(s)]

equals(java.lang.Object)
	---> structural.composite.Song::equals(java.lang.Object) [56 time(s)]

registerNatives()
	---> structural.composite.Song::registerNatives() [56 time(s)]

getSongName()
	---> structural.composite.Song::getSongName() [56 time(s)]

notify()
	---> structural.composite.Song::notify() [56 time(s)]

hashCode()
	---> structural.composite.Song::hashCode() [56 time(s)]

getBandName()
	---> structural.composite.Song::getBandName() [56 time(s)]

toString()
	---> structural.composite.Song::toString() [56 time(s)]

finalize()
	---> structural.composite.Song::finalize() [56 time(s)]

clone()
	---> structural.composite.Song::clone() [56 time(s)]

getYearReleased()
	---> structural.composite.Song::getYearReleased() [56 time(s)]

iterator()
	---> structural.composite.Song::iterator() [56 time(s)]

spliterator()
	---> structural.composite.Song::spliterator() [56 time(s)]

forEach(java.util.function.Consumer)
	---> structural.composite.Song::forEach(java.util.function.Consumer) [56 time(s)]

addSong(java.lang.String,java.lang.String,int)
	---> structural.composite.Song::addSong(java.lang.String,java.lang.String,int) [56 time(s)]

behavioral.iterator.SongArray::getClass()
	---> structural.composite.Song::getClass() [56 time(s)]

wait(long)
	---> structural.composite.Song::wait(long) [56 time(s)]

wait(long,int)
	---> structural.composite.Song::wait(long,int) [56 time(s)]

wait()
	---> structural.composite.Song::wait() [56 time(s)]

spliterator()
	---> structural.composite.Song::spliterator() [56 time(s)]

notifyAll()
	---> structural.composite.Song::notifyAll() [56 time(s)]

forEach(java.util.function.Consumer)
	---> structural.composite.Song::forEach(java.util.function.Consumer) [56 time(s)]

equals(java.lang.Object)
	---> structural.composite.Song::equals(java.lang.Object) [56 time(s)]

length()
	---> structural.composite.Song::length() [56 time(s)]

registerNatives()
	---> structural.composite.Song::registerNatives() [56 time(s)]

notify()
	---> structural.composite.Song::notify() [56 time(s)]

hashCode()
	---> structural.composite.Song::hashCode() [56 time(s)]

iterator()
	---> behavioral.iterator.SongArray::iterator() [56 time(s)]

getFilledArray()
	---> behavioral.iterator.SongArray::getFilledArray() [56 time(s)]

finalize()
	---> behavioral.iterator.SongArray::finalize() [56 time(s)]

toString()
	---> behavioral.iterator.SongArray::toString() [56 time(s)]

clone()
	---> behavioral.iterator.SongArray::clone() [56 time(s)]

addSong(java.lang.String,java.lang.String,int)
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [56 time(s)]

behavioral.iterator.SongHashtable::getClass()
	---> behavioral.iterator.SongArray::getClass() [56 time(s)]

wait(long)
	---> behavioral.iterator.SongArray::wait(long) [56 time(s)]

wait(long,int)
	---> behavioral.iterator.SongArray::wait(long,int) [56 time(s)]

wait()
	---> behavioral.iterator.SongArray::wait() [56 time(s)]

spliterator()
	---> behavioral.iterator.SongArray::spliterator() [56 time(s)]

notifyAll()
	---> behavioral.iterator.SongArray::notifyAll() [56 time(s)]

forEach(java.util.function.Consumer)
	---> behavioral.iterator.SongArray::forEach(java.util.function.Consumer) [56 time(s)]

equals(java.lang.Object)
	---> behavioral.iterator.SongArray::equals(java.lang.Object) [56 time(s)]

registerNatives()
	---> behavioral.iterator.SongArray::registerNatives() [56 time(s)]

notify()
	---> behavioral.iterator.SongArray::notify() [56 time(s)]

hashCode()
	---> behavioral.iterator.SongArray::hashCode() [56 time(s)]

iterator()
	---> behavioral.iterator.SongArray::iterator() [56 time(s)]

finalize()
	---> behavioral.iterator.SongArray::finalize() [56 time(s)]

toString()
	---> behavioral.iterator.SongArray::toString() [56 time(s)]

clone()
	---> behavioral.iterator.SongArray::clone() [56 time(s)]

addSong(java.lang.String,java.lang.String,int)
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [56 time(s)]

behavioral.iterator.SongList::getClass()
	---> behavioral.iterator.SongArray::getClass() [56 time(s)]

wait(long)
	---> behavioral.iterator.SongArray::wait(long) [56 time(s)]

wait(long,int)
	---> behavioral.iterator.SongArray::wait(long,int) [56 time(s)]

wait()
	---> behavioral.iterator.SongArray::wait() [56 time(s)]

spliterator()
	---> behavioral.iterator.SongArray::spliterator() [56 time(s)]

notifyAll()
	---> behavioral.iterator.SongArray::notifyAll() [56 time(s)]

forEach(java.util.function.Consumer)
	---> behavioral.iterator.SongArray::forEach(java.util.function.Consumer) [56 time(s)]

equals(java.lang.Object)
	---> behavioral.iterator.SongArray::equals(java.lang.Object) [56 time(s)]

registerNatives()
	---> behavioral.iterator.SongArray::registerNatives() [56 time(s)]

notify()
	---> behavioral.iterator.SongArray::notify() [56 time(s)]

hashCode()
	---> behavioral.iterator.SongArray::hashCode() [56 time(s)]

iterator()
	---> behavioral.iterator.SongArray::iterator() [56 time(s)]

finalize()
	---> behavioral.iterator.SongArray::finalize() [56 time(s)]

toString()
	---> behavioral.iterator.SongArray::toString() [56 time(s)]

clone()
	---> behavioral.iterator.SongArray::clone() [56 time(s)]

addSong(java.lang.String,java.lang.String,int)
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [56 time(s)]

behavioral.iterator.Test::getClass()
	---> behavioral.iterator.SongArray::getClass() [56 time(s)]

wait(long)
	---> behavioral.iterator.SongArray::wait(long) [56 time(s)]

wait(long,int)
	---> behavioral.iterator.SongArray::wait(long,int) [56 time(s)]

wait()
	---> behavioral.iterator.SongArray::wait() [56 time(s)]

notifyAll()
	---> behavioral.iterator.SongArray::notifyAll() [56 time(s)]

equals(java.lang.Object)
	---> behavioral.iterator.SongArray::equals(java.lang.Object) [56 time(s)]

main(java.lang.String[])
	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [68 time(s)]

registerNatives()
	---> behavioral.iterator.DiscJockey::registerNatives() [68 time(s)]

notify()
	---> behavioral.iterator.DiscJockey::notify() [68 time(s)]

hashCode()
	---> behavioral.iterator.DiscJockey::hashCode() [68 time(s)]

finalize()
	---> behavioral.iterator.DiscJockey::finalize() [68 time(s)]

toString()
	---> behavioral.iterator.DiscJockey::toString() [68 time(s)]

clone()
	---> behavioral.iterator.DiscJockey::clone() [68 time(s)]

behavioral.mediator.ChatRoom::getClass()
	---> behavioral.iterator.DiscJockey::getClass() [68 time(s)]

wait(long)
	---> behavioral.iterator.DiscJockey::wait(long) [68 time(s)]

wait(long,int)
	---> behavioral.iterator.DiscJockey::wait(long,int) [68 time(s)]

wait()
	---> behavioral.iterator.DiscJockey::wait() [68 time(s)]

notifyAll()
	---> behavioral.iterator.DiscJockey::notifyAll() [68 time(s)]

addUser(behavioral.mediator.User)
	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [68 time(s)]

equals(java.lang.Object)
	---> behavioral.mediator.User::equals(java.lang.Object) [68 time(s)]

registerNatives()
	---> behavioral.mediator.User::registerNatives() [68 time(s)]

notify()
	---> behavioral.mediator.User::notify() [68 time(s)]

hashCode()
	---> behavioral.mediator.User::hashCode() [68 time(s)]

sendMessage(java.lang.String,java.lang.String)
	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [68 time(s)]

finalize()
	---> behavioral.mediator.User::finalize() [68 time(s)]

toString()
	---> behavioral.mediator.User::toString() [68 time(s)]

clone()
	---> behavioral.mediator.User::clone() [68 time(s)]

behavioral.mediator.ChatUser::getName()
	---> behavioral.mediator.User::getName() [68 time(s)]

getClass()
	---> behavioral.mediator.User::getClass() [68 time(s)]

wait(long)
	---> behavioral.mediator.User::wait(long) [68 time(s)]

wait(long,int)
	---> behavioral.mediator.User::wait(long,int) [68 time(s)]

wait()
	---> behavioral.mediator.User::wait() [68 time(s)]

receive(java.lang.String)
	---> behavioral.mediator.ChatUser::receive(java.lang.String) [68 time(s)]

notifyAll()
	---> behavioral.mediator.ChatUser::notifyAll() [68 time(s)]

equals(java.lang.Object)
	---> behavioral.mediator.ChatUser::equals(java.lang.Object) [68 time(s)]

getId()
	---> behavioral.mediator.ChatUser::getId() [68 time(s)]

registerNatives()
	---> behavioral.mediator.ChatUser::registerNatives() [68 time(s)]

notify()
	---> behavioral.mediator.ChatUser::notify() [68 time(s)]

hashCode()
	---> behavioral.mediator.ChatUser::hashCode() [68 time(s)]

getRoom()
	---> behavioral.mediator.ChatUser::getRoom() [68 time(s)]

finalize()
	---> behavioral.mediator.ChatUser::finalize() [68 time(s)]

toString()
	---> behavioral.mediator.ChatUser::toString() [68 time(s)]

clone()
	---> behavioral.mediator.ChatUser::clone() [68 time(s)]

send(java.lang.String,java.lang.String)
	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [70 time(s)]

sendMessage(java.lang.String,java.lang.String)
	---> behavioral.mediator.ChatUser::sendMessage(java.lang.String,java.lang.String) [70 time(s)]

addUser(behavioral.mediator.User)
	---> behavioral.mediator.ChatUser::addUser(behavioral.mediator.User) [70 time(s)]

behavioral.mediator.Test::getClass()
	---> behavioral.mediator.ChatUser::getClass() [70 time(s)]

wait(long)
	---> behavioral.mediator.ChatUser::wait(long) [70 time(s)]

wait(long,int)
	---> behavioral.mediator.ChatUser::wait(long,int) [70 time(s)]

wait()
	---> behavioral.mediator.ChatUser::wait() [70 time(s)]

notifyAll()
	---> behavioral.mediator.ChatUser::notifyAll() [70 time(s)]

equals(java.lang.Object)
	---> behavioral.mediator.ChatUser::equals(java.lang.Object) [70 time(s)]

main(java.lang.String[])
	---> behavioral.mediator.User::main(java.lang.String[]) [79 time(s)]

registerNatives()
	---> behavioral.mediator.User::registerNatives() [79 time(s)]

notify()
	---> behavioral.mediator.User::notify() [79 time(s)]

hashCode()
	---> behavioral.mediator.User::hashCode() [79 time(s)]

finalize()
	---> behavioral.mediator.User::finalize() [79 time(s)]

toString()
	---> behavioral.mediator.User::toString() [79 time(s)]

clone()
	---> behavioral.mediator.User::clone() [79 time(s)]

behavioral.mediator.User::getName()
	---> behavioral.mediator.User::getName() [79 time(s)]

getClass()
	---> behavioral.mediator.User::getClass() [79 time(s)]

wait(long)
	---> behavioral.mediator.User::wait(long) [79 time(s)]

wait(long,int)
	---> behavioral.mediator.User::wait(long,int) [79 time(s)]

wait()
	---> behavioral.mediator.User::wait() [79 time(s)]

receive(java.lang.String)
	---> behavioral.mediator.User::receive(java.lang.String) [79 time(s)]

notifyAll()
	---> behavioral.mediator.User::notifyAll() [79 time(s)]

equals(java.lang.Object)
	---> behavioral.mediator.User::equals(java.lang.Object) [79 time(s)]

getId()
	---> behavioral.mediator.User::getId() [79 time(s)]

registerNatives()
	---> behavioral.mediator.User::registerNatives() [79 time(s)]

notify()
	---> behavioral.mediator.User::notify() [79 time(s)]

hashCode()
	---> behavioral.mediator.User::hashCode() [79 time(s)]

getRoom()
	---> behavioral.mediator.User::getRoom() [79 time(s)]

finalize()
	---> behavioral.mediator.User::finalize() [79 time(s)]

toString()
	---> behavioral.mediator.User::toString() [79 time(s)]

clone()
	---> behavioral.mediator.User::clone() [79 time(s)]

send(java.lang.String,java.lang.String)
	---> behavioral.mediator.User::send(java.lang.String,java.lang.String) [79 time(s)]

behavioral.memento.CareTaker::getClass()
	---> behavioral.mediator.User::getClass() [79 time(s)]

wait(long)
	---> behavioral.mediator.User::wait(long) [79 time(s)]

wait(long,int)
	---> behavioral.mediator.User::wait(long,int) [79 time(s)]

wait()
	---> behavioral.mediator.User::wait() [79 time(s)]

notifyAll()
	---> behavioral.mediator.User::notifyAll() [79 time(s)]

equals(java.lang.Object)
	---> behavioral.mediator.User::equals(java.lang.Object) [79 time(s)]

registerNatives()
	---> behavioral.mediator.User::registerNatives() [79 time(s)]

notify()
	---> behavioral.mediator.User::notify() [79 time(s)]

hashCode()
	---> behavioral.mediator.User::hashCode() [79 time(s)]

addMemento(behavioral.memento.Memento)
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [79 time(s)]

get(int)
	---> behavioral.mediator.User::get(int) [79 time(s)]

finalize()
	---> behavioral.mediator.User::finalize() [79 time(s)]

toString()
	---> behavioral.mediator.User::toString() [79 time(s)]

clone()
	---> behavioral.mediator.User::clone() [79 time(s)]

behavioral.memento.Memento::getClass()
	---> behavioral.mediator.User::getClass() [79 time(s)]

wait(long)
	---> behavioral.mediator.User::wait(long) [79 time(s)]

wait(long,int)
	---> behavioral.mediator.User::wait(long,int) [79 time(s)]

wait()
	---> behavioral.mediator.User::wait() [79 time(s)]

notifyAll()
	---> behavioral.mediator.User::notifyAll() [79 time(s)]

equals(java.lang.Object)
	---> behavioral.mediator.User::equals(java.lang.Object) [79 time(s)]

registerNatives()
	---> behavioral.mediator.User::registerNatives() [79 time(s)]

notify()
	---> behavioral.mediator.User::notify() [79 time(s)]

hashCode()
	---> behavioral.mediator.User::hashCode() [79 time(s)]

getState()
	---> behavioral.mediator.User::getState() [79 time(s)]

finalize()
	---> behavioral.mediator.User::finalize() [79 time(s)]

toString()
	---> behavioral.mediator.User::toString() [79 time(s)]

clone()
	---> behavioral.mediator.User::clone() [79 time(s)]

behavioral.memento.Originator::getClass()
	---> behavioral.mediator.User::getClass() [79 time(s)]

wait(long)
	---> behavioral.mediator.User::wait(long) [79 time(s)]

wait(long,int)
	---> behavioral.mediator.User::wait(long,int) [79 time(s)]

wait()
	---> behavioral.mediator.User::wait() [79 time(s)]

restoreState(behavioral.memento.Memento)
	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [80 time(s)]

setState(java.lang.String)
	---> behavioral.memento.Memento::setState(java.lang.String) [80 time(s)]

notifyAll()
	---> behavioral.memento.Memento::notifyAll() [80 time(s)]

equals(java.lang.Object)
	---> behavioral.memento.Memento::equals(java.lang.Object) [80 time(s)]

registerNatives()
	---> behavioral.memento.Memento::registerNatives() [80 time(s)]

notify()
	---> behavioral.memento.Memento::notify() [80 time(s)]

hashCode()
	---> behavioral.memento.Memento::hashCode() [80 time(s)]

getState()
	---> behavioral.memento.Memento::getState() [80 time(s)]

externalizeState()
	---> behavioral.memento.Memento::externalizeState() [80 time(s)]

finalize()
	---> behavioral.memento.Memento::finalize() [80 time(s)]

toString()
	---> behavioral.memento.Memento::toString() [80 time(s)]

clone()
	---> behavioral.memento.Memento::clone() [80 time(s)]

behavioral.memento.Test::getClass()
	---> behavioral.memento.Memento::getClass() [80 time(s)]

wait(long)
	---> behavioral.memento.Memento::wait(long) [80 time(s)]

wait(long,int)
	---> behavioral.memento.Memento::wait(long,int) [80 time(s)]

wait()
	---> behavioral.memento.Memento::wait() [80 time(s)]

notifyAll()
	---> behavioral.memento.Memento::notifyAll() [80 time(s)]

equals(java.lang.Object)
	---> behavioral.memento.Memento::equals(java.lang.Object) [80 time(s)]

main(java.lang.String[])
	---> behavioral.memento.Originator::main(java.lang.String[]) [95 time(s)]

registerNatives()
	---> behavioral.memento.Originator::registerNatives() [95 time(s)]

notify()
	---> behavioral.memento.Originator::notify() [95 time(s)]

hashCode()
	---> behavioral.memento.Originator::hashCode() [95 time(s)]

finalize()
	---> behavioral.memento.Originator::finalize() [95 time(s)]

toString()
	---> behavioral.memento.Originator::toString() [95 time(s)]

clone()
	---> behavioral.memento.Originator::clone() [95 time(s)]

update()
	---> behavioral.memento.Originator::update() [95 time(s)]

behavioral.observer.StockGrabber::getClass()
	---> behavioral.memento.Originator::getClass() [95 time(s)]

wait(long)
	---> behavioral.memento.Originator::wait(long) [95 time(s)]

wait(long,int)
	---> behavioral.memento.Originator::wait(long,int) [95 time(s)]

wait()
	---> behavioral.memento.Originator::wait() [95 time(s)]

setGoogleStock(double)
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [95 time(s)]

notifyObserver()
	---> behavioral.observer.Observer::notifyObserver() [95 time(s)]

notifyAll()
	---> behavioral.observer.Observer::notifyAll() [95 time(s)]

getIBMStock()
	---> behavioral.observer.Observer::getIBMStock() [95 time(s)]

equals(java.lang.Object)
	---> behavioral.observer.Observer::equals(java.lang.Object) [95 time(s)]

unregister(behavioral.observer.Observer)
	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [95 time(s)]

registerNatives()
	---> behavioral.observer.Observer::registerNatives() [95 time(s)]

notify()
	---> behavioral.observer.Observer::notify() [95 time(s)]

setAppleStock(double)
	---> behavioral.observer.StockGrabber::setAppleStock(double) [95 time(s)]

getGoogleStock()
	---> behavioral.observer.StockGrabber::getGoogleStock() [95 time(s)]

hashCode()
	---> behavioral.observer.StockGrabber::hashCode() [95 time(s)]

setIBMStock(double)
	---> behavioral.observer.StockGrabber::setIBMStock(double) [95 time(s)]

getAppleStock()
	---> behavioral.observer.StockGrabber::getAppleStock() [95 time(s)]

register(behavioral.observer.Observer)
	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [95 time(s)]

finalize()
	---> behavioral.observer.StockGrabber::finalize() [95 time(s)]

toString()
	---> behavioral.observer.StockGrabber::toString() [95 time(s)]

clone()
	---> behavioral.observer.StockGrabber::clone() [95 time(s)]

behavioral.observer.StockObserver::getClass()
	---> behavioral.observer.StockGrabber::getClass() [95 time(s)]

wait(long)
	---> behavioral.observer.StockGrabber::wait(long) [95 time(s)]

wait(long,int)
	---> behavioral.observer.StockGrabber::wait(long,int) [95 time(s)]

wait()
	---> behavioral.observer.StockGrabber::wait() [95 time(s)]

notifyAll()
	---> behavioral.observer.StockGrabber::notifyAll() [95 time(s)]

equals(java.lang.Object)
	---> behavioral.observer.StockGrabber::equals(java.lang.Object) [95 time(s)]

registerNatives()
	---> behavioral.observer.StockGrabber::registerNatives() [95 time(s)]

update()
	---> behavioral.observer.StockObserver::update() [98 time(s)]

displayPrices()
	---> behavioral.observer.StockObserver::displayPrices() [98 time(s)]

notify()
	---> behavioral.observer.StockObserver::notify() [98 time(s)]

hashCode()
	---> behavioral.observer.StockObserver::hashCode() [98 time(s)]

finalize()
	---> behavioral.observer.StockObserver::finalize() [98 time(s)]

toString()
	---> behavioral.observer.StockObserver::toString() [98 time(s)]

clone()
	---> behavioral.observer.StockObserver::clone() [98 time(s)]

notifyObserver()
	---> behavioral.observer.StockObserver::notifyObserver() [98 time(s)]

register(behavioral.observer.Observer)
	---> behavioral.observer.StockObserver::register(behavioral.observer.Observer) [98 time(s)]

unregister(behavioral.observer.Observer)
	---> behavioral.observer.StockObserver::unregister(behavioral.observer.Observer) [98 time(s)]

behavioral.observer.Test::getClass()
	---> behavioral.observer.StockObserver::getClass() [98 time(s)]

wait(long)
	---> behavioral.observer.StockObserver::wait(long) [98 time(s)]

wait(long,int)
	---> behavioral.observer.StockObserver::wait(long,int) [98 time(s)]

wait()
	---> behavioral.observer.StockObserver::wait() [98 time(s)]

notifyAll()
	---> behavioral.observer.StockObserver::notifyAll() [98 time(s)]

equals(java.lang.Object)
	---> behavioral.observer.StockObserver::equals(java.lang.Object) [98 time(s)]

main(java.lang.String[])
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [108 time(s)]

registerNatives()
	---> behavioral.observer.StockGrabber::registerNatives() [108 time(s)]

notify()
	---> behavioral.observer.StockGrabber::notify() [108 time(s)]

hashCode()
	---> behavioral.observer.StockGrabber::hashCode() [108 time(s)]

finalize()
	---> behavioral.observer.StockGrabber::finalize() [108 time(s)]

toString()
	---> behavioral.observer.StockGrabber::toString() [108 time(s)]

clone()
	---> behavioral.observer.StockGrabber::clone() [108 time(s)]

behavioral.state.ATMMachine::getClass()
	---> behavioral.observer.StockGrabber::getClass() [108 time(s)]

getCashInMachine()
	---> behavioral.observer.StockGrabber::getCashInMachine() [108 time(s)]

wait(long)
	---> behavioral.observer.StockGrabber::wait(long) [108 time(s)]

wait(long,int)
	---> behavioral.observer.StockGrabber::wait(long,int) [108 time(s)]

wait()
	---> behavioral.observer.StockGrabber::wait() [108 time(s)]

insertCard()
	---> behavioral.state.ATMState::insertCard() [108 time(s)]

ejectCard()
	---> behavioral.state.ATMState::ejectCard() [108 time(s)]

requestCash(int)
	---> behavioral.state.ATMState::requestCash(int) [108 time(s)]

notifyAll()
	---> behavioral.state.ATMState::notifyAll() [108 time(s)]

setATMState(behavioral.state.ATMState)
	---> behavioral.state.ATMState::setATMState(behavioral.state.ATMState) [108 time(s)]

insertPin(int)
	---> behavioral.state.ATMState::insertPin(int) [108 time(s)]

equals(java.lang.Object)
	---> behavioral.state.ATMState::equals(java.lang.Object) [108 time(s)]

registerNatives()
	---> behavioral.state.ATMState::registerNatives() [108 time(s)]

getATMState()
	---> behavioral.state.ATMState::getATMState() [108 time(s)]

getNoCardState()
	---> behavioral.state.ATMState::getNoCardState() [108 time(s)]

notify()
	---> behavioral.state.ATMState::notify() [108 time(s)]

getHasCardState()
	---> behavioral.state.ATMState::getHasCardState() [108 time(s)]

hashCode()
	---> behavioral.state.ATMState::hashCode() [108 time(s)]

getNoCashState()
	---> behavioral.state.ATMState::getNoCashState() [108 time(s)]

getCorrectPinState()
	---> behavioral.state.ATMState::getCorrectPinState() [108 time(s)]

finalize()
	---> behavioral.state.ATMState::finalize() [108 time(s)]

toString()
	---> behavioral.state.ATMState::toString() [108 time(s)]

clone()
	---> behavioral.state.ATMState::clone() [108 time(s)]

setCashInMachine(int)
	---> behavioral.state.ATMState::setCashInMachine(int) [108 time(s)]

behavioral.state.ATMState::getClass()
	---> behavioral.state.ATMState::getClass() [108 time(s)]

wait(long)
	---> behavioral.state.ATMState::wait(long) [108 time(s)]

wait(long,int)
	---> behavioral.state.ATMState::wait(long,int) [108 time(s)]

wait()
	---> behavioral.state.ATMState::wait() [108 time(s)]

insertCard()
	---> behavioral.state.ATMState::insertCard() [108 time(s)]

ejectCard()
	---> behavioral.state.ATMState::ejectCard() [108 time(s)]

requestCash(int)
	---> behavioral.state.ATMState::requestCash(int) [108 time(s)]

notifyAll()
	---> behavioral.state.ATMState::notifyAll() [108 time(s)]

insertPin(int)
	---> behavioral.state.ATMState::insertPin(int) [108 time(s)]

equals(java.lang.Object)
	---> behavioral.state.ATMState::equals(java.lang.Object) [108 time(s)]

registerNatives()
	---> behavioral.state.ATMState::registerNatives() [108 time(s)]

notify()
	---> behavioral.state.ATMState::notify() [108 time(s)]

hashCode()
	---> behavioral.state.ATMState::hashCode() [108 time(s)]

finalize()
	---> behavioral.state.ATMState::finalize() [108 time(s)]

toString()
	---> behavioral.state.ATMState::toString() [108 time(s)]

clone()
	---> behavioral.state.ATMState::clone() [108 time(s)]

behavioral.state.CorrectPin::getClass()
	---> behavioral.state.ATMState::getClass() [108 time(s)]

wait(long)
	---> behavioral.state.ATMState::wait(long) [108 time(s)]

wait(long,int)
	---> behavioral.state.ATMState::wait(long,int) [108 time(s)]

wait()
	---> behavioral.state.ATMState::wait() [108 time(s)]

insertCard()
	---> behavioral.state.ATMState::insertCard() [108 time(s)]

ejectCard()
	---> behavioral.state.ATMMachine::ejectCard() [110 time(s)]

requestCash(int)
	---> behavioral.state.ATMMachine::requestCash(int) [117 time(s)]

notifyAll()
	---> behavioral.state.ATMMachine::notifyAll() [117 time(s)]

insertPin(int)
	---> behavioral.state.ATMMachine::insertPin(int) [117 time(s)]

equals(java.lang.Object)
	---> behavioral.state.ATMMachine::equals(java.lang.Object) [117 time(s)]

registerNatives()
	---> behavioral.state.ATMMachine::registerNatives() [117 time(s)]

notify()
	---> behavioral.state.ATMMachine::notify() [117 time(s)]

hashCode()
	---> behavioral.state.ATMMachine::hashCode() [117 time(s)]

finalize()
	---> behavioral.state.ATMMachine::finalize() [117 time(s)]

toString()
	---> behavioral.state.ATMMachine::toString() [117 time(s)]

clone()
	---> behavioral.state.ATMMachine::clone() [117 time(s)]

behavioral.state.HasCard::getClass()
	---> behavioral.state.ATMMachine::getClass() [117 time(s)]

wait(long)
	---> behavioral.state.ATMMachine::wait(long) [117 time(s)]

wait(long,int)
	---> behavioral.state.ATMMachine::wait(long,int) [117 time(s)]

wait()
	---> behavioral.state.ATMMachine::wait() [117 time(s)]

insertCard()
	---> behavioral.state.ATMMachine::insertCard() [117 time(s)]

ejectCard()
	---> behavioral.state.ATMMachine::ejectCard() [119 time(s)]

requestCash(int)
	---> behavioral.state.ATMMachine::requestCash(int) [119 time(s)]

notifyAll()
	---> behavioral.state.ATMMachine::notifyAll() [119 time(s)]

insertPin(int)
	---> behavioral.state.HasCard::insertPin(int) [122 time(s)]

equals(java.lang.Object)
	---> behavioral.state.HasCard::equals(java.lang.Object) [122 time(s)]

registerNatives()
	---> behavioral.state.HasCard::registerNatives() [122 time(s)]

notify()
	---> behavioral.state.HasCard::notify() [122 time(s)]

hashCode()
	---> behavioral.state.HasCard::hashCode() [122 time(s)]

finalize()
	---> behavioral.state.HasCard::finalize() [122 time(s)]

toString()
	---> behavioral.state.HasCard::toString() [122 time(s)]

clone()
	---> behavioral.state.HasCard::clone() [122 time(s)]

insertCard()
	---> behavioral.state.HasCard::insertCard() [122 time(s)]

ejectCard()
	---> behavioral.state.HasCard::ejectCard() [122 time(s)]

requestCash(int)
	---> behavioral.state.HasCard::requestCash(int) [122 time(s)]

insertPin(int)
	---> behavioral.state.HasCard::insertPin(int) [122 time(s)]

behavioral.state.NoCard::getClass()
	---> behavioral.state.HasCard::getClass() [122 time(s)]

wait(long)
	---> behavioral.state.HasCard::wait(long) [122 time(s)]

wait(long,int)
	---> behavioral.state.HasCard::wait(long,int) [122 time(s)]

wait()
	---> behavioral.state.HasCard::wait() [122 time(s)]

insertCard()
	---> behavioral.state.ATMMachine::insertCard() [124 time(s)]

ejectCard()
	---> behavioral.state.NoCard::ejectCard() [125 time(s)]

requestCash(int)
	---> behavioral.state.NoCard::requestCash(int) [126 time(s)]

notifyAll()
	---> behavioral.state.NoCard::notifyAll() [126 time(s)]

insertPin(int)
	---> behavioral.state.NoCard::insertPin(int) [127 time(s)]

equals(java.lang.Object)
	---> behavioral.state.NoCard::equals(java.lang.Object) [127 time(s)]

registerNatives()
	---> behavioral.state.NoCard::registerNatives() [127 time(s)]

notify()
	---> behavioral.state.NoCard::notify() [127 time(s)]

hashCode()
	---> behavioral.state.NoCard::hashCode() [127 time(s)]

defaultMessage()
	---> behavioral.state.NoCard::defaultMessage() [127 time(s)]

finalize()
	---> behavioral.state.NoCard::finalize() [127 time(s)]

toString()
	---> behavioral.state.NoCard::toString() [127 time(s)]

clone()
	---> behavioral.state.NoCard::clone() [127 time(s)]

behavioral.state.NoCash::getClass()
	---> behavioral.state.NoCard::getClass() [127 time(s)]

wait(long)
	---> behavioral.state.NoCard::wait(long) [127 time(s)]

wait(long,int)
	---> behavioral.state.NoCard::wait(long,int) [127 time(s)]

wait()
	---> behavioral.state.NoCard::wait() [127 time(s)]

insertCard()
	---> behavioral.state.NoCash::insertCard() [128 time(s)]

ejectCard()
	---> behavioral.state.NoCash::ejectCard() [129 time(s)]

requestCash(int)
	---> behavioral.state.NoCash::requestCash(int) [130 time(s)]

notifyAll()
	---> behavioral.state.NoCash::notifyAll() [130 time(s)]

insertPin(int)
	---> behavioral.state.NoCash::insertPin(int) [131 time(s)]

equals(java.lang.Object)
	---> behavioral.state.NoCash::equals(java.lang.Object) [131 time(s)]

registerNatives()
	---> behavioral.state.NoCash::registerNatives() [131 time(s)]

notify()
	---> behavioral.state.NoCash::notify() [131 time(s)]

hashCode()
	---> behavioral.state.NoCash::hashCode() [131 time(s)]

defaultMessage()
	---> behavioral.state.NoCash::defaultMessage() [131 time(s)]

finalize()
	---> behavioral.state.NoCash::finalize() [131 time(s)]

toString()
	---> behavioral.state.NoCash::toString() [131 time(s)]

clone()
	---> behavioral.state.NoCash::clone() [131 time(s)]

behavioral.state.Test::getClass()
	---> behavioral.state.NoCash::getClass() [131 time(s)]

wait(long)
	---> behavioral.state.NoCash::wait(long) [131 time(s)]

wait(long,int)
	---> behavioral.state.NoCash::wait(long,int) [131 time(s)]

wait()
	---> behavioral.state.NoCash::wait() [131 time(s)]

notifyAll()
	---> behavioral.state.NoCash::notifyAll() [131 time(s)]

equals(java.lang.Object)
	---> behavioral.state.NoCash::equals(java.lang.Object) [131 time(s)]

main(java.lang.String[])
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [142 time(s)]

registerNatives()
	---> behavioral.state.ATMMachine::registerNatives() [142 time(s)]

notify()
	---> behavioral.state.ATMMachine::notify() [142 time(s)]

hashCode()
	---> behavioral.state.ATMMachine::hashCode() [142 time(s)]

finalize()
	---> behavioral.state.ATMMachine::finalize() [142 time(s)]

toString()
	---> behavioral.state.ATMMachine::toString() [142 time(s)]

clone()
	---> behavioral.state.ATMMachine::clone() [142 time(s)]

behavioral.strategy.Add::getClass()
	---> behavioral.state.ATMMachine::getClass() [142 time(s)]

wait(long)
	---> behavioral.state.ATMMachine::wait(long) [142 time(s)]

wait(long,int)
	---> behavioral.state.ATMMachine::wait(long,int) [142 time(s)]

wait()
	---> behavioral.state.ATMMachine::wait() [142 time(s)]

notifyAll()
	---> behavioral.state.ATMMachine::notifyAll() [142 time(s)]

equals(java.lang.Object)
	---> behavioral.state.ATMMachine::equals(java.lang.Object) [142 time(s)]

registerNatives()
	---> behavioral.state.ATMMachine::registerNatives() [142 time(s)]

notify()
	---> behavioral.state.ATMMachine::notify() [142 time(s)]

execute(int,int)
	---> behavioral.state.ATMMachine::execute(int,int) [142 time(s)]

hashCode()
	---> behavioral.state.ATMMachine::hashCode() [142 time(s)]

finalize()
	---> behavioral.state.ATMMachine::finalize() [142 time(s)]

toString()
	---> behavioral.state.ATMMachine::toString() [142 time(s)]

clone()
	---> behavioral.state.ATMMachine::clone() [142 time(s)]

execute(int,int)
	---> behavioral.state.ATMMachine::execute(int,int) [142 time(s)]

behavioral.strategy.Calculator::getClass()
	---> behavioral.state.ATMMachine::getClass() [142 time(s)]

wait(long)
	---> behavioral.state.ATMMachine::wait(long) [142 time(s)]

wait(long,int)
	---> behavioral.state.ATMMachine::wait(long,int) [142 time(s)]

wait()
	---> behavioral.state.ATMMachine::wait() [142 time(s)]

reset()
	---> behavioral.state.ATMMachine::reset() [142 time(s)]

notifyAll()
	---> behavioral.state.ATMMachine::notifyAll() [142 time(s)]

equals(java.lang.Object)
	---> behavioral.state.ATMMachine::equals(java.lang.Object) [142 time(s)]

registerNatives()
	---> behavioral.state.ATMMachine::registerNatives() [142 time(s)]

notify()
	---> behavioral.state.ATMMachine::notify() [142 time(s)]

getResult()
	---> behavioral.state.ATMMachine::getResult() [142 time(s)]

hashCode()
	---> behavioral.state.ATMMachine::hashCode() [142 time(s)]

computeOperation(int,int)
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [142 time(s)]

setOperation(behavioral.strategy.ArithmeticOperation)
	---> behavioral.strategy.ArithmeticOperation::setOperation(behavioral.strategy.ArithmeticOperation) [142 time(s)]

finalize()
	---> behavioral.strategy.ArithmeticOperation::finalize() [142 time(s)]

toString()
	---> behavioral.strategy.ArithmeticOperation::toString() [142 time(s)]

clone()
	---> behavioral.strategy.ArithmeticOperation::clone() [142 time(s)]

behavioral.strategy.Divide::getClass()
	---> behavioral.strategy.ArithmeticOperation::getClass() [142 time(s)]

wait(long)
	---> behavioral.strategy.ArithmeticOperation::wait(long) [142 time(s)]

wait(long,int)
	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [142 time(s)]

wait()
	---> behavioral.strategy.ArithmeticOperation::wait() [142 time(s)]

notifyAll()
	---> behavioral.strategy.ArithmeticOperation::notifyAll() [142 time(s)]

equals(java.lang.Object)
	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [142 time(s)]

registerNatives()
	---> behavioral.strategy.ArithmeticOperation::registerNatives() [142 time(s)]

notify()
	---> behavioral.strategy.ArithmeticOperation::notify() [142 time(s)]

execute(int,int)
	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [142 time(s)]

hashCode()
	---> behavioral.strategy.ArithmeticOperation::hashCode() [142 time(s)]

finalize()
	---> behavioral.strategy.ArithmeticOperation::finalize() [142 time(s)]

toString()
	---> behavioral.strategy.ArithmeticOperation::toString() [142 time(s)]

clone()
	---> behavioral.strategy.ArithmeticOperation::clone() [142 time(s)]

behavioral.strategy.Modulo::getClass()
	---> behavioral.strategy.ArithmeticOperation::getClass() [142 time(s)]

wait(long)
	---> behavioral.strategy.ArithmeticOperation::wait(long) [142 time(s)]

wait(long,int)
	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [142 time(s)]

wait()
	---> behavioral.strategy.ArithmeticOperation::wait() [142 time(s)]

notifyAll()
	---> behavioral.strategy.ArithmeticOperation::notifyAll() [142 time(s)]

equals(java.lang.Object)
	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [142 time(s)]

registerNatives()
	---> behavioral.strategy.ArithmeticOperation::registerNatives() [142 time(s)]

notify()
	---> behavioral.strategy.ArithmeticOperation::notify() [142 time(s)]

execute(int,int)
	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [142 time(s)]

hashCode()
	---> behavioral.strategy.ArithmeticOperation::hashCode() [142 time(s)]

finalize()
	---> behavioral.strategy.ArithmeticOperation::finalize() [142 time(s)]

toString()
	---> behavioral.strategy.ArithmeticOperation::toString() [142 time(s)]

clone()
	---> behavioral.strategy.ArithmeticOperation::clone() [142 time(s)]

behavioral.strategy.Multiply::getClass()
	---> behavioral.strategy.ArithmeticOperation::getClass() [142 time(s)]

wait(long)
	---> behavioral.strategy.ArithmeticOperation::wait(long) [142 time(s)]

wait(long,int)
	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [142 time(s)]

wait()
	---> behavioral.strategy.ArithmeticOperation::wait() [142 time(s)]

notifyAll()
	---> behavioral.strategy.ArithmeticOperation::notifyAll() [142 time(s)]

equals(java.lang.Object)
	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [142 time(s)]

registerNatives()
	---> behavioral.strategy.ArithmeticOperation::registerNatives() [142 time(s)]

notify()
	---> behavioral.strategy.ArithmeticOperation::notify() [142 time(s)]

execute(int,int)
	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [142 time(s)]

hashCode()
	---> behavioral.strategy.ArithmeticOperation::hashCode() [142 time(s)]

finalize()
	---> behavioral.strategy.ArithmeticOperation::finalize() [142 time(s)]

toString()
	---> behavioral.strategy.ArithmeticOperation::toString() [142 time(s)]

clone()
	---> behavioral.strategy.ArithmeticOperation::clone() [142 time(s)]

behavioral.strategy.Subtract::getClass()
	---> behavioral.strategy.ArithmeticOperation::getClass() [142 time(s)]

wait(long)
	---> behavioral.strategy.ArithmeticOperation::wait(long) [142 time(s)]

wait(long,int)
	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [142 time(s)]

wait()
	---> behavioral.strategy.ArithmeticOperation::wait() [142 time(s)]

notifyAll()
	---> behavioral.strategy.ArithmeticOperation::notifyAll() [142 time(s)]

equals(java.lang.Object)
	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [142 time(s)]

registerNatives()
	---> behavioral.strategy.ArithmeticOperation::registerNatives() [142 time(s)]

notify()
	---> behavioral.strategy.ArithmeticOperation::notify() [142 time(s)]

execute(int,int)
	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [142 time(s)]

hashCode()
	---> behavioral.strategy.ArithmeticOperation::hashCode() [142 time(s)]

finalize()
	---> behavioral.strategy.ArithmeticOperation::finalize() [142 time(s)]

toString()
	---> behavioral.strategy.ArithmeticOperation::toString() [142 time(s)]

clone()
	---> behavioral.strategy.ArithmeticOperation::clone() [142 time(s)]

behavioral.strategy.Test::getClass()
	---> behavioral.strategy.ArithmeticOperation::getClass() [142 time(s)]

wait(long)
	---> behavioral.strategy.ArithmeticOperation::wait(long) [142 time(s)]

wait(long,int)
	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [142 time(s)]

wait()
	---> behavioral.strategy.ArithmeticOperation::wait() [142 time(s)]

computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int)
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [142 time(s)]

notifyAll()
	---> behavioral.strategy.ArithmeticOperation::notifyAll() [142 time(s)]

equals(java.lang.Object)
	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [142 time(s)]

main(java.lang.String[])
	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [142 time(s)]

registerNatives()
	---> behavioral.strategy.ArithmeticOperation::registerNatives() [142 time(s)]

notify()
	---> behavioral.strategy.ArithmeticOperation::notify() [142 time(s)]

hashCode()
	---> behavioral.strategy.ArithmeticOperation::hashCode() [142 time(s)]

finalize()
	---> behavioral.strategy.ArithmeticOperation::finalize() [142 time(s)]

toString()
	---> behavioral.strategy.ArithmeticOperation::toString() [142 time(s)]

clone()
	---> behavioral.strategy.ArithmeticOperation::clone() [142 time(s)]

behavioral.template_method.Basketball::getClass()
	---> behavioral.strategy.ArithmeticOperation::getClass() [142 time(s)]

play()
	---> behavioral.template_method.Game::play() [144 time(s)]

wait(long)
	---> behavioral.template_method.Game::wait(long) [144 time(s)]

wait(long,int)
	---> behavioral.template_method.Game::wait(long,int) [144 time(s)]

wait()
	---> behavioral.template_method.Game::wait() [144 time(s)]

notifyAll()
	---> behavioral.template_method.Game::notifyAll() [144 time(s)]

equals(java.lang.Object)
	---> behavioral.template_method.Game::equals(java.lang.Object) [144 time(s)]

start()
	---> behavioral.template_method.Game::start() [144 time(s)]

registerNatives()
	---> behavioral.template_method.Game::registerNatives() [144 time(s)]

notify()
	---> behavioral.template_method.Game::notify() [144 time(s)]

hashCode()
	---> behavioral.template_method.Game::hashCode() [144 time(s)]

initialize()
	---> behavioral.template_method.Game::initialize() [144 time(s)]

finalize()
	---> behavioral.template_method.Game::finalize() [144 time(s)]

toString()
	---> behavioral.template_method.Game::toString() [144 time(s)]

clone()
	---> behavioral.template_method.Game::clone() [144 time(s)]

end()
	---> behavioral.template_method.Game::end() [144 time(s)]

behavioral.template_method.Football::getClass()
	---> behavioral.template_method.Game::getClass() [144 time(s)]

play()
	---> behavioral.template_method.Game::play() [147 time(s)]

wait(long)
	---> behavioral.template_method.Game::wait(long) [147 time(s)]

wait(long,int)
	---> behavioral.template_method.Game::wait(long,int) [147 time(s)]

wait()
	---> behavioral.template_method.Game::wait() [147 time(s)]

notifyAll()
	---> behavioral.template_method.Game::notifyAll() [147 time(s)]

equals(java.lang.Object)
	---> behavioral.template_method.Game::equals(java.lang.Object) [147 time(s)]

start()
	---> behavioral.template_method.Game::start() [147 time(s)]

registerNatives()
	---> behavioral.template_method.Game::registerNatives() [147 time(s)]

notify()
	---> behavioral.template_method.Game::notify() [147 time(s)]

hashCode()
	---> behavioral.template_method.Game::hashCode() [147 time(s)]

initialize()
	---> behavioral.template_method.Game::initialize() [147 time(s)]

finalize()
	---> behavioral.template_method.Game::finalize() [147 time(s)]

toString()
	---> behavioral.template_method.Game::toString() [147 time(s)]

clone()
	---> behavioral.template_method.Game::clone() [147 time(s)]

end()
	---> behavioral.template_method.Game::end() [147 time(s)]

behavioral.template_method.Game::getClass()
	---> behavioral.template_method.Game::getClass() [147 time(s)]

play()
	---> behavioral.template_method.Game::play() [150 time(s)]

wait(long)
	---> behavioral.template_method.Game::wait(long) [150 time(s)]

wait(long,int)
	---> behavioral.template_method.Game::wait(long,int) [150 time(s)]

wait()
	---> behavioral.template_method.Game::wait() [150 time(s)]

notifyAll()
	---> behavioral.template_method.Game::notifyAll() [150 time(s)]

equals(java.lang.Object)
	---> behavioral.template_method.Game::equals(java.lang.Object) [150 time(s)]

start()
	---> behavioral.template_method.Game::start() [150 time(s)]

registerNatives()
	---> behavioral.template_method.Game::registerNatives() [150 time(s)]

notify()
	---> behavioral.template_method.Game::notify() [150 time(s)]

hashCode()
	---> behavioral.template_method.Game::hashCode() [150 time(s)]

initialize()
	---> behavioral.template_method.Game::initialize() [150 time(s)]

finalize()
	---> behavioral.template_method.Game::finalize() [150 time(s)]

toString()
	---> behavioral.template_method.Game::toString() [150 time(s)]

clone()
	---> behavioral.template_method.Game::clone() [150 time(s)]

end()
	---> behavioral.template_method.Game::end() [150 time(s)]

behavioral.template_method.Test::getClass()
	---> behavioral.template_method.Game::getClass() [150 time(s)]

wait(long)
	---> behavioral.template_method.Game::wait(long) [150 time(s)]

wait(long,int)
	---> behavioral.template_method.Game::wait(long,int) [150 time(s)]

wait()
	---> behavioral.template_method.Game::wait() [150 time(s)]

notifyAll()
	---> behavioral.template_method.Game::notifyAll() [150 time(s)]

equals(java.lang.Object)
	---> behavioral.template_method.Game::equals(java.lang.Object) [150 time(s)]

main(java.lang.String[])
	---> behavioral.template_method.Game::main(java.lang.String[]) [152 time(s)]

registerNatives()
	---> behavioral.template_method.Game::registerNatives() [152 time(s)]

notify()
	---> behavioral.template_method.Game::notify() [152 time(s)]

hashCode()
	---> behavioral.template_method.Game::hashCode() [152 time(s)]

finalize()
	---> behavioral.template_method.Game::finalize() [152 time(s)]

toString()
	---> behavioral.template_method.Game::toString() [152 time(s)]

clone()
	---> behavioral.template_method.Game::clone() [152 time(s)]

behavioral.visitor.Liquor::getName()
	---> behavioral.template_method.Game::getName() [152 time(s)]

getClass()
	---> behavioral.template_method.Game::getClass() [152 time(s)]

wait(long)
	---> behavioral.template_method.Game::wait(long) [152 time(s)]

wait(long,int)
	---> behavioral.template_method.Game::wait(long,int) [152 time(s)]

wait()
	---> behavioral.template_method.Game::wait() [152 time(s)]

setName(java.lang.String)
	---> behavioral.template_method.Game::setName(java.lang.String) [152 time(s)]

setPrice(double)
	---> behavioral.template_method.Game::setPrice(double) [152 time(s)]

notifyAll()
	---> behavioral.template_method.Game::notifyAll() [152 time(s)]

equals(java.lang.Object)
	---> behavioral.template_method.Game::equals(java.lang.Object) [152 time(s)]

getPrice()
	---> behavioral.template_method.Game::getPrice() [152 time(s)]

registerNatives()
	---> behavioral.template_method.Game::registerNatives() [152 time(s)]

notify()
	---> behavioral.template_method.Game::notify() [152 time(s)]

accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [152 time(s)]

hashCode()
	---> behavioral.visitor.Visitor::hashCode() [152 time(s)]

finalize()
	---> behavioral.visitor.Visitor::finalize() [152 time(s)]

toString()
	---> behavioral.visitor.Visitor::toString() [152 time(s)]

clone()
	---> behavioral.visitor.Visitor::clone() [152 time(s)]

behavioral.visitor.Necessity::getName()
	---> behavioral.visitor.Visitor::getName() [152 time(s)]

getClass()
	---> behavioral.visitor.Visitor::getClass() [152 time(s)]

wait(long)
	---> behavioral.visitor.Visitor::wait(long) [152 time(s)]

wait(long,int)
	---> behavioral.visitor.Visitor::wait(long,int) [152 time(s)]

wait()
	---> behavioral.visitor.Visitor::wait() [152 time(s)]

setName(java.lang.String)
	---> behavioral.visitor.Visitor::setName(java.lang.String) [152 time(s)]

setPrice(double)
	---> behavioral.visitor.Visitor::setPrice(double) [152 time(s)]

notifyAll()
	---> behavioral.visitor.Visitor::notifyAll() [152 time(s)]

equals(java.lang.Object)
	---> behavioral.visitor.Visitor::equals(java.lang.Object) [152 time(s)]

getPrice()
	---> behavioral.visitor.Visitor::getPrice() [152 time(s)]

registerNatives()
	---> behavioral.visitor.Visitor::registerNatives() [152 time(s)]

notify()
	---> behavioral.visitor.Visitor::notify() [152 time(s)]

accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [153 time(s)]

hashCode()
	---> behavioral.visitor.Visitor::hashCode() [153 time(s)]

finalize()
	---> behavioral.visitor.Visitor::finalize() [153 time(s)]

toString()
	---> behavioral.visitor.Visitor::toString() [153 time(s)]

clone()
	---> behavioral.visitor.Visitor::clone() [153 time(s)]

behavioral.visitor.Product::getName()
	---> behavioral.visitor.Visitor::getName() [153 time(s)]

getClass()
	---> behavioral.visitor.Visitor::getClass() [153 time(s)]

wait(long)
	---> behavioral.visitor.Visitor::wait(long) [153 time(s)]

wait(long,int)
	---> behavioral.visitor.Visitor::wait(long,int) [153 time(s)]

wait()
	---> behavioral.visitor.Visitor::wait() [153 time(s)]

setName(java.lang.String)
	---> behavioral.visitor.Visitor::setName(java.lang.String) [153 time(s)]

setPrice(double)
	---> behavioral.visitor.Visitor::setPrice(double) [153 time(s)]

notifyAll()
	---> behavioral.visitor.Visitor::notifyAll() [153 time(s)]

equals(java.lang.Object)
	---> behavioral.visitor.Visitor::equals(java.lang.Object) [153 time(s)]

getPrice()
	---> behavioral.visitor.Visitor::getPrice() [153 time(s)]

registerNatives()
	---> behavioral.visitor.Visitor::registerNatives() [153 time(s)]

notify()
	---> behavioral.visitor.Visitor::notify() [153 time(s)]

accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [153 time(s)]

hashCode()
	---> behavioral.visitor.Visitor::hashCode() [153 time(s)]

finalize()
	---> behavioral.visitor.Visitor::finalize() [153 time(s)]

toString()
	---> behavioral.visitor.Visitor::toString() [153 time(s)]

clone()
	---> behavioral.visitor.Visitor::clone() [153 time(s)]

behavioral.visitor.TaxHolidayVisitor::getClass()
	---> behavioral.visitor.Visitor::getClass() [153 time(s)]

wait(long)
	---> behavioral.visitor.Visitor::wait(long) [153 time(s)]

wait(long,int)
	---> behavioral.visitor.Visitor::wait(long,int) [153 time(s)]

wait()
	---> behavioral.visitor.Visitor::wait() [153 time(s)]

getComputedTax()
	---> behavioral.visitor.Visitor::getComputedTax() [153 time(s)]

notifyAll()
	---> behavioral.visitor.Visitor::notifyAll() [153 time(s)]

equals(java.lang.Object)
	---> behavioral.visitor.Visitor::equals(java.lang.Object) [153 time(s)]

registerNatives()
	---> behavioral.visitor.Visitor::registerNatives() [153 time(s)]

notify()
	---> behavioral.visitor.Visitor::notify() [153 time(s)]

computeTax(behavioral.visitor.Product)
	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [154 time(s)]

getTaxRate()
	---> behavioral.visitor.Product::getTaxRate() [154 time(s)]

hashCode()
	---> behavioral.visitor.Product::hashCode() [154 time(s)]

finalize()
	---> behavioral.visitor.Product::finalize() [154 time(s)]

toString()
	---> behavioral.visitor.Product::toString() [154 time(s)]

clone()
	---> behavioral.visitor.Product::clone() [154 time(s)]

visit(behavioral.visitor.Liquor)
	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [154 time(s)]

visit(behavioral.visitor.Tobacco)
	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [154 time(s)]

visit(behavioral.visitor.Necessity)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [154 time(s)]

behavioral.visitor.TaxVisitor::getClass()
	---> behavioral.visitor.TaxVisitor::getClass() [154 time(s)]

wait(long)
	---> behavioral.visitor.TaxVisitor::wait(long) [154 time(s)]

wait(long,int)
	---> behavioral.visitor.TaxVisitor::wait(long,int) [154 time(s)]

wait()
	---> behavioral.visitor.TaxVisitor::wait() [154 time(s)]

getComputedTax()
	---> behavioral.visitor.TaxVisitor::getComputedTax() [154 time(s)]

notifyAll()
	---> behavioral.visitor.TaxVisitor::notifyAll() [154 time(s)]

equals(java.lang.Object)
	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [154 time(s)]

registerNatives()
	---> behavioral.visitor.TaxVisitor::registerNatives() [154 time(s)]

notify()
	---> behavioral.visitor.TaxVisitor::notify() [154 time(s)]

computeTax(behavioral.visitor.Product)
	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [156 time(s)]

getTaxRate()
	---> behavioral.visitor.Product::getTaxRate() [156 time(s)]

hashCode()
	---> behavioral.visitor.Product::hashCode() [156 time(s)]

finalize()
	---> behavioral.visitor.Product::finalize() [156 time(s)]

toString()
	---> behavioral.visitor.Product::toString() [156 time(s)]

clone()
	---> behavioral.visitor.Product::clone() [156 time(s)]

visit(behavioral.visitor.Liquor)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [157 time(s)]

visit(behavioral.visitor.Tobacco)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [158 time(s)]

visit(behavioral.visitor.Necessity)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [159 time(s)]

behavioral.visitor.Test::getClass()
	---> behavioral.visitor.TaxVisitor::getClass() [159 time(s)]

wait(long)
	---> behavioral.visitor.TaxVisitor::wait(long) [159 time(s)]

wait(long,int)
	---> behavioral.visitor.TaxVisitor::wait(long,int) [159 time(s)]

wait()
	---> behavioral.visitor.TaxVisitor::wait() [159 time(s)]

notifyAll()
	---> behavioral.visitor.TaxVisitor::notifyAll() [159 time(s)]

equals(java.lang.Object)
	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [159 time(s)]

main(java.lang.String[])
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [159 time(s)]

registerNatives()
	---> behavioral.visitor.TaxVisitor::registerNatives() [159 time(s)]

notify()
	---> behavioral.visitor.TaxVisitor::notify() [159 time(s)]

hashCode()
	---> behavioral.visitor.TaxVisitor::hashCode() [159 time(s)]

computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor)
	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [160 time(s)]

finalize()
	---> behavioral.visitor.TaxVisitor::finalize() [160 time(s)]

toString()
	---> behavioral.visitor.TaxVisitor::toString() [160 time(s)]

clone()
	---> behavioral.visitor.TaxVisitor::clone() [160 time(s)]

behavioral.visitor.Tobacco::getName()
	---> behavioral.visitor.TaxVisitor::getName() [160 time(s)]

getClass()
	---> behavioral.visitor.TaxVisitor::getClass() [160 time(s)]

wait(long)
	---> behavioral.visitor.TaxVisitor::wait(long) [160 time(s)]

wait(long,int)
	---> behavioral.visitor.TaxVisitor::wait(long,int) [160 time(s)]

wait()
	---> behavioral.visitor.TaxVisitor::wait() [160 time(s)]

setName(java.lang.String)
	---> behavioral.visitor.TaxVisitor::setName(java.lang.String) [160 time(s)]

setPrice(double)
	---> behavioral.visitor.TaxVisitor::setPrice(double) [160 time(s)]

notifyAll()
	---> behavioral.visitor.TaxVisitor::notifyAll() [160 time(s)]

equals(java.lang.Object)
	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [160 time(s)]

getPrice()
	---> behavioral.visitor.TaxVisitor::getPrice() [160 time(s)]

registerNatives()
	---> behavioral.visitor.TaxVisitor::registerNatives() [160 time(s)]

notify()
	---> behavioral.visitor.TaxVisitor::notify() [160 time(s)]

accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [161 time(s)]

hashCode()
	---> behavioral.visitor.Visitor::hashCode() [161 time(s)]

finalize()
	---> behavioral.visitor.Visitor::finalize() [161 time(s)]

toString()
	---> behavioral.visitor.Visitor::toString() [161 time(s)]

clone()
	---> behavioral.visitor.Visitor::clone() [161 time(s)]

accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [161 time(s)]

visit(behavioral.visitor.Liquor)
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Liquor) [161 time(s)]

visit(behavioral.visitor.Tobacco)
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Tobacco) [161 time(s)]

visit(behavioral.visitor.Necessity)
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Necessity) [161 time(s)]

creational.abstract_factory.AbstractShapeFactory::getClass()
	---> behavioral.visitor.Visitor::getClass() [161 time(s)]

wait(long)
	---> behavioral.visitor.Visitor::wait(long) [161 time(s)]

wait(long,int)
	---> behavioral.visitor.Visitor::wait(long,int) [161 time(s)]

wait()
	---> behavioral.visitor.Visitor::wait() [161 time(s)]

createShape(creational.abstract_factory.ShapeType)
	---> behavioral.visitor.Visitor::createShape(creational.abstract_factory.ShapeType) [161 time(s)]

getRegistryKey(java.lang.Class)
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [161 time(s)]

notifyAll()
	---> behavioral.visitor.Visitor::notifyAll() [161 time(s)]

equals(java.lang.Object)
	---> behavioral.visitor.Visitor::equals(java.lang.Object) [161 time(s)]

registerNatives()
	---> behavioral.visitor.Visitor::registerNatives() [161 time(s)]

notify()
	---> behavioral.visitor.Visitor::notify() [161 time(s)]

hashCode()
	---> behavioral.visitor.Visitor::hashCode() [161 time(s)]

finalize()
	---> behavioral.visitor.Visitor::finalize() [161 time(s)]

toString()
	---> behavioral.visitor.Visitor::toString() [161 time(s)]

clone()
	---> behavioral.visitor.Visitor::clone() [161 time(s)]

getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [162 time(s)]

creational.abstract_factory.Rectangle::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [162 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [162 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [162 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [162 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [162 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [162 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [162 time(s)]

draw()
	---> creational.singleton.SingletonRegistry::draw() [162 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [162 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [162 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [162 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [162 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [162 time(s)]

creational.abstract_factory.RoundedRectangle::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [162 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [162 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [162 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [162 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [162 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [162 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [162 time(s)]

draw()
	---> creational.singleton.SingletonRegistry::draw() [162 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [162 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [162 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [162 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [162 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [162 time(s)]

creational.abstract_factory.RoundedShapeFactory::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [162 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [162 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [162 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [162 time(s)]

createShape(creational.abstract_factory.ShapeType)
	---> creational.singleton.SingletonRegistry::createShape(creational.abstract_factory.ShapeType) [162 time(s)]

getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [162 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [162 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [162 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [162 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [162 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [162 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [162 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [162 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [162 time(s)]

getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [163 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [163 time(s)]

compareTo(java.lang.Enum)
	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [163 time(s)]

describeConstable()
	---> creational.singleton.SingletonRegistry::describeConstable() [163 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [163 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [163 time(s)]

getDeclaringClass()
	---> creational.singleton.SingletonRegistry::getDeclaringClass() [163 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [163 time(s)]

name()
	---> creational.singleton.SingletonRegistry::name() [163 time(s)]

ordinal()
	---> creational.singleton.SingletonRegistry::ordinal() [163 time(s)]

readObject(java.io.ObjectInputStream)
	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [163 time(s)]

readObjectNoData()
	---> creational.singleton.SingletonRegistry::readObjectNoData() [163 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [163 time(s)]

valueOf(java.lang.Class,java.lang.String)
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [163 time(s)]

valueOf(java.lang.String)
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [163 time(s)]

values()
	---> creational.singleton.SingletonRegistry::values() [163 time(s)]

creational.abstract_factory.RoundedTriangle::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [163 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [163 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [163 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [163 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [163 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [163 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [163 time(s)]

draw()
	---> creational.singleton.SingletonRegistry::draw() [163 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [163 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [163 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [163 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [163 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [163 time(s)]

draw()
	---> creational.singleton.SingletonRegistry::draw() [163 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [163 time(s)]

compareTo(java.lang.Enum)
	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [163 time(s)]

describeConstable()
	---> creational.singleton.SingletonRegistry::describeConstable() [163 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [163 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [163 time(s)]

getDeclaringClass()
	---> creational.singleton.SingletonRegistry::getDeclaringClass() [163 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [163 time(s)]

name()
	---> creational.singleton.SingletonRegistry::name() [163 time(s)]

ordinal()
	---> creational.singleton.SingletonRegistry::ordinal() [163 time(s)]

readObject(java.io.ObjectInputStream)
	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [163 time(s)]

readObjectNoData()
	---> creational.singleton.SingletonRegistry::readObjectNoData() [163 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [163 time(s)]

valueOf(java.lang.Class,java.lang.String)
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [163 time(s)]

valueOf(java.lang.String)
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [163 time(s)]

values()
	---> creational.singleton.SingletonRegistry::values() [163 time(s)]

creational.abstract_factory.ShapeProducer::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [163 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [163 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [163 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [163 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [163 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [163 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [163 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [163 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [163 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [163 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [163 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [163 time(s)]

createFactory(creational.abstract_factory.ShapeFactoryType)
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [163 time(s)]

creational.abstract_factory.StandardShapeFactory::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [163 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [163 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [163 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [163 time(s)]

createShape(creational.abstract_factory.ShapeType)
	---> creational.singleton.SingletonRegistry::createShape(creational.abstract_factory.ShapeType) [163 time(s)]

getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [163 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [163 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [163 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [163 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [163 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [163 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [163 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [163 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [163 time(s)]

getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [164 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [164 time(s)]

compareTo(java.lang.Enum)
	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [164 time(s)]

describeConstable()
	---> creational.singleton.SingletonRegistry::describeConstable() [164 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [164 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [164 time(s)]

getDeclaringClass()
	---> creational.singleton.SingletonRegistry::getDeclaringClass() [164 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [164 time(s)]

name()
	---> creational.singleton.SingletonRegistry::name() [164 time(s)]

ordinal()
	---> creational.singleton.SingletonRegistry::ordinal() [164 time(s)]

readObject(java.io.ObjectInputStream)
	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [164 time(s)]

readObjectNoData()
	---> creational.singleton.SingletonRegistry::readObjectNoData() [164 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [164 time(s)]

valueOf(java.lang.Class,java.lang.String)
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [164 time(s)]

valueOf(java.lang.String)
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [164 time(s)]

values()
	---> creational.singleton.SingletonRegistry::values() [164 time(s)]

creational.abstract_factory.Test::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [164 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [164 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [164 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [164 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [164 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [164 time(s)]

main(java.lang.String[])
	---> creational.abstract_factory.Shape::main(java.lang.String[]) [172 time(s)]

registerNatives()
	---> creational.abstract_factory.Shape::registerNatives() [172 time(s)]

notify()
	---> creational.abstract_factory.Shape::notify() [172 time(s)]

hashCode()
	---> creational.abstract_factory.Shape::hashCode() [172 time(s)]

finalize()
	---> creational.abstract_factory.Shape::finalize() [172 time(s)]

toString()
	---> creational.abstract_factory.Shape::toString() [172 time(s)]

clone()
	---> creational.abstract_factory.Shape::clone() [172 time(s)]

creational.abstract_factory.Triangle::getClass()
	---> creational.abstract_factory.Shape::getClass() [172 time(s)]

wait(long)
	---> creational.abstract_factory.Shape::wait(long) [172 time(s)]

wait(long,int)
	---> creational.abstract_factory.Shape::wait(long,int) [172 time(s)]

wait()
	---> creational.abstract_factory.Shape::wait() [172 time(s)]

notifyAll()
	---> creational.abstract_factory.Shape::notifyAll() [172 time(s)]

equals(java.lang.Object)
	---> creational.abstract_factory.Shape::equals(java.lang.Object) [172 time(s)]

registerNatives()
	---> creational.abstract_factory.Shape::registerNatives() [172 time(s)]

draw()
	---> creational.abstract_factory.Shape::draw() [172 time(s)]

notify()
	---> creational.abstract_factory.Shape::notify() [172 time(s)]

hashCode()
	---> creational.abstract_factory.Shape::hashCode() [172 time(s)]

finalize()
	---> creational.abstract_factory.Shape::finalize() [172 time(s)]

toString()
	---> creational.abstract_factory.Shape::toString() [172 time(s)]

clone()
	---> creational.abstract_factory.Shape::clone() [172 time(s)]

setTorso(java.lang.String)
	---> creational.abstract_factory.Shape::setTorso(java.lang.String) [172 time(s)]

setArms(java.lang.String)
	---> creational.abstract_factory.Shape::setArms(java.lang.String) [172 time(s)]

setLegs(java.lang.String)
	---> creational.abstract_factory.Shape::setLegs(java.lang.String) [172 time(s)]

setHead(java.lang.String)
	---> creational.abstract_factory.Shape::setHead(java.lang.String) [172 time(s)]

buildArms()
	---> creational.abstract_factory.Shape::buildArms() [172 time(s)]

buildHead()
	---> creational.abstract_factory.Shape::buildHead() [172 time(s)]

getRobot()
	---> creational.abstract_factory.Shape::getRobot() [172 time(s)]

buildTorso()
	---> creational.abstract_factory.Shape::buildTorso() [172 time(s)]

buildLegs()
	---> creational.abstract_factory.Shape::buildLegs() [172 time(s)]

creational.builder.OldRobotBuilder::getClass()
	---> creational.abstract_factory.Shape::getClass() [172 time(s)]

wait(long)
	---> creational.abstract_factory.Shape::wait(long) [172 time(s)]

wait(long,int)
	---> creational.abstract_factory.Shape::wait(long,int) [172 time(s)]

wait()
	---> creational.abstract_factory.Shape::wait() [172 time(s)]

notifyAll()
	---> creational.abstract_factory.Shape::notifyAll() [172 time(s)]

equals(java.lang.Object)
	---> creational.abstract_factory.Shape::equals(java.lang.Object) [172 time(s)]

registerNatives()
	---> creational.abstract_factory.Shape::registerNatives() [172 time(s)]

getRobot()
	---> creational.abstract_factory.Shape::getRobot() [172 time(s)]

notify()
	---> creational.abstract_factory.Shape::notify() [172 time(s)]

buildLegs()
	---> creational.builder.Robot::buildLegs() [172 time(s)]

buildArms()
	---> creational.builder.Robot::buildArms() [172 time(s)]

hashCode()
	---> creational.builder.Robot::hashCode() [172 time(s)]

buildHead()
	---> creational.builder.Robot::buildHead() [172 time(s)]

finalize()
	---> creational.builder.Robot::finalize() [172 time(s)]

toString()
	---> creational.builder.Robot::toString() [172 time(s)]

clone()
	---> creational.builder.Robot::clone() [172 time(s)]

buildTorso()
	---> creational.builder.Robot::buildTorso() [172 time(s)]

creational.builder.Robot::getClass()
	---> creational.builder.Robot::getClass() [172 time(s)]

wait(long)
	---> creational.builder.Robot::wait(long) [172 time(s)]

wait(long,int)
	---> creational.builder.Robot::wait(long,int) [172 time(s)]

wait()
	---> creational.builder.Robot::wait() [172 time(s)]

setLegs(java.lang.String)
	---> creational.builder.Robot::setLegs(java.lang.String) [172 time(s)]

notifyAll()
	---> creational.builder.Robot::notifyAll() [172 time(s)]

equals(java.lang.Object)
	---> creational.builder.Robot::equals(java.lang.Object) [172 time(s)]

setHead(java.lang.String)
	---> creational.builder.Robot::setHead(java.lang.String) [172 time(s)]

registerNatives()
	---> creational.builder.Robot::registerNatives() [172 time(s)]

getTorso()
	---> creational.builder.Robot::getTorso() [172 time(s)]

notify()
	---> creational.builder.Robot::notify() [172 time(s)]

setTorso(java.lang.String)
	---> creational.builder.Robot::setTorso(java.lang.String) [172 time(s)]

hashCode()
	---> creational.builder.Robot::hashCode() [172 time(s)]

setArms(java.lang.String)
	---> creational.builder.Robot::setArms(java.lang.String) [172 time(s)]

getArms()
	---> creational.builder.Robot::getArms() [172 time(s)]

getHead()
	---> creational.builder.Robot::getHead() [172 time(s)]

toString()
	---> creational.builder.Robot::toString() [172 time(s)]

finalize()
	---> creational.builder.Robot::finalize() [172 time(s)]

clone()
	---> creational.builder.Robot::clone() [172 time(s)]

getLegs()
	---> creational.builder.Robot::getLegs() [172 time(s)]

creational.builder.RobotBuilder::getClass()
	---> creational.builder.Robot::getClass() [172 time(s)]

wait(long)
	---> creational.builder.Robot::wait(long) [172 time(s)]

wait(long,int)
	---> creational.builder.Robot::wait(long,int) [172 time(s)]

wait()
	---> creational.builder.Robot::wait() [172 time(s)]

notifyAll()
	---> creational.builder.Robot::notifyAll() [172 time(s)]

equals(java.lang.Object)
	---> creational.builder.Robot::equals(java.lang.Object) [172 time(s)]

registerNatives()
	---> creational.builder.Robot::registerNatives() [172 time(s)]

getRobot()
	---> creational.builder.Robot::getRobot() [172 time(s)]

notify()
	---> creational.builder.Robot::notify() [172 time(s)]

buildLegs()
	---> creational.builder.Robot::buildLegs() [172 time(s)]

buildArms()
	---> creational.builder.Robot::buildArms() [172 time(s)]

hashCode()
	---> creational.builder.Robot::hashCode() [172 time(s)]

buildHead()
	---> creational.builder.Robot::buildHead() [172 time(s)]

finalize()
	---> creational.builder.Robot::finalize() [172 time(s)]

toString()
	---> creational.builder.Robot::toString() [172 time(s)]

clone()
	---> creational.builder.Robot::clone() [172 time(s)]

buildTorso()
	---> creational.builder.Robot::buildTorso() [172 time(s)]

creational.builder.RobotEngineer::getClass()
	---> creational.builder.Robot::getClass() [172 time(s)]

wait(long)
	---> creational.builder.Robot::wait(long) [172 time(s)]

wait(long,int)
	---> creational.builder.Robot::wait(long,int) [172 time(s)]

wait()
	---> creational.builder.Robot::wait() [172 time(s)]

notifyAll()
	---> creational.builder.Robot::notifyAll() [172 time(s)]

equals(java.lang.Object)
	---> creational.builder.Robot::equals(java.lang.Object) [172 time(s)]

registerNatives()
	---> creational.builder.Robot::registerNatives() [172 time(s)]

getRobot()
	---> creational.builder.IRobotBuilder::getRobot() [172 time(s)]

notify()
	---> creational.builder.IRobotBuilder::notify() [172 time(s)]

hashCode()
	---> creational.builder.IRobotBuilder::hashCode() [172 time(s)]

constructRobot()
	---> creational.builder.IRobotBuilder::constructRobot() [175 time(s)]

setRobotBuilder(creational.builder.IRobotBuilder)
	---> creational.builder.IRobotBuilder::setRobotBuilder(creational.builder.IRobotBuilder) [175 time(s)]

finalize()
	---> creational.builder.IRobotBuilder::finalize() [175 time(s)]

toString()
	---> creational.builder.IRobotBuilder::toString() [175 time(s)]

clone()
	---> creational.builder.IRobotBuilder::clone() [175 time(s)]

creational.builder.SophisticatedRobotBuilder::getClass()
	---> creational.builder.IRobotBuilder::getClass() [175 time(s)]

wait(long)
	---> creational.builder.IRobotBuilder::wait(long) [175 time(s)]

wait(long,int)
	---> creational.builder.IRobotBuilder::wait(long,int) [175 time(s)]

wait()
	---> creational.builder.IRobotBuilder::wait() [175 time(s)]

notifyAll()
	---> creational.builder.IRobotBuilder::notifyAll() [175 time(s)]

equals(java.lang.Object)
	---> creational.builder.IRobotBuilder::equals(java.lang.Object) [175 time(s)]

registerNatives()
	---> creational.builder.IRobotBuilder::registerNatives() [175 time(s)]

getRobot()
	---> creational.builder.IRobotBuilder::getRobot() [175 time(s)]

notify()
	---> creational.builder.IRobotBuilder::notify() [175 time(s)]

buildLegs()
	---> creational.builder.Robot::buildLegs() [176 time(s)]

buildArms()
	---> creational.builder.Robot::buildArms() [177 time(s)]

hashCode()
	---> creational.builder.Robot::hashCode() [177 time(s)]

buildHead()
	---> creational.builder.Robot::buildHead() [178 time(s)]

finalize()
	---> creational.builder.Robot::finalize() [178 time(s)]

toString()
	---> creational.builder.Robot::toString() [178 time(s)]

clone()
	---> creational.builder.Robot::clone() [178 time(s)]

buildTorso()
	---> creational.builder.Robot::buildTorso() [179 time(s)]

creational.builder.Test::getClass()
	---> creational.builder.Robot::getClass() [179 time(s)]

wait(long)
	---> creational.builder.Robot::wait(long) [179 time(s)]

wait(long,int)
	---> creational.builder.Robot::wait(long,int) [179 time(s)]

wait()
	---> creational.builder.Robot::wait() [179 time(s)]

notifyAll()
	---> creational.builder.Robot::notifyAll() [179 time(s)]

equals(java.lang.Object)
	---> creational.builder.Robot::equals(java.lang.Object) [179 time(s)]

main(java.lang.String[])
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [184 time(s)]

registerNatives()
	---> creational.builder.RobotEngineer::registerNatives() [184 time(s)]

notify()
	---> creational.builder.RobotEngineer::notify() [184 time(s)]

hashCode()
	---> creational.builder.RobotEngineer::hashCode() [184 time(s)]

finalize()
	---> creational.builder.RobotEngineer::finalize() [184 time(s)]

toString()
	---> creational.builder.RobotEngineer::toString() [184 time(s)]

clone()
	---> creational.builder.RobotEngineer::clone() [184 time(s)]

creational.factory.BigUFOEnemyShip::getName()
	---> creational.builder.RobotEngineer::getName() [184 time(s)]

getClass()
	---> creational.builder.RobotEngineer::getClass() [184 time(s)]

wait(long)
	---> creational.builder.RobotEngineer::wait(long) [184 time(s)]

wait(long,int)
	---> creational.builder.RobotEngineer::wait(long,int) [184 time(s)]

wait()
	---> creational.builder.RobotEngineer::wait() [184 time(s)]

setName(java.lang.String)
	---> creational.builder.RobotEngineer::setName(java.lang.String) [184 time(s)]

getAmtDamage()
	---> creational.builder.RobotEngineer::getAmtDamage() [184 time(s)]

setAmtDamage(double)
	---> creational.builder.RobotEngineer::setAmtDamage(double) [184 time(s)]

notifyAll()
	---> creational.builder.RobotEngineer::notifyAll() [184 time(s)]

equals(java.lang.Object)
	---> creational.builder.RobotEngineer::equals(java.lang.Object) [184 time(s)]

registerNatives()
	---> creational.builder.RobotEngineer::registerNatives() [184 time(s)]

notify()
	---> creational.builder.RobotEngineer::notify() [184 time(s)]

followHeroShip()
	---> creational.builder.RobotEngineer::followHeroShip() [184 time(s)]

hashCode()
	---> creational.builder.RobotEngineer::hashCode() [184 time(s)]

enemyShipShoots()
	---> creational.builder.RobotEngineer::enemyShipShoots() [184 time(s)]

displayEnemyShip()
	---> creational.builder.RobotEngineer::displayEnemyShip() [184 time(s)]

finalize()
	---> creational.builder.RobotEngineer::finalize() [184 time(s)]

toString()
	---> creational.builder.RobotEngineer::toString() [184 time(s)]

clone()
	---> creational.builder.RobotEngineer::clone() [184 time(s)]

creational.factory.EnemyShip::getName()
	---> creational.builder.RobotEngineer::getName() [184 time(s)]

getClass()
	---> creational.builder.RobotEngineer::getClass() [184 time(s)]

wait(long)
	---> creational.builder.RobotEngineer::wait(long) [184 time(s)]

wait(long,int)
	---> creational.builder.RobotEngineer::wait(long,int) [184 time(s)]

wait()
	---> creational.builder.RobotEngineer::wait() [184 time(s)]

setName(java.lang.String)
	---> creational.builder.RobotEngineer::setName(java.lang.String) [184 time(s)]

getAmtDamage()
	---> creational.builder.RobotEngineer::getAmtDamage() [184 time(s)]

setAmtDamage(double)
	---> creational.builder.RobotEngineer::setAmtDamage(double) [184 time(s)]

notifyAll()
	---> creational.builder.RobotEngineer::notifyAll() [184 time(s)]

equals(java.lang.Object)
	---> creational.builder.RobotEngineer::equals(java.lang.Object) [184 time(s)]

registerNatives()
	---> creational.builder.RobotEngineer::registerNatives() [184 time(s)]

notify()
	---> creational.builder.RobotEngineer::notify() [184 time(s)]

followHeroShip()
	---> creational.builder.RobotEngineer::followHeroShip() [184 time(s)]

hashCode()
	---> creational.builder.RobotEngineer::hashCode() [184 time(s)]

enemyShipShoots()
	---> creational.builder.RobotEngineer::enemyShipShoots() [184 time(s)]

displayEnemyShip()
	---> creational.builder.RobotEngineer::displayEnemyShip() [184 time(s)]

finalize()
	---> creational.builder.RobotEngineer::finalize() [184 time(s)]

toString()
	---> creational.builder.RobotEngineer::toString() [184 time(s)]

clone()
	---> creational.builder.RobotEngineer::clone() [184 time(s)]

creational.factory.EnemyShipFactory::getClass()
	---> creational.builder.RobotEngineer::getClass() [184 time(s)]

wait(long)
	---> creational.builder.RobotEngineer::wait(long) [184 time(s)]

wait(long,int)
	---> creational.builder.RobotEngineer::wait(long,int) [184 time(s)]

wait()
	---> creational.builder.RobotEngineer::wait() [184 time(s)]

notifyAll()
	---> creational.builder.RobotEngineer::notifyAll() [184 time(s)]

equals(java.lang.Object)
	---> creational.builder.RobotEngineer::equals(java.lang.Object) [184 time(s)]

registerNatives()
	---> creational.builder.RobotEngineer::registerNatives() [184 time(s)]

notify()
	---> creational.builder.RobotEngineer::notify() [184 time(s)]

hashCode()
	---> creational.builder.RobotEngineer::hashCode() [184 time(s)]

createEnemyShip(java.lang.String)
	---> creational.builder.RobotEngineer::createEnemyShip(java.lang.String) [184 time(s)]

finalize()
	---> creational.builder.RobotEngineer::finalize() [184 time(s)]

toString()
	---> creational.builder.RobotEngineer::toString() [184 time(s)]

clone()
	---> creational.builder.RobotEngineer::clone() [184 time(s)]

creational.factory.EnemyShipTesting::getClass()
	---> creational.builder.RobotEngineer::getClass() [184 time(s)]

wait(long)
	---> creational.builder.RobotEngineer::wait(long) [184 time(s)]

wait(long,int)
	---> creational.builder.RobotEngineer::wait(long,int) [184 time(s)]

wait()
	---> creational.builder.RobotEngineer::wait() [184 time(s)]

notifyAll()
	---> creational.builder.RobotEngineer::notifyAll() [184 time(s)]

equals(java.lang.Object)
	---> creational.builder.RobotEngineer::equals(java.lang.Object) [184 time(s)]

main(java.lang.String[])
	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [185 time(s)]

registerNatives()
	---> creational.factory.EnemyShipFactory::registerNatives() [185 time(s)]

notify()
	---> creational.factory.EnemyShipFactory::notify() [185 time(s)]

hashCode()
	---> creational.factory.EnemyShipFactory::hashCode() [185 time(s)]

doStuffEnemy(creational.factory.EnemyShip)
	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [187 time(s)]

finalize()
	---> creational.factory.EnemyShip::finalize() [187 time(s)]

toString()
	---> creational.factory.EnemyShip::toString() [187 time(s)]

clone()
	---> creational.factory.EnemyShip::clone() [187 time(s)]

creational.factory.RocketEnemyShip::getName()
	---> creational.factory.EnemyShip::getName() [187 time(s)]

getClass()
	---> creational.factory.EnemyShip::getClass() [187 time(s)]

wait(long)
	---> creational.factory.EnemyShip::wait(long) [187 time(s)]

wait(long,int)
	---> creational.factory.EnemyShip::wait(long,int) [187 time(s)]

wait()
	---> creational.factory.EnemyShip::wait() [187 time(s)]

setName(java.lang.String)
	---> creational.factory.EnemyShip::setName(java.lang.String) [187 time(s)]

getAmtDamage()
	---> creational.factory.EnemyShip::getAmtDamage() [187 time(s)]

setAmtDamage(double)
	---> creational.factory.EnemyShip::setAmtDamage(double) [187 time(s)]

notifyAll()
	---> creational.factory.EnemyShip::notifyAll() [187 time(s)]

equals(java.lang.Object)
	---> creational.factory.EnemyShip::equals(java.lang.Object) [187 time(s)]

registerNatives()
	---> creational.factory.EnemyShip::registerNatives() [187 time(s)]

notify()
	---> creational.factory.EnemyShip::notify() [187 time(s)]

followHeroShip()
	---> creational.factory.EnemyShip::followHeroShip() [187 time(s)]

hashCode()
	---> creational.factory.EnemyShip::hashCode() [187 time(s)]

enemyShipShoots()
	---> creational.factory.EnemyShip::enemyShipShoots() [187 time(s)]

displayEnemyShip()
	---> creational.factory.EnemyShip::displayEnemyShip() [187 time(s)]

finalize()
	---> creational.factory.EnemyShip::finalize() [187 time(s)]

toString()
	---> creational.factory.EnemyShip::toString() [187 time(s)]

clone()
	---> creational.factory.EnemyShip::clone() [187 time(s)]

creational.factory.Test::getClass()
	---> creational.factory.EnemyShip::getClass() [187 time(s)]

wait(long)
	---> creational.factory.EnemyShip::wait(long) [187 time(s)]

wait(long,int)
	---> creational.factory.EnemyShip::wait(long,int) [187 time(s)]

wait()
	---> creational.factory.EnemyShip::wait() [187 time(s)]

notifyAll()
	---> creational.factory.EnemyShip::notifyAll() [187 time(s)]

equals(java.lang.Object)
	---> creational.factory.EnemyShip::equals(java.lang.Object) [187 time(s)]

main(java.lang.String[])
	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [188 time(s)]

registerNatives()
	---> creational.factory.EnemyShipFactory::registerNatives() [188 time(s)]

notify()
	---> creational.factory.EnemyShipFactory::notify() [188 time(s)]

hashCode()
	---> creational.factory.EnemyShipFactory::hashCode() [188 time(s)]

doStuffEnemy(creational.factory.EnemyShip)
	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [191 time(s)]

finalize()
	---> creational.factory.EnemyShip::finalize() [191 time(s)]

toString()
	---> creational.factory.EnemyShip::toString() [191 time(s)]

clone()
	---> creational.factory.EnemyShip::clone() [191 time(s)]

creational.factory.UFOEnemyShip::getName()
	---> creational.factory.EnemyShip::getName() [191 time(s)]

getClass()
	---> creational.factory.EnemyShip::getClass() [191 time(s)]

wait(long)
	---> creational.factory.EnemyShip::wait(long) [191 time(s)]

wait(long,int)
	---> creational.factory.EnemyShip::wait(long,int) [191 time(s)]

wait()
	---> creational.factory.EnemyShip::wait() [191 time(s)]

setName(java.lang.String)
	---> creational.factory.EnemyShip::setName(java.lang.String) [191 time(s)]

getAmtDamage()
	---> creational.factory.EnemyShip::getAmtDamage() [191 time(s)]

setAmtDamage(double)
	---> creational.factory.EnemyShip::setAmtDamage(double) [191 time(s)]

notifyAll()
	---> creational.factory.EnemyShip::notifyAll() [191 time(s)]

equals(java.lang.Object)
	---> creational.factory.EnemyShip::equals(java.lang.Object) [191 time(s)]

registerNatives()
	---> creational.factory.EnemyShip::registerNatives() [191 time(s)]

notify()
	---> creational.factory.EnemyShip::notify() [191 time(s)]

followHeroShip()
	---> creational.factory.EnemyShip::followHeroShip() [191 time(s)]

hashCode()
	---> creational.factory.EnemyShip::hashCode() [191 time(s)]

enemyShipShoots()
	---> creational.factory.EnemyShip::enemyShipShoots() [191 time(s)]

displayEnemyShip()
	---> creational.factory.EnemyShip::displayEnemyShip() [191 time(s)]

finalize()
	---> creational.factory.EnemyShip::finalize() [191 time(s)]

toString()
	---> creational.factory.EnemyShip::toString() [191 time(s)]

clone()
	---> creational.factory.EnemyShip::clone() [191 time(s)]

creational.prototype.Circle::getClass()
	---> creational.factory.EnemyShip::getClass() [191 time(s)]

wait(long)
	---> creational.factory.EnemyShip::wait(long) [191 time(s)]

wait(long,int)
	---> creational.factory.EnemyShip::wait(long,int) [191 time(s)]

wait()
	---> creational.factory.EnemyShip::wait() [191 time(s)]

notifyAll()
	---> creational.factory.EnemyShip::notifyAll() [191 time(s)]

equals(java.lang.Object)
	---> creational.factory.EnemyShip::equals(java.lang.Object) [191 time(s)]

getId()
	---> creational.factory.EnemyShip::getId() [191 time(s)]

setPosition(creational.prototype.Position)
	---> creational.factory.EnemyShip::setPosition(creational.prototype.Position) [191 time(s)]

registerNatives()
	---> creational.factory.EnemyShip::registerNatives() [191 time(s)]

draw()
	---> creational.factory.EnemyShip::draw() [191 time(s)]

getPosition()
	---> creational.factory.EnemyShip::getPosition() [191 time(s)]

notify()
	---> creational.factory.EnemyShip::notify() [191 time(s)]

hashCode()
	---> creational.factory.EnemyShip::hashCode() [191 time(s)]

getType()
	---> creational.factory.EnemyShip::getType() [191 time(s)]

setId(java.lang.String)
	---> creational.factory.EnemyShip::setId(java.lang.String) [191 time(s)]

clone()
	---> creational.prototype.Shape::clone() [193 time(s)]

toString()
	---> creational.prototype.Shape::toString() [193 time(s)]

finalize()
	---> creational.prototype.Shape::finalize() [193 time(s)]

creational.prototype.Position::getClass()
	---> creational.prototype.Shape::getClass() [193 time(s)]

wait(long)
	---> creational.prototype.Shape::wait(long) [193 time(s)]

wait(long,int)
	---> creational.prototype.Shape::wait(long,int) [193 time(s)]

wait()
	---> creational.prototype.Shape::wait() [193 time(s)]

setX(double)
	---> creational.prototype.Shape::setX(double) [193 time(s)]

notifyAll()
	---> creational.prototype.Shape::notifyAll() [193 time(s)]

equals(java.lang.Object)
	---> creational.prototype.Shape::equals(java.lang.Object) [193 time(s)]

registerNatives()
	---> creational.prototype.Shape::registerNatives() [193 time(s)]

setY(double)
	---> creational.prototype.Shape::setY(double) [193 time(s)]

notify()
	---> creational.prototype.Shape::notify() [193 time(s)]

hashCode()
	---> creational.prototype.Shape::hashCode() [193 time(s)]

getX()
	---> creational.prototype.Shape::getX() [193 time(s)]

getY()
	---> creational.prototype.Shape::getY() [193 time(s)]

clone()
	---> creational.prototype.Shape::clone() [193 time(s)]

toString()
	---> creational.prototype.Position::toString() [194 time(s)]

finalize()
	---> creational.prototype.Position::finalize() [194 time(s)]

creational.prototype.Rectangle::getClass()
	---> creational.prototype.Position::getClass() [194 time(s)]

wait(long)
	---> creational.prototype.Position::wait(long) [194 time(s)]

wait(long,int)
	---> creational.prototype.Position::wait(long,int) [194 time(s)]

wait()
	---> creational.prototype.Position::wait() [194 time(s)]

notifyAll()
	---> creational.prototype.Position::notifyAll() [194 time(s)]

equals(java.lang.Object)
	---> creational.prototype.Position::equals(java.lang.Object) [194 time(s)]

getId()
	---> creational.prototype.Position::getId() [194 time(s)]

setPosition(creational.prototype.Position)
	---> creational.prototype.Position::setPosition(creational.prototype.Position) [194 time(s)]

registerNatives()
	---> creational.prototype.Position::registerNatives() [194 time(s)]

draw()
	---> creational.prototype.Position::draw() [194 time(s)]

getPosition()
	---> creational.prototype.Position::getPosition() [194 time(s)]

notify()
	---> creational.prototype.Position::notify() [194 time(s)]

hashCode()
	---> creational.prototype.Position::hashCode() [194 time(s)]

getType()
	---> creational.prototype.Position::getType() [194 time(s)]

setId(java.lang.String)
	---> creational.prototype.Position::setId(java.lang.String) [194 time(s)]

clone()
	---> creational.prototype.Shape::clone() [197 time(s)]

toString()
	---> creational.prototype.Shape::toString() [198 time(s)]

finalize()
	---> creational.prototype.Shape::finalize() [198 time(s)]

creational.prototype.Shape::getClass()
	---> creational.prototype.Shape::getClass() [198 time(s)]

wait(long)
	---> creational.prototype.Shape::wait(long) [198 time(s)]

wait(long,int)
	---> creational.prototype.Shape::wait(long,int) [198 time(s)]

wait()
	---> creational.prototype.Shape::wait() [198 time(s)]

notifyAll()
	---> creational.prototype.Shape::notifyAll() [198 time(s)]

equals(java.lang.Object)
	---> creational.prototype.Shape::equals(java.lang.Object) [198 time(s)]

getId()
	---> creational.prototype.Shape::getId() [198 time(s)]

setPosition(creational.prototype.Position)
	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [198 time(s)]

registerNatives()
	---> creational.prototype.Shape::registerNatives() [198 time(s)]

draw()
	---> creational.prototype.Shape::draw() [198 time(s)]

getPosition()
	---> creational.prototype.Shape::getPosition() [198 time(s)]

notify()
	---> creational.prototype.Shape::notify() [198 time(s)]

hashCode()
	---> creational.prototype.Shape::hashCode() [198 time(s)]

getType()
	---> creational.prototype.Shape::getType() [198 time(s)]

setId(java.lang.String)
	---> creational.prototype.Shape::setId(java.lang.String) [198 time(s)]

clone()
	---> creational.prototype.Shape::clone() [201 time(s)]

toString()
	---> creational.prototype.Shape::toString() [202 time(s)]

finalize()
	---> creational.prototype.Shape::finalize() [202 time(s)]

creational.prototype.ShapeCache::getClass()
	---> creational.prototype.Shape::getClass() [202 time(s)]

wait(long)
	---> creational.prototype.Shape::wait(long) [202 time(s)]

wait(long,int)
	---> creational.prototype.Shape::wait(long,int) [202 time(s)]

wait()
	---> creational.prototype.Shape::wait() [202 time(s)]

notifyAll()
	---> creational.prototype.Shape::notifyAll() [202 time(s)]

equals(java.lang.Object)
	---> creational.prototype.Shape::equals(java.lang.Object) [202 time(s)]

registerNatives()
	---> creational.prototype.Shape::registerNatives() [202 time(s)]

notify()
	---> creational.prototype.Shape::notify() [202 time(s)]

getShape(java.lang.String)
	---> creational.prototype.Shape::getShape(java.lang.String) [202 time(s)]

hashCode()
	---> creational.prototype.Shape::hashCode() [202 time(s)]

displayCacheContent()
	---> creational.prototype.Shape::displayCacheContent() [202 time(s)]

finalize()
	---> creational.prototype.Shape::finalize() [202 time(s)]

toString()
	---> creational.prototype.Shape::toString() [202 time(s)]

clone()
	---> creational.prototype.Shape::clone() [202 time(s)]

loadCache()
	---> creational.prototype.Rectangle::loadCache() [210 time(s)]

creational.prototype.Test::getClass()
	---> creational.prototype.Rectangle::getClass() [210 time(s)]

wait(long)
	---> creational.prototype.Rectangle::wait(long) [210 time(s)]

wait(long,int)
	---> creational.prototype.Rectangle::wait(long,int) [210 time(s)]

wait()
	---> creational.prototype.Rectangle::wait() [210 time(s)]

notifyAll()
	---> creational.prototype.Rectangle::notifyAll() [210 time(s)]

equals(java.lang.Object)
	---> creational.prototype.Rectangle::equals(java.lang.Object) [210 time(s)]

main(java.lang.String[])
	---> creational.prototype.Shape::main(java.lang.String[]) [216 time(s)]

registerNatives()
	---> creational.prototype.Shape::registerNatives() [216 time(s)]

notify()
	---> creational.prototype.Shape::notify() [216 time(s)]

hashCode()
	---> creational.prototype.Shape::hashCode() [216 time(s)]

finalize()
	---> creational.prototype.Shape::finalize() [216 time(s)]

toString()
	---> creational.prototype.Shape::toString() [216 time(s)]

clone()
	---> creational.prototype.Shape::clone() [216 time(s)]

creational.prototype.Triangle::getClass()
	---> creational.prototype.Shape::getClass() [216 time(s)]

wait(long)
	---> creational.prototype.Shape::wait(long) [216 time(s)]

wait(long,int)
	---> creational.prototype.Shape::wait(long,int) [216 time(s)]

wait()
	---> creational.prototype.Shape::wait() [216 time(s)]

notifyAll()
	---> creational.prototype.Shape::notifyAll() [216 time(s)]

equals(java.lang.Object)
	---> creational.prototype.Shape::equals(java.lang.Object) [216 time(s)]

getId()
	---> creational.prototype.Shape::getId() [216 time(s)]

setPosition(creational.prototype.Position)
	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [216 time(s)]

registerNatives()
	---> creational.prototype.Shape::registerNatives() [216 time(s)]

draw()
	---> creational.prototype.Shape::draw() [216 time(s)]

getPosition()
	---> creational.prototype.Shape::getPosition() [216 time(s)]

notify()
	---> creational.prototype.Shape::notify() [216 time(s)]

hashCode()
	---> creational.prototype.Shape::hashCode() [216 time(s)]

getType()
	---> creational.prototype.Shape::getType() [216 time(s)]

setId(java.lang.String)
	---> creational.prototype.Shape::setId(java.lang.String) [216 time(s)]

clone()
	---> creational.prototype.Shape::clone() [219 time(s)]

toString()
	---> creational.prototype.Shape::toString() [220 time(s)]

finalize()
	---> creational.prototype.Shape::finalize() [220 time(s)]

creational.singleton.ExtendedSingleton::getClass()
	---> creational.prototype.Shape::getClass() [220 time(s)]

wait(long)
	---> creational.prototype.Shape::wait(long) [220 time(s)]

wait(long,int)
	---> creational.prototype.Shape::wait(long,int) [220 time(s)]

wait()
	---> creational.prototype.Shape::wait() [220 time(s)]

getRegistryKey(java.lang.Class)
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [220 time(s)]

notifyAll()
	---> creational.prototype.Shape::notifyAll() [220 time(s)]

equals(java.lang.Object)
	---> creational.prototype.Shape::equals(java.lang.Object) [220 time(s)]

registerNatives()
	---> creational.prototype.Shape::registerNatives() [220 time(s)]

notify()
	---> creational.prototype.Shape::notify() [220 time(s)]

hashCode()
	---> creational.prototype.Shape::hashCode() [220 time(s)]

finalize()
	---> creational.prototype.Shape::finalize() [220 time(s)]

toString()
	---> creational.prototype.Shape::toString() [220 time(s)]

clone()
	---> creational.prototype.Shape::clone() [220 time(s)]

getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [221 time(s)]

creational.singleton.ExtendedSingleton2::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [221 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [221 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [221 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [221 time(s)]

getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [221 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [221 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [221 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [221 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [221 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [221 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [221 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [221 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [221 time(s)]

getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [222 time(s)]

creational.singleton.Singleton::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [222 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [222 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [222 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [222 time(s)]

getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [222 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [222 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [222 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [222 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [222 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [222 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [222 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [222 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [222 time(s)]

getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [223 time(s)]

creational.singleton.SingletonRegistry::lookup(java.lang.String)
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [223 time(s)]

getClass()
	---> creational.singleton.SingletonRegistry::getClass() [223 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [223 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [223 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [223 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [223 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [223 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [223 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [223 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [223 time(s)]

register(java.lang.String,creational.singleton.Singleton)
	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [223 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [223 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [223 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [223 time(s)]

creational.singleton.Test::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [223 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [223 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [223 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [223 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [223 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [223 time(s)]

main(java.lang.String[])
	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [229 time(s)]

registerNatives()
	---> creational.singleton.ExtendedSingleton2::registerNatives() [229 time(s)]

notify()
	---> creational.singleton.ExtendedSingleton2::notify() [229 time(s)]

hashCode()
	---> creational.singleton.ExtendedSingleton2::hashCode() [229 time(s)]

finalize()
	---> creational.singleton.ExtendedSingleton2::finalize() [229 time(s)]

toString()
	---> creational.singleton.ExtendedSingleton2::toString() [229 time(s)]

clone()
	---> creational.singleton.ExtendedSingleton2::clone() [229 time(s)]

fireWeapon()
	---> creational.singleton.ExtendedSingleton2::fireWeapon() [229 time(s)]

driveForward()
	---> creational.singleton.ExtendedSingleton2::driveForward() [229 time(s)]

assignDriver(java.lang.String)
	---> creational.singleton.ExtendedSingleton2::assignDriver(java.lang.String) [229 time(s)]

structural.adapter.EnemyRobot::getClass()
	---> creational.singleton.ExtendedSingleton2::getClass() [229 time(s)]

wait(long)
	---> creational.singleton.ExtendedSingleton2::wait(long) [229 time(s)]

wait(long,int)
	---> creational.singleton.ExtendedSingleton2::wait(long,int) [229 time(s)]

wait()
	---> creational.singleton.ExtendedSingleton2::wait() [229 time(s)]

smashwithHands()
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [229 time(s)]

walkForward()
	---> creational.singleton.ExtendedSingleton2::walkForward() [229 time(s)]

notifyAll()
	---> creational.singleton.ExtendedSingleton2::notifyAll() [229 time(s)]

equals(java.lang.Object)
	---> creational.singleton.ExtendedSingleton2::equals(java.lang.Object) [229 time(s)]

registerNatives()
	---> creational.singleton.ExtendedSingleton2::registerNatives() [229 time(s)]

notify()
	---> creational.singleton.ExtendedSingleton2::notify() [229 time(s)]

hashCode()
	---> creational.singleton.ExtendedSingleton2::hashCode() [229 time(s)]

reactToHuman(java.lang.String)
	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [229 time(s)]

finalize()
	---> creational.singleton.ExtendedSingleton2::finalize() [229 time(s)]

toString()
	---> creational.singleton.ExtendedSingleton2::toString() [229 time(s)]

clone()
	---> creational.singleton.ExtendedSingleton2::clone() [229 time(s)]

structural.adapter.EnemyRobotAdapter::getClass()
	---> creational.singleton.ExtendedSingleton2::getClass() [229 time(s)]

wait(long)
	---> creational.singleton.ExtendedSingleton2::wait(long) [229 time(s)]

wait(long,int)
	---> creational.singleton.ExtendedSingleton2::wait(long,int) [229 time(s)]

wait()
	---> creational.singleton.ExtendedSingleton2::wait() [229 time(s)]

driveForward()
	---> structural.adapter.EnemyRobot::driveForward() [229 time(s)]

notifyAll()
	---> structural.adapter.EnemyRobot::notifyAll() [229 time(s)]

equals(java.lang.Object)
	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [229 time(s)]

registerNatives()
	---> structural.adapter.EnemyRobot::registerNatives() [229 time(s)]

notify()
	---> structural.adapter.EnemyRobot::notify() [229 time(s)]

setRobot(structural.adapter.EnemyRobot)
	---> structural.adapter.EnemyRobot::setRobot(structural.adapter.EnemyRobot) [229 time(s)]

fireWeapon()
	---> structural.adapter.EnemyRobot::fireWeapon() [229 time(s)]

hashCode()
	---> structural.adapter.EnemyRobot::hashCode() [229 time(s)]

assignDriver(java.lang.String)
	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [229 time(s)]

finalize()
	---> structural.adapter.EnemyRobot::finalize() [229 time(s)]

toString()
	---> structural.adapter.EnemyRobot::toString() [229 time(s)]

clone()
	---> structural.adapter.EnemyRobot::clone() [229 time(s)]

structural.adapter.EnemyTank::getClass()
	---> structural.adapter.EnemyRobot::getClass() [229 time(s)]

wait(long)
	---> structural.adapter.EnemyRobot::wait(long) [229 time(s)]

wait(long,int)
	---> structural.adapter.EnemyRobot::wait(long,int) [229 time(s)]

wait()
	---> structural.adapter.EnemyRobot::wait() [229 time(s)]

driveForward()
	---> structural.adapter.EnemyRobot::driveForward() [229 time(s)]

notifyAll()
	---> structural.adapter.EnemyRobot::notifyAll() [229 time(s)]

equals(java.lang.Object)
	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [229 time(s)]

registerNatives()
	---> structural.adapter.EnemyRobot::registerNatives() [229 time(s)]

notify()
	---> structural.adapter.EnemyRobot::notify() [229 time(s)]

fireWeapon()
	---> structural.adapter.EnemyRobot::fireWeapon() [229 time(s)]

hashCode()
	---> structural.adapter.EnemyRobot::hashCode() [229 time(s)]

assignDriver(java.lang.String)
	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [229 time(s)]

finalize()
	---> structural.adapter.EnemyRobot::finalize() [229 time(s)]

toString()
	---> structural.adapter.EnemyRobot::toString() [229 time(s)]

clone()
	---> structural.adapter.EnemyRobot::clone() [229 time(s)]

structural.adapter.Test::getClass()
	---> structural.adapter.EnemyRobot::getClass() [229 time(s)]

wait(long)
	---> structural.adapter.EnemyRobot::wait(long) [229 time(s)]

wait(long,int)
	---> structural.adapter.EnemyRobot::wait(long,int) [229 time(s)]

wait()
	---> structural.adapter.EnemyRobot::wait() [229 time(s)]

notifyAll()
	---> structural.adapter.EnemyRobot::notifyAll() [229 time(s)]

equals(java.lang.Object)
	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [229 time(s)]

main(java.lang.String[])
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [238 time(s)]

registerNatives()
	---> structural.adapter.EnemyAttacker::registerNatives() [238 time(s)]

notify()
	---> structural.adapter.EnemyAttacker::notify() [238 time(s)]

hashCode()
	---> structural.adapter.EnemyAttacker::hashCode() [238 time(s)]

finalize()
	---> structural.adapter.EnemyAttacker::finalize() [238 time(s)]

toString()
	---> structural.adapter.EnemyAttacker::toString() [238 time(s)]

clone()
	---> structural.adapter.EnemyAttacker::clone() [238 time(s)]

structural.adapter.TestEnemyAttackers::getClass()
	---> structural.adapter.EnemyAttacker::getClass() [238 time(s)]

wait(long)
	---> structural.adapter.EnemyAttacker::wait(long) [238 time(s)]

wait(long,int)
	---> structural.adapter.EnemyAttacker::wait(long,int) [238 time(s)]

wait()
	---> structural.adapter.EnemyAttacker::wait() [238 time(s)]

notifyAll()
	---> structural.adapter.EnemyAttacker::notifyAll() [238 time(s)]

equals(java.lang.Object)
	---> structural.adapter.EnemyAttacker::equals(java.lang.Object) [238 time(s)]

main(java.lang.String[])
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [247 time(s)]

registerNatives()
	---> structural.adapter.EnemyAttacker::registerNatives() [247 time(s)]

notify()
	---> structural.adapter.EnemyAttacker::notify() [247 time(s)]

hashCode()
	---> structural.adapter.EnemyAttacker::hashCode() [247 time(s)]

finalize()
	---> structural.adapter.EnemyAttacker::finalize() [247 time(s)]

toString()
	---> structural.adapter.EnemyAttacker::toString() [247 time(s)]

clone()
	---> structural.adapter.EnemyAttacker::clone() [247 time(s)]

structural.bridge.AdvancedRemote::getClass()
	---> structural.adapter.EnemyAttacker::getClass() [247 time(s)]

wait(long)
	---> structural.adapter.EnemyAttacker::wait(long) [247 time(s)]

wait(long,int)
	---> structural.adapter.EnemyAttacker::wait(long,int) [247 time(s)]

wait()
	---> structural.adapter.EnemyAttacker::wait() [247 time(s)]

togglePower()
	---> structural.bridge.Device::togglePower() [251 time(s)]

notifyAll()
	---> structural.bridge.Device::notifyAll() [251 time(s)]

equals(java.lang.Object)
	---> structural.bridge.Device::equals(java.lang.Object) [251 time(s)]

mute()
	---> structural.bridge.Device::mute() [253 time(s)]

channelDown()
	---> structural.bridge.Device::channelDown() [255 time(s)]

registerNatives()
	---> structural.bridge.Device::registerNatives() [255 time(s)]

notify()
	---> structural.bridge.Device::notify() [255 time(s)]

hashCode()
	---> structural.bridge.Device::hashCode() [255 time(s)]

volumeDown()
	---> structural.bridge.Device::volumeDown() [257 time(s)]

volumeUp()
	---> structural.bridge.Device::volumeUp() [259 time(s)]

finalize()
	---> structural.bridge.Device::finalize() [259 time(s)]

toString()
	---> structural.bridge.Device::toString() [259 time(s)]

clone()
	---> structural.bridge.Device::clone() [259 time(s)]

channelUp()
	---> structural.bridge.Device::channelUp() [261 time(s)]

structural.bridge.Device::getName()
	---> structural.bridge.Device::getName() [261 time(s)]

getClass()
	---> structural.bridge.Device::getClass() [261 time(s)]

wait(long)
	---> structural.bridge.Device::wait(long) [261 time(s)]

wait(long,int)
	---> structural.bridge.Device::wait(long,int) [261 time(s)]

wait()
	---> structural.bridge.Device::wait() [261 time(s)]

notifyAll()
	---> structural.bridge.Device::notifyAll() [261 time(s)]

setChannel(int)
	---> structural.bridge.Device::setChannel(int) [261 time(s)]

equals(java.lang.Object)
	---> structural.bridge.Device::equals(java.lang.Object) [261 time(s)]

registerNatives()
	---> structural.bridge.Device::registerNatives() [261 time(s)]

setVolume(int)
	---> structural.bridge.Device::setVolume(int) [261 time(s)]

notify()
	---> structural.bridge.Device::notify() [261 time(s)]

enable()
	---> structural.bridge.Device::enable() [261 time(s)]

hashCode()
	---> structural.bridge.Device::hashCode() [261 time(s)]

getVolume()
	---> structural.bridge.Device::getVolume() [261 time(s)]

getChannel()
	---> structural.bridge.Device::getChannel() [261 time(s)]

disable()
	---> structural.bridge.Device::disable() [261 time(s)]

isEnabled()
	---> structural.bridge.Device::isEnabled() [261 time(s)]

finalize()
	---> structural.bridge.Device::finalize() [261 time(s)]

toString()
	---> structural.bridge.Device::toString() [261 time(s)]

clone()
	---> structural.bridge.Device::clone() [261 time(s)]

structural.bridge.Radio::getName()
	---> structural.bridge.Device::getName() [261 time(s)]

getClass()
	---> structural.bridge.Device::getClass() [261 time(s)]

wait(long)
	---> structural.bridge.Device::wait(long) [261 time(s)]

wait(long,int)
	---> structural.bridge.Device::wait(long,int) [261 time(s)]

wait()
	---> structural.bridge.Device::wait() [261 time(s)]

notifyAll()
	---> structural.bridge.Device::notifyAll() [261 time(s)]

setChannel(int)
	---> structural.bridge.Device::setChannel(int) [261 time(s)]

equals(java.lang.Object)
	---> structural.bridge.Device::equals(java.lang.Object) [261 time(s)]

registerNatives()
	---> structural.bridge.Device::registerNatives() [261 time(s)]

setVolume(int)
	---> structural.bridge.Device::setVolume(int) [261 time(s)]

notify()
	---> structural.bridge.Device::notify() [261 time(s)]

enable()
	---> structural.bridge.Device::enable() [261 time(s)]

hashCode()
	---> structural.bridge.Device::hashCode() [261 time(s)]

getVolume()
	---> structural.bridge.Device::getVolume() [261 time(s)]

getChannel()
	---> structural.bridge.Device::getChannel() [261 time(s)]

disable()
	---> structural.bridge.Device::disable() [261 time(s)]

isEnabled()
	---> structural.bridge.Device::isEnabled() [261 time(s)]

finalize()
	---> structural.bridge.Device::finalize() [261 time(s)]

toString()
	---> structural.bridge.Device::toString() [261 time(s)]

clone()
	---> structural.bridge.Device::clone() [261 time(s)]

structural.bridge.Remote::getClass()
	---> structural.bridge.Device::getClass() [261 time(s)]

wait(long)
	---> structural.bridge.Device::wait(long) [261 time(s)]

wait(long,int)
	---> structural.bridge.Device::wait(long,int) [261 time(s)]

wait()
	---> structural.bridge.Device::wait() [261 time(s)]

togglePower()
	---> structural.bridge.Device::togglePower() [266 time(s)]

notifyAll()
	---> structural.bridge.Device::notifyAll() [266 time(s)]

equals(java.lang.Object)
	---> structural.bridge.Device::equals(java.lang.Object) [266 time(s)]

channelDown()
	---> structural.bridge.Device::channelDown() [269 time(s)]

registerNatives()
	---> structural.bridge.Device::registerNatives() [269 time(s)]

notify()
	---> structural.bridge.Device::notify() [269 time(s)]

hashCode()
	---> structural.bridge.Device::hashCode() [269 time(s)]

volumeDown()
	---> structural.bridge.Device::volumeDown() [272 time(s)]

volumeUp()
	---> structural.bridge.Device::volumeUp() [275 time(s)]

finalize()
	---> structural.bridge.Device::finalize() [275 time(s)]

toString()
	---> structural.bridge.Device::toString() [275 time(s)]

clone()
	---> structural.bridge.Device::clone() [275 time(s)]

channelUp()
	---> structural.bridge.Device::channelUp() [278 time(s)]

structural.bridge.TV::getName()
	---> structural.bridge.Device::getName() [278 time(s)]

getClass()
	---> structural.bridge.Device::getClass() [278 time(s)]

wait(long)
	---> structural.bridge.Device::wait(long) [278 time(s)]

wait(long,int)
	---> structural.bridge.Device::wait(long,int) [278 time(s)]

wait()
	---> structural.bridge.Device::wait() [278 time(s)]

notifyAll()
	---> structural.bridge.Device::notifyAll() [278 time(s)]

setChannel(int)
	---> structural.bridge.Device::setChannel(int) [278 time(s)]

equals(java.lang.Object)
	---> structural.bridge.Device::equals(java.lang.Object) [278 time(s)]

registerNatives()
	---> structural.bridge.Device::registerNatives() [278 time(s)]

setVolume(int)
	---> structural.bridge.Device::setVolume(int) [278 time(s)]

notify()
	---> structural.bridge.Device::notify() [278 time(s)]

enable()
	---> structural.bridge.Device::enable() [278 time(s)]

hashCode()
	---> structural.bridge.Device::hashCode() [278 time(s)]

getVolume()
	---> structural.bridge.Device::getVolume() [278 time(s)]

getChannel()
	---> structural.bridge.Device::getChannel() [278 time(s)]

disable()
	---> structural.bridge.Device::disable() [278 time(s)]

isEnabled()
	---> structural.bridge.Device::isEnabled() [278 time(s)]

finalize()
	---> structural.bridge.Device::finalize() [278 time(s)]

toString()
	---> structural.bridge.Device::toString() [278 time(s)]

clone()
	---> structural.bridge.Device::clone() [278 time(s)]

structural.bridge.Test::getClass()
	---> structural.bridge.Device::getClass() [278 time(s)]

wait(long)
	---> structural.bridge.Device::wait(long) [278 time(s)]

wait(long,int)
	---> structural.bridge.Device::wait(long,int) [278 time(s)]

wait()
	---> structural.bridge.Device::wait() [278 time(s)]

notifyAll()
	---> structural.bridge.Device::notifyAll() [278 time(s)]

equals(java.lang.Object)
	---> structural.bridge.Device::equals(java.lang.Object) [278 time(s)]

main(java.lang.String[])
	---> structural.bridge.Device::main(java.lang.String[]) [278 time(s)]

registerNatives()
	---> structural.bridge.Device::registerNatives() [278 time(s)]

notify()
	---> structural.bridge.Device::notify() [278 time(s)]

hashCode()
	---> structural.bridge.Device::hashCode() [278 time(s)]

ordinaryRemoteTest(structural.bridge.Remote)
	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [289 time(s)]

advancedRemoteTest(structural.bridge.AdvancedRemote)
	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [298 time(s)]

finalize()
	---> structural.bridge.AdvancedRemote::finalize() [298 time(s)]

toString()
	---> structural.bridge.AdvancedRemote::toString() [298 time(s)]

clone()
	---> structural.bridge.AdvancedRemote::clone() [298 time(s)]

structural.composite.DiscJockey::getClass()
	---> structural.bridge.AdvancedRemote::getClass() [298 time(s)]

wait(long)
	---> structural.bridge.AdvancedRemote::wait(long) [298 time(s)]

wait(long,int)
	---> structural.bridge.AdvancedRemote::wait(long,int) [298 time(s)]

wait()
	---> structural.bridge.AdvancedRemote::wait() [298 time(s)]

notifyAll()
	---> structural.bridge.AdvancedRemote::notifyAll() [298 time(s)]

equals(java.lang.Object)
	---> structural.bridge.AdvancedRemote::equals(java.lang.Object) [298 time(s)]

registerNatives()
	---> structural.bridge.AdvancedRemote::registerNatives() [298 time(s)]

notify()
	---> structural.bridge.AdvancedRemote::notify() [298 time(s)]

hashCode()
	---> structural.bridge.AdvancedRemote::hashCode() [298 time(s)]

getSongList()
	---> structural.bridge.AdvancedRemote::getSongList() [298 time(s)]

displaySongList()
	---> structural.composite.SongComponent::displaySongList() [298 time(s)]

finalize()
	---> structural.composite.SongComponent::finalize() [298 time(s)]

toString()
	---> structural.composite.SongComponent::toString() [298 time(s)]

clone()
	---> structural.composite.SongComponent::clone() [298 time(s)]

structural.composite.Song::getClass()
	---> structural.composite.SongComponent::getClass() [298 time(s)]

wait(long)
	---> structural.composite.SongComponent::wait(long) [298 time(s)]

wait(long,int)
	---> structural.composite.SongComponent::wait(long,int) [298 time(s)]

wait()
	---> structural.composite.SongComponent::wait() [298 time(s)]

add(structural.composite.SongComponent)
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [298 time(s)]

getInfo()
	---> structural.composite.Song::getInfo() [300 time(s)]

notifyAll()
	---> structural.composite.Song::notifyAll() [300 time(s)]

equals(java.lang.Object)
	---> structural.composite.Song::equals(java.lang.Object) [300 time(s)]

registerNatives()
	---> structural.composite.Song::registerNatives() [300 time(s)]

getSongName()
	---> structural.composite.Song::getSongName() [300 time(s)]

notify()
	---> structural.composite.Song::notify() [300 time(s)]

remove(structural.composite.SongComponent)
	---> structural.composite.Song::remove(structural.composite.SongComponent) [300 time(s)]

hashCode()
	---> structural.composite.Song::hashCode() [300 time(s)]

getBandName()
	---> structural.composite.Song::getBandName() [300 time(s)]

getComponent(int)
	---> structural.composite.Song::getComponent(int) [300 time(s)]

displayInfo()
	---> structural.composite.SongComponent::displayInfo() [300 time(s)]

finalize()
	---> structural.composite.SongComponent::finalize() [300 time(s)]

toString()
	---> structural.composite.SongComponent::toString() [300 time(s)]

clone()
	---> structural.composite.SongComponent::clone() [300 time(s)]

getReleaseYear()
	---> structural.composite.SongComponent::getReleaseYear() [300 time(s)]

structural.composite.SongComponent::getClass()
	---> structural.composite.SongComponent::getClass() [300 time(s)]

wait(long)
	---> structural.composite.SongComponent::wait(long) [300 time(s)]

wait(long,int)
	---> structural.composite.SongComponent::wait(long,int) [300 time(s)]

wait()
	---> structural.composite.SongComponent::wait() [300 time(s)]

add(structural.composite.SongComponent)
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [300 time(s)]

getInfo()
	---> structural.composite.SongComponent::getInfo() [300 time(s)]

notifyAll()
	---> structural.composite.SongComponent::notifyAll() [300 time(s)]

equals(java.lang.Object)
	---> structural.composite.SongComponent::equals(java.lang.Object) [300 time(s)]

registerNatives()
	---> structural.composite.SongComponent::registerNatives() [300 time(s)]

getSongName()
	---> structural.composite.SongComponent::getSongName() [300 time(s)]

notify()
	---> structural.composite.SongComponent::notify() [300 time(s)]

remove(structural.composite.SongComponent)
	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [300 time(s)]

hashCode()
	---> structural.composite.SongComponent::hashCode() [300 time(s)]

getBandName()
	---> structural.composite.SongComponent::getBandName() [300 time(s)]

getComponent(int)
	---> structural.composite.SongComponent::getComponent(int) [300 time(s)]

displayInfo()
	---> structural.composite.SongComponent::displayInfo() [301 time(s)]

finalize()
	---> structural.composite.SongComponent::finalize() [301 time(s)]

toString()
	---> structural.composite.SongComponent::toString() [301 time(s)]

clone()
	---> structural.composite.SongComponent::clone() [301 time(s)]

getReleaseYear()
	---> structural.composite.SongComponent::getReleaseYear() [301 time(s)]

structural.composite.SongGroup::getClass()
	---> structural.composite.SongComponent::getClass() [301 time(s)]

wait(long)
	---> structural.composite.SongComponent::wait(long) [301 time(s)]

wait(long,int)
	---> structural.composite.SongComponent::wait(long,int) [301 time(s)]

wait()
	---> structural.composite.SongComponent::wait() [301 time(s)]

add(structural.composite.SongComponent)
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [301 time(s)]

getInfo()
	---> structural.composite.SongComponent::getInfo() [305 time(s)]

notifyAll()
	---> structural.composite.SongComponent::notifyAll() [305 time(s)]

equals(java.lang.Object)
	---> structural.composite.SongComponent::equals(java.lang.Object) [305 time(s)]

registerNatives()
	---> structural.composite.SongComponent::registerNatives() [305 time(s)]

getSongName()
	---> structural.composite.SongComponent::getSongName() [305 time(s)]

notify()
	---> structural.composite.SongComponent::notify() [305 time(s)]

remove(structural.composite.SongComponent)
	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [305 time(s)]

getGroupName()
	---> structural.composite.SongComponent::getGroupName() [305 time(s)]

hashCode()
	---> structural.composite.SongComponent::hashCode() [305 time(s)]

getBandName()
	---> structural.composite.SongComponent::getBandName() [305 time(s)]

getComponent(int)
	---> structural.composite.SongComponent::getComponent(int) [305 time(s)]

getGroupDescription()
	---> structural.composite.SongComponent::getGroupDescription() [305 time(s)]

displayInfo()
	---> structural.composite.SongComponent::displayInfo() [306 time(s)]

finalize()
	---> structural.composite.SongComponent::finalize() [306 time(s)]

toString()
	---> structural.composite.SongComponent::toString() [306 time(s)]

clone()
	---> structural.composite.SongComponent::clone() [306 time(s)]

getReleaseYear()
	---> structural.composite.SongComponent::getReleaseYear() [306 time(s)]

structural.composite.SongListGenerator::getClass()
	---> structural.composite.SongComponent::getClass() [306 time(s)]

wait(long)
	---> structural.composite.SongComponent::wait(long) [306 time(s)]

wait(long,int)
	---> structural.composite.SongComponent::wait(long,int) [306 time(s)]

wait()
	---> structural.composite.SongComponent::wait() [306 time(s)]

notifyAll()
	---> structural.composite.SongComponent::notifyAll() [306 time(s)]

equals(java.lang.Object)
	---> structural.composite.SongComponent::equals(java.lang.Object) [306 time(s)]

main(java.lang.String[])
	---> structural.composite.DiscJockey::main(java.lang.String[]) [316 time(s)]

registerNatives()
	---> structural.composite.DiscJockey::registerNatives() [316 time(s)]

notify()
	---> structural.composite.DiscJockey::notify() [316 time(s)]

hashCode()
	---> structural.composite.DiscJockey::hashCode() [316 time(s)]

finalize()
	---> structural.composite.DiscJockey::finalize() [316 time(s)]

toString()
	---> structural.composite.DiscJockey::toString() [316 time(s)]

clone()
	---> structural.composite.DiscJockey::clone() [316 time(s)]

structural.composite.Test::getClass()
	---> structural.composite.DiscJockey::getClass() [316 time(s)]

wait(long)
	---> structural.composite.DiscJockey::wait(long) [316 time(s)]

wait(long,int)
	---> structural.composite.DiscJockey::wait(long,int) [316 time(s)]

wait()
	---> structural.composite.DiscJockey::wait() [316 time(s)]

notifyAll()
	---> structural.composite.DiscJockey::notifyAll() [316 time(s)]

equals(java.lang.Object)
	---> structural.composite.DiscJockey::equals(java.lang.Object) [316 time(s)]

main(java.lang.String[])
	---> structural.composite.DiscJockey::main(java.lang.String[]) [326 time(s)]

registerNatives()
	---> structural.composite.DiscJockey::registerNatives() [326 time(s)]

notify()
	---> structural.composite.DiscJockey::notify() [326 time(s)]

hashCode()
	---> structural.composite.DiscJockey::hashCode() [326 time(s)]

finalize()
	---> structural.composite.DiscJockey::finalize() [326 time(s)]

toString()
	---> structural.composite.DiscJockey::toString() [326 time(s)]

clone()
	---> structural.composite.DiscJockey::clone() [326 time(s)]

structural.decorator.Beverage::getClass()
	---> structural.composite.DiscJockey::getClass() [326 time(s)]

wait(long)
	---> structural.composite.DiscJockey::wait(long) [326 time(s)]

wait(long,int)
	---> structural.composite.DiscJockey::wait(long,int) [326 time(s)]

wait()
	---> structural.composite.DiscJockey::wait() [326 time(s)]

notifyAll()
	---> structural.composite.DiscJockey::notifyAll() [326 time(s)]

description()
	---> structural.composite.DiscJockey::description() [326 time(s)]

equals(java.lang.Object)
	---> structural.composite.DiscJockey::equals(java.lang.Object) [326 time(s)]

registerNatives()
	---> structural.composite.DiscJockey::registerNatives() [326 time(s)]

notify()
	---> structural.composite.DiscJockey::notify() [326 time(s)]

hashCode()
	---> structural.composite.DiscJockey::hashCode() [326 time(s)]

price()
	---> structural.composite.DiscJockey::price() [326 time(s)]

finalize()
	---> structural.composite.DiscJockey::finalize() [326 time(s)]

toString()
	---> structural.composite.DiscJockey::toString() [326 time(s)]

clone()
	---> structural.composite.DiscJockey::clone() [326 time(s)]

structural.decorator.BeverageDecorator::getClass()
	---> structural.composite.DiscJockey::getClass() [326 time(s)]

wait(long)
	---> structural.composite.DiscJockey::wait(long) [326 time(s)]

wait(long,int)
	---> structural.composite.DiscJockey::wait(long,int) [326 time(s)]

wait()
	---> structural.composite.DiscJockey::wait() [326 time(s)]

notifyAll()
	---> structural.composite.DiscJockey::notifyAll() [326 time(s)]

description()
	---> structural.composite.DiscJockey::description() [326 time(s)]

equals(java.lang.Object)
	---> structural.composite.DiscJockey::equals(java.lang.Object) [326 time(s)]

registerNatives()
	---> structural.composite.DiscJockey::registerNatives() [326 time(s)]

notify()
	---> structural.composite.DiscJockey::notify() [326 time(s)]

hashCode()
	---> structural.composite.DiscJockey::hashCode() [326 time(s)]

price()
	---> structural.composite.DiscJockey::price() [326 time(s)]

finalize()
	---> structural.composite.DiscJockey::finalize() [326 time(s)]

toString()
	---> structural.composite.DiscJockey::toString() [326 time(s)]

clone()
	---> structural.composite.DiscJockey::clone() [326 time(s)]

structural.decorator.CaramelDecorator::getClass()
	---> structural.composite.DiscJockey::getClass() [326 time(s)]

wait(long)
	---> structural.composite.DiscJockey::wait(long) [326 time(s)]

wait(long,int)
	---> structural.composite.DiscJockey::wait(long,int) [326 time(s)]

wait()
	---> structural.composite.DiscJockey::wait() [326 time(s)]

notifyAll()
	---> structural.composite.DiscJockey::notifyAll() [326 time(s)]

description()
	---> structural.decorator.Beverage::description() [326 time(s)]

equals(java.lang.Object)
	---> structural.decorator.Beverage::equals(java.lang.Object) [326 time(s)]

registerNatives()
	---> structural.decorator.Beverage::registerNatives() [326 time(s)]

notify()
	---> structural.decorator.Beverage::notify() [326 time(s)]

hashCode()
	---> structural.decorator.Beverage::hashCode() [326 time(s)]

price()
	---> structural.decorator.Beverage::price() [326 time(s)]

finalize()
	---> structural.decorator.Beverage::finalize() [326 time(s)]

toString()
	---> structural.decorator.Beverage::toString() [326 time(s)]

clone()
	---> structural.decorator.Beverage::clone() [326 time(s)]

structural.decorator.Espresso::getClass()
	---> structural.decorator.Beverage::getClass() [326 time(s)]

wait(long)
	---> structural.decorator.Beverage::wait(long) [326 time(s)]

wait(long,int)
	---> structural.decorator.Beverage::wait(long,int) [326 time(s)]

wait()
	---> structural.decorator.Beverage::wait() [326 time(s)]

notifyAll()
	---> structural.decorator.Beverage::notifyAll() [326 time(s)]

description()
	---> structural.decorator.Beverage::description() [326 time(s)]

equals(java.lang.Object)
	---> structural.decorator.Beverage::equals(java.lang.Object) [326 time(s)]

registerNatives()
	---> structural.decorator.Beverage::registerNatives() [326 time(s)]

notify()
	---> structural.decorator.Beverage::notify() [326 time(s)]

hashCode()
	---> structural.decorator.Beverage::hashCode() [326 time(s)]

price()
	---> structural.decorator.Beverage::price() [326 time(s)]

finalize()
	---> structural.decorator.Beverage::finalize() [326 time(s)]

toString()
	---> structural.decorator.Beverage::toString() [326 time(s)]

clone()
	---> structural.decorator.Beverage::clone() [326 time(s)]

price()
	---> structural.decorator.Beverage::price() [326 time(s)]

description()
	---> structural.decorator.Beverage::description() [326 time(s)]

structural.decorator.SugarDecorator::getClass()
	---> structural.decorator.Beverage::getClass() [326 time(s)]

wait(long)
	---> structural.decorator.Beverage::wait(long) [326 time(s)]

wait(long,int)
	---> structural.decorator.Beverage::wait(long,int) [326 time(s)]

wait()
	---> structural.decorator.Beverage::wait() [326 time(s)]

notifyAll()
	---> structural.decorator.Beverage::notifyAll() [326 time(s)]

description()
	---> structural.decorator.Beverage::description() [327 time(s)]

equals(java.lang.Object)
	---> structural.decorator.Beverage::equals(java.lang.Object) [327 time(s)]

registerNatives()
	---> structural.decorator.Beverage::registerNatives() [327 time(s)]

notify()
	---> structural.decorator.Beverage::notify() [327 time(s)]

hashCode()
	---> structural.decorator.Beverage::hashCode() [327 time(s)]

price()
	---> structural.decorator.Beverage::price() [328 time(s)]

finalize()
	---> structural.decorator.Beverage::finalize() [328 time(s)]

toString()
	---> structural.decorator.Beverage::toString() [328 time(s)]

clone()
	---> structural.decorator.Beverage::clone() [328 time(s)]

structural.decorator.Tea::getClass()
	---> structural.decorator.Beverage::getClass() [328 time(s)]

wait(long)
	---> structural.decorator.Beverage::wait(long) [328 time(s)]

wait(long,int)
	---> structural.decorator.Beverage::wait(long,int) [328 time(s)]

wait()
	---> structural.decorator.Beverage::wait() [328 time(s)]

notifyAll()
	---> structural.decorator.Beverage::notifyAll() [328 time(s)]

description()
	---> structural.decorator.Beverage::description() [328 time(s)]

equals(java.lang.Object)
	---> structural.decorator.Beverage::equals(java.lang.Object) [328 time(s)]

registerNatives()
	---> structural.decorator.Beverage::registerNatives() [328 time(s)]

notify()
	---> structural.decorator.Beverage::notify() [328 time(s)]

hashCode()
	---> structural.decorator.Beverage::hashCode() [328 time(s)]

price()
	---> structural.decorator.Beverage::price() [328 time(s)]

finalize()
	---> structural.decorator.Beverage::finalize() [328 time(s)]

toString()
	---> structural.decorator.Beverage::toString() [328 time(s)]

clone()
	---> structural.decorator.Beverage::clone() [328 time(s)]

structural.decorator.Test::getClass()
	---> structural.decorator.Beverage::getClass() [328 time(s)]

wait(long)
	---> structural.decorator.Beverage::wait(long) [328 time(s)]

wait(long,int)
	---> structural.decorator.Beverage::wait(long,int) [328 time(s)]

wait()
	---> structural.decorator.Beverage::wait() [328 time(s)]

notifyAll()
	---> structural.decorator.Beverage::notifyAll() [328 time(s)]

equals(java.lang.Object)
	---> structural.decorator.Beverage::equals(java.lang.Object) [328 time(s)]

main(java.lang.String[])
	---> structural.decorator.Beverage::main(java.lang.String[]) [328 time(s)]

displayOrder(structural.decorator.Beverage)
	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [329 time(s)]

registerNatives()
	---> structural.decorator.Beverage::registerNatives() [329 time(s)]

notify()
	---> structural.decorator.Beverage::notify() [329 time(s)]

hashCode()
	---> structural.decorator.Beverage::hashCode() [329 time(s)]

beveragesMenu()
	---> structural.decorator.Beverage::beveragesMenu() [329 time(s)]

selectBeverage(java.util.Scanner)
	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [329 time(s)]

selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner)
	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [329 time(s)]

orderBeverage()
	---> structural.decorator.Beverage::orderBeverage() [329 time(s)]

finalize()
	---> structural.decorator.Beverage::finalize() [329 time(s)]

toString()
	---> structural.decorator.Beverage::toString() [329 time(s)]

clone()
	---> structural.decorator.Beverage::clone() [329 time(s)]

additionalIngredientsMenu()
	---> structural.decorator.Beverage::additionalIngredientsMenu() [329 time(s)]

structural.facade.BankAccount::getClass()
	---> structural.decorator.Beverage::getClass() [329 time(s)]

wait(long)
	---> structural.decorator.Beverage::wait(long) [329 time(s)]

wait(long,int)
	---> structural.decorator.Beverage::wait(long,int) [329 time(s)]

wait()
	---> structural.decorator.Beverage::wait() [329 time(s)]

notifyAll()
	---> structural.decorator.Beverage::notifyAll() [329 time(s)]

equals(java.lang.Object)
	---> structural.decorator.Beverage::equals(java.lang.Object) [329 time(s)]

setNumber(int)
	---> structural.decorator.Beverage::setNumber(int) [329 time(s)]

registerNatives()
	---> structural.decorator.Beverage::registerNatives() [329 time(s)]

notify()
	---> structural.decorator.Beverage::notify() [329 time(s)]

getNumber()
	---> structural.decorator.Beverage::getNumber() [329 time(s)]

setSecurityCode(int)
	---> structural.decorator.Beverage::setSecurityCode(int) [329 time(s)]

hashCode()
	---> structural.decorator.Beverage::hashCode() [329 time(s)]

getBalance()
	---> structural.decorator.Beverage::getBalance() [329 time(s)]

getSecurityCode()
	---> structural.decorator.Beverage::getSecurityCode() [329 time(s)]

finalize()
	---> structural.decorator.Beverage::finalize() [329 time(s)]

toString()
	---> structural.decorator.Beverage::toString() [329 time(s)]

clone()
	---> structural.decorator.Beverage::clone() [329 time(s)]

setBalance(double)
	---> structural.decorator.Beverage::setBalance(double) [329 time(s)]

structural.facade.BankAccountBalanceSystem::getClass()
	---> structural.decorator.Beverage::getClass() [329 time(s)]

wait(long)
	---> structural.decorator.Beverage::wait(long) [329 time(s)]

wait(long,int)
	---> structural.decorator.Beverage::wait(long,int) [329 time(s)]

wait()
	---> structural.decorator.Beverage::wait() [329 time(s)]

notifyAll()
	---> structural.decorator.Beverage::notifyAll() [329 time(s)]

canWithdraw(double)
	---> structural.facade.BankAccount::canWithdraw(double) [329 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccount::equals(java.lang.Object) [329 time(s)]

registerNatives()
	---> structural.facade.BankAccount::registerNatives() [329 time(s)]

getAccountBalance()
	---> structural.facade.BankAccount::getAccountBalance() [329 time(s)]

notify()
	---> structural.facade.BankAccount::notify() [329 time(s)]

hashCode()
	---> structural.facade.BankAccount::hashCode() [329 time(s)]

deposit(double)
	---> structural.facade.BankAccountBalanceSystem::deposit(double) [331 time(s)]

finalize()
	---> structural.facade.BankAccountBalanceSystem::finalize() [331 time(s)]

toString()
	---> structural.facade.BankAccountBalanceSystem::toString() [331 time(s)]

clone()
	---> structural.facade.BankAccountBalanceSystem::clone() [331 time(s)]

withdraw(double)
	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [335 time(s)]

structural.facade.BankAccountFacade::getClass()
	---> structural.facade.BankAccountBalanceSystem::getClass() [335 time(s)]

wait(long)
	---> structural.facade.BankAccountBalanceSystem::wait(long) [335 time(s)]

wait(long,int)
	---> structural.facade.BankAccountBalanceSystem::wait(long,int) [335 time(s)]

wait()
	---> structural.facade.BankAccountBalanceSystem::wait() [335 time(s)]

notifyAll()
	---> structural.facade.BankAccountBalanceSystem::notifyAll() [335 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccountBalanceSystem::equals(java.lang.Object) [335 time(s)]

registerNatives()
	---> structural.facade.BankAccountBalanceSystem::registerNatives() [335 time(s)]

depositCash(double)
	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [337 time(s)]

notify()
	---> structural.facade.BankAccountBalanceSystem::notify() [337 time(s)]

hashCode()
	---> structural.facade.BankAccountBalanceSystem::hashCode() [337 time(s)]

getSecurityCode()
	---> structural.facade.BankAccountBalanceSystem::getSecurityCode() [337 time(s)]

getAccountNumber()
	---> structural.facade.BankAccountBalanceSystem::getAccountNumber() [337 time(s)]

fetchBankAccount()
	---> structural.facade.BankAccountBalanceSystem::fetchBankAccount() [337 time(s)]

withdrawCash(double)
	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [340 time(s)]

finalize()
	---> structural.facade.BankAccountBalanceSystem::finalize() [340 time(s)]

toString()
	---> structural.facade.BankAccountBalanceSystem::toString() [340 time(s)]

clone()
	---> structural.facade.BankAccountBalanceSystem::clone() [340 time(s)]

structural.facade.BankAccountNumberChecker::getClass()
	---> structural.facade.BankAccountBalanceSystem::getClass() [340 time(s)]

wait(long)
	---> structural.facade.BankAccountBalanceSystem::wait(long) [340 time(s)]

wait(long,int)
	---> structural.facade.BankAccountBalanceSystem::wait(long,int) [340 time(s)]

wait()
	---> structural.facade.BankAccountBalanceSystem::wait() [340 time(s)]

notifyAll()
	---> structural.facade.BankAccountBalanceSystem::notifyAll() [340 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccountBalanceSystem::equals(java.lang.Object) [340 time(s)]

registerNatives()
	---> structural.facade.BankAccountBalanceSystem::registerNatives() [340 time(s)]

match(int)
	---> structural.facade.BankAccountNumberChecker::match(int) [340 time(s)]

notify()
	---> structural.facade.BankAccountNumberChecker::notify() [340 time(s)]

hashCode()
	---> structural.facade.BankAccountNumberChecker::hashCode() [340 time(s)]

getAccountNumber()
	---> structural.facade.BankAccount::getAccountNumber() [340 time(s)]

finalize()
	---> structural.facade.BankAccount::finalize() [340 time(s)]

toString()
	---> structural.facade.BankAccount::toString() [340 time(s)]

clone()
	---> structural.facade.BankAccount::clone() [340 time(s)]

structural.facade.BankAccountSecurityCodeChecker::getClass()
	---> structural.facade.BankAccount::getClass() [340 time(s)]

wait(long)
	---> structural.facade.BankAccount::wait(long) [340 time(s)]

wait(long,int)
	---> structural.facade.BankAccount::wait(long,int) [340 time(s)]

wait()
	---> structural.facade.BankAccount::wait() [340 time(s)]

notifyAll()
	---> structural.facade.BankAccount::notifyAll() [340 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccount::equals(java.lang.Object) [340 time(s)]

registerNatives()
	---> structural.facade.BankAccount::registerNatives() [340 time(s)]

match(int)
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [341 time(s)]

notify()
	---> structural.facade.BankAccountSecurityCodeChecker::notify() [341 time(s)]

hashCode()
	---> structural.facade.BankAccountSecurityCodeChecker::hashCode() [341 time(s)]

getAccountSecurityCode()
	---> structural.facade.BankAccount::getAccountSecurityCode() [341 time(s)]

finalize()
	---> structural.facade.BankAccount::finalize() [341 time(s)]

toString()
	---> structural.facade.BankAccount::toString() [341 time(s)]

clone()
	---> structural.facade.BankAccount::clone() [341 time(s)]

structural.facade.BankAccountWelcomeWindow::getClass()
	---> structural.facade.BankAccount::getClass() [341 time(s)]

wait(long)
	---> structural.facade.BankAccount::wait(long) [341 time(s)]

wait(long,int)
	---> structural.facade.BankAccount::wait(long,int) [341 time(s)]

wait()
	---> structural.facade.BankAccount::wait() [341 time(s)]

notifyAll()
	---> structural.facade.BankAccount::notifyAll() [341 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccount::equals(java.lang.Object) [341 time(s)]

registerNatives()
	---> structural.facade.BankAccount::registerNatives() [341 time(s)]

notify()
	---> structural.facade.BankAccount::notify() [341 time(s)]

hashCode()
	---> structural.facade.BankAccount::hashCode() [341 time(s)]

setWelcomeMessage()
	---> structural.facade.BankAccount::setWelcomeMessage() [342 time(s)]

finalize()
	---> structural.facade.BankAccount::finalize() [342 time(s)]

toString()
	---> structural.facade.BankAccount::toString() [342 time(s)]

clone()
	---> structural.facade.BankAccount::clone() [342 time(s)]

structural.facade.Test::getClass()
	---> structural.facade.BankAccount::getClass() [342 time(s)]

wait(long)
	---> structural.facade.BankAccount::wait(long) [342 time(s)]

wait(long,int)
	---> structural.facade.BankAccount::wait(long,int) [342 time(s)]

wait()
	---> structural.facade.BankAccount::wait() [342 time(s)]

notifyAll()
	---> structural.facade.BankAccount::notifyAll() [342 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccount::equals(java.lang.Object) [342 time(s)]

main(java.lang.String[])
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [345 time(s)]

registerNatives()
	---> structural.facade.BankAccountFacade::registerNatives() [345 time(s)]

notify()
	---> structural.facade.BankAccountFacade::notify() [345 time(s)]

hashCode()
	---> structural.facade.BankAccountFacade::hashCode() [345 time(s)]

finalize()
	---> structural.facade.BankAccountFacade::finalize() [345 time(s)]

toString()
	---> structural.facade.BankAccountFacade::toString() [345 time(s)]

clone()
	---> structural.facade.BankAccountFacade::clone() [345 time(s)]

structural.flyweight.Circle::getClass()
	---> structural.facade.BankAccountFacade::getClass() [345 time(s)]

wait(long)
	---> structural.facade.BankAccountFacade::wait(long) [345 time(s)]

wait(long,int)
	---> structural.facade.BankAccountFacade::wait(long,int) [345 time(s)]

wait()
	---> structural.facade.BankAccountFacade::wait() [345 time(s)]

notifyAll()
	---> structural.facade.BankAccountFacade::notifyAll() [345 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [345 time(s)]

registerNatives()
	---> structural.facade.BankAccountFacade::registerNatives() [345 time(s)]

draw(structural.flyweight.Position)
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [345 time(s)]

getRadius()
	---> structural.facade.BankAccountFacade::getRadius() [345 time(s)]

notify()
	---> structural.facade.BankAccountFacade::notify() [345 time(s)]

setRadius(int)
	---> structural.facade.BankAccountFacade::setRadius(int) [345 time(s)]

hashCode()
	---> structural.facade.BankAccountFacade::hashCode() [345 time(s)]

finalize()
	---> structural.facade.BankAccountFacade::finalize() [345 time(s)]

toString()
	---> structural.facade.BankAccountFacade::toString() [345 time(s)]

clone()
	---> structural.facade.BankAccountFacade::clone() [345 time(s)]

structural.flyweight.Position::getClass()
	---> structural.facade.BankAccountFacade::getClass() [345 time(s)]

wait(long)
	---> structural.facade.BankAccountFacade::wait(long) [345 time(s)]

wait(long,int)
	---> structural.facade.BankAccountFacade::wait(long,int) [345 time(s)]

wait()
	---> structural.facade.BankAccountFacade::wait() [345 time(s)]

setX(double)
	---> structural.facade.BankAccountFacade::setX(double) [345 time(s)]

notifyAll()
	---> structural.facade.BankAccountFacade::notifyAll() [345 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [345 time(s)]

registerNatives()
	---> structural.facade.BankAccountFacade::registerNatives() [345 time(s)]

setY(double)
	---> structural.facade.BankAccountFacade::setY(double) [345 time(s)]

notify()
	---> structural.facade.BankAccountFacade::notify() [345 time(s)]

hashCode()
	---> structural.facade.BankAccountFacade::hashCode() [345 time(s)]

getX()
	---> structural.facade.BankAccountFacade::getX() [345 time(s)]

getY()
	---> structural.facade.BankAccountFacade::getY() [345 time(s)]

toString()
	---> structural.facade.BankAccountFacade::toString() [345 time(s)]

finalize()
	---> structural.facade.BankAccountFacade::finalize() [345 time(s)]

clone()
	---> structural.facade.BankAccountFacade::clone() [345 time(s)]

draw(structural.flyweight.Position)
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [345 time(s)]

structural.flyweight.ShapeFactory::getClass()
	---> structural.facade.BankAccountFacade::getClass() [345 time(s)]

wait(long)
	---> structural.facade.BankAccountFacade::wait(long) [345 time(s)]

wait(long,int)
	---> structural.facade.BankAccountFacade::wait(long,int) [345 time(s)]

wait()
	---> structural.facade.BankAccountFacade::wait() [345 time(s)]

getCircle(java.lang.String)
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [345 time(s)]

notifyAll()
	---> structural.facade.BankAccountFacade::notifyAll() [345 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [345 time(s)]

registerNatives()
	---> structural.facade.BankAccountFacade::registerNatives() [345 time(s)]

notify()
	---> structural.facade.BankAccountFacade::notify() [345 time(s)]

hashCode()
	---> structural.facade.BankAccountFacade::hashCode() [345 time(s)]

finalize()
	---> structural.facade.BankAccountFacade::finalize() [345 time(s)]

toString()
	---> structural.facade.BankAccountFacade::toString() [345 time(s)]

clone()
	---> structural.facade.BankAccountFacade::clone() [345 time(s)]

structural.flyweight.Test::getClass()
	---> structural.facade.BankAccountFacade::getClass() [345 time(s)]

wait(long)
	---> structural.facade.BankAccountFacade::wait(long) [345 time(s)]

wait(long,int)
	---> structural.facade.BankAccountFacade::wait(long,int) [345 time(s)]

wait()
	---> structural.facade.BankAccountFacade::wait() [345 time(s)]

notifyAll()
	---> structural.facade.BankAccountFacade::notifyAll() [345 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [345 time(s)]

main(java.lang.String[])
	---> structural.flyweight.Circle::main(java.lang.String[]) [347 time(s)]

registerNatives()
	---> structural.flyweight.Circle::registerNatives() [347 time(s)]

notify()
	---> structural.flyweight.Circle::notify() [347 time(s)]

getRandomRadius()
	---> structural.flyweight.Circle::getRandomRadius() [347 time(s)]

hashCode()
	---> structural.flyweight.Circle::hashCode() [347 time(s)]

getRandomX()
	---> structural.flyweight.Circle::getRandomX() [347 time(s)]

getRandomY()
	---> structural.flyweight.Circle::getRandomY() [347 time(s)]

finalize()
	---> structural.flyweight.Circle::finalize() [347 time(s)]

toString()
	---> structural.flyweight.Circle::toString() [347 time(s)]

clone()
	---> structural.flyweight.Circle::clone() [347 time(s)]

getRandomColor()
	---> structural.flyweight.Circle::getRandomColor() [347 time(s)]

connectTo(java.lang.String)
	---> structural.flyweight.Circle::connectTo(java.lang.String) [347 time(s)]

structural.proxy.ProxyInternet::getClass()
	---> structural.flyweight.Circle::getClass() [347 time(s)]

wait(long)
	---> structural.flyweight.Circle::wait(long) [347 time(s)]

wait(long,int)
	---> structural.flyweight.Circle::wait(long,int) [347 time(s)]

wait()
	---> structural.flyweight.Circle::wait() [347 time(s)]

notifyAll()
	---> structural.flyweight.Circle::notifyAll() [347 time(s)]

equals(java.lang.Object)
	---> structural.flyweight.Circle::equals(java.lang.Object) [347 time(s)]

registerNatives()
	---> structural.flyweight.Circle::registerNatives() [347 time(s)]

notify()
	---> structural.flyweight.Circle::notify() [347 time(s)]

hashCode()
	---> structural.flyweight.Circle::hashCode() [347 time(s)]

finalize()
	---> structural.flyweight.Circle::finalize() [347 time(s)]

toString()
	---> structural.flyweight.Circle::toString() [347 time(s)]

clone()
	---> structural.flyweight.Circle::clone() [347 time(s)]

connectTo(java.lang.String)
	---> structural.proxy.Internet::connectTo(java.lang.String) [347 time(s)]

structural.proxy.RealInternet::getClass()
	---> structural.proxy.Internet::getClass() [347 time(s)]

wait(long)
	---> structural.proxy.Internet::wait(long) [347 time(s)]

wait(long,int)
	---> structural.proxy.Internet::wait(long,int) [347 time(s)]

wait()
	---> structural.proxy.Internet::wait() [347 time(s)]

notifyAll()
	---> structural.proxy.Internet::notifyAll() [347 time(s)]

equals(java.lang.Object)
	---> structural.proxy.Internet::equals(java.lang.Object) [347 time(s)]

registerNatives()
	---> structural.proxy.Internet::registerNatives() [347 time(s)]

notify()
	---> structural.proxy.Internet::notify() [347 time(s)]

hashCode()
	---> structural.proxy.Internet::hashCode() [347 time(s)]

finalize()
	---> structural.proxy.Internet::finalize() [347 time(s)]

toString()
	---> structural.proxy.Internet::toString() [347 time(s)]

clone()
	---> structural.proxy.Internet::clone() [347 time(s)]

connectTo(java.lang.String)
	---> structural.proxy.Internet::connectTo(java.lang.String) [347 time(s)]

structural.proxy.Test::getClass()
	---> structural.proxy.Internet::getClass() [347 time(s)]

wait(long)
	---> structural.proxy.Internet::wait(long) [347 time(s)]

wait(long,int)
	---> structural.proxy.Internet::wait(long,int) [347 time(s)]

wait()
	---> structural.proxy.Internet::wait() [347 time(s)]

notifyAll()
	---> structural.proxy.Internet::notifyAll() [347 time(s)]

equals(java.lang.Object)
	---> structural.proxy.Internet::equals(java.lang.Object) [347 time(s)]

main(java.lang.String[])
	---> structural.proxy.Internet::main(java.lang.String[]) [349 time(s)]

registerNatives()
	---> structural.proxy.Internet::registerNatives() [349 time(s)]

notify()
	---> structural.proxy.Internet::notify() [349 time(s)]

hashCode()
	---> structural.proxy.Internet::hashCode() [349 time(s)]

finalize()
	---> structural.proxy.Internet::finalize() [349 time(s)]

toString()
	---> structural.proxy.Internet::toString() [349 time(s)]

clone()
	---> structural.proxy.Internet::clone() [349 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger::getClass()
wait(long)
wait(long,int)
wait()
write(behavioral.chain_of_responsibility.LogRequest)
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
setNextLogger(behavioral.chain_of_responsibility.ILogger)
finalize()
toString()
clone()
behavioral.chain_of_responsibility.ErrorLogger::getClass()
wait(long)
wait(long,int)
wait()
write(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
setNextLogger(behavioral.chain_of_responsibility.ILogger)
finalize()
toString()
clone()
behavioral.chain_of_responsibility.FileLogger::getClass()
wait(long)
wait(long,int)
wait()
write(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
setNextLogger(behavioral.chain_of_responsibility.ILogger)
getFilePath()
finalize()
toString()
clone()
setFilePath(java.lang.String)
behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest)
setNextLogger(behavioral.chain_of_responsibility.ILogger)
behavioral.chain_of_responsibility.LogRequest::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getMessage()
notify()
setLevel(behavioral.chain_of_responsibility.LogRequestLevel)
setMessage(java.lang.String)
getLevel()
hashCode()
finalize()
toString()
clone()
behavioral.chain_of_responsibility.LogRequestLevel::value()
behavioral.chain_of_responsibility.Logger::getClass()
wait(long)
wait(long,int)
wait()
write(behavioral.chain_of_responsibility.LogRequest)
log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
setNextLogger(behavioral.chain_of_responsibility.ILogger)
finalize()
toString()
clone()
behavioral.chain_of_responsibility.StandardLogRequestLevel::clone()
compareTo(java.lang.Enum)
describeConstable()
equals(java.lang.Object)
finalize()
getDeclaringClass()
hashCode()
name()
ordinal()
readObject(java.io.ObjectInputStream)
readObjectNoData()
toString()
value()
valueOf(java.lang.Class,java.lang.String)
valueOf(java.lang.String)
values()
behavioral.chain_of_responsibility.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
getChainOfLoggers()
	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

finalize()
toString()
clone()
behavioral.command.Command::getName()
undo()
execute()
behavioral.command.CommandManager::getClass()
wait(long)
wait(long,int)
wait()
getRegistryKey(java.lang.Class)
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
history()
	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

redo()
	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

notify()
execute(behavioral.command.Command)
	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

hashCode()
undo()
	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

behavioral.command.SwitchChannelCommand::getName()
	---> behavioral.command.TV::getName() [0 time(s)]

getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute()
	---> behavioral.command.TV::execute() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

hashCode()
undo()
	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

finalize()
toString()
clone()
behavioral.command.SwitchOffCommand::getName()
	---> behavioral.command.TV::getName() [1 time(s)]

getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute()
	---> behavioral.command.TV::execute() [1 time(s)]

hashCode()
undo()
	---> behavioral.command.TV::undo() [1 time(s)]

finalize()
toString()
clone()
behavioral.command.SwitchOnCommand::getName()
	---> behavioral.command.TV::getName() [1 time(s)]

getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute()
	---> behavioral.command.TV::execute() [1 time(s)]

hashCode()
undo()
	---> behavioral.command.TV::undo() [1 time(s)]

finalize()
toString()
clone()
behavioral.command.TV::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
switchChannel(int)
registerNatives()
notify()
switchOff()
hashCode()
getChannel()
isOn()
finalize()
toString()
clone()
switchOn()
behavioral.command.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.command.TV::main(java.lang.String[]) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.interpreter.AndExpression::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

finalize()
toString()
clone()
behavioral.interpreter.BinaryExpression::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
interpret(java.lang.String)
finalize()
toString()
clone()
behavioral.interpreter.Expression::interpret(java.lang.String)
behavioral.interpreter.OrExpression::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

finalize()
toString()
clone()
behavioral.interpreter.TerminalExpression::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

finalize()
toString()
clone()
behavioral.interpreter.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
getIsFemaleExpression()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
getIsMarriedWomanExpression()
	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

finalize()
toString()
clone()
behavioral.iterator.DiscJockey::getClass()
wait(long)
wait(long,int)
wait()
displaySongs()
	---> structural.composite.Song::displaySongs() [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.iterator.Song::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getSongName()
notify()
hashCode()
getBandName()
toString()
	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

finalize()
clone()
getYearReleased()
behavioral.iterator.SongAggregate::iterator()
spliterator()
forEach(java.util.function.Consumer)
addSong(java.lang.String,java.lang.String,int)
behavioral.iterator.SongArray::getClass()
wait(long)
wait(long,int)
wait()
spliterator()
notifyAll()
forEach(java.util.function.Consumer)
equals(java.lang.Object)
length()
registerNatives()
notify()
hashCode()
iterator()
	---> structural.composite.Song::iterator() [0 time(s)]

	---> structural.composite.Song::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

getFilledArray()
	---> behavioral.iterator.SongArray::getFilledArray() [0 time(s)]

finalize()
toString()
clone()
addSong(java.lang.String,java.lang.String,int)
behavioral.iterator.SongHashtable::getClass()
wait(long)
wait(long,int)
wait()
spliterator()
notifyAll()
forEach(java.util.function.Consumer)
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
iterator()
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

finalize()
toString()
clone()
addSong(java.lang.String,java.lang.String,int)
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList::getClass()
wait(long)
wait(long,int)
wait()
spliterator()
notifyAll()
forEach(java.util.function.Consumer)
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
iterator()
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

finalize()
toString()
clone()
addSong(java.lang.String,java.lang.String,int)
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [0 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [0 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [0 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [0 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [0 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.mediator.ChatRoom::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
addUser(behavioral.mediator.User)
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [0 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
sendMessage(java.lang.String,java.lang.String)
	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

finalize()
toString()
clone()
behavioral.mediator.ChatUser::getName()
getClass()
wait(long)
wait(long,int)
wait()
receive(java.lang.String)
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [0 time(s)]

notifyAll()
equals(java.lang.Object)
getId()
registerNatives()
notify()
hashCode()
getRoom()
finalize()
toString()
clone()
send(java.lang.String,java.lang.String)
	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

behavioral.mediator.IChatRoom::sendMessage(java.lang.String,java.lang.String)
addUser(behavioral.mediator.User)
behavioral.mediator.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.mediator.User::getName()
getClass()
wait(long)
wait(long,int)
wait()
receive(java.lang.String)
notifyAll()
equals(java.lang.Object)
getId()
registerNatives()
notify()
hashCode()
getRoom()
finalize()
toString()
clone()
send(java.lang.String,java.lang.String)
behavioral.memento.CareTaker::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
addMemento(behavioral.memento.Memento)
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

get(int)
	---> behavioral.mediator.User::get(int) [0 time(s)]

finalize()
toString()
clone()
behavioral.memento.Memento::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
getState()
finalize()
toString()
clone()
behavioral.memento.Originator::getClass()
wait(long)
wait(long,int)
wait()
restoreState(behavioral.memento.Memento)
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

setState(java.lang.String)
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
getState()
externalizeState()
finalize()
toString()
clone()
behavioral.memento.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [0 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [0 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [0 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.observer.Observer::update()
behavioral.observer.StockGrabber::getClass()
wait(long)
wait(long,int)
wait()
setGoogleStock(double)
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [0 time(s)]

notifyObserver()
	---> behavioral.observer.Observer::notifyObserver() [0 time(s)]

notifyAll()
getIBMStock()
equals(java.lang.Object)
unregister(behavioral.observer.Observer)
	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

registerNatives()
notify()
setAppleStock(double)
	---> behavioral.observer.StockGrabber::setAppleStock(double) [0 time(s)]

getGoogleStock()
hashCode()
setIBMStock(double)
	---> behavioral.observer.StockGrabber::setIBMStock(double) [0 time(s)]

getAppleStock()
register(behavioral.observer.Observer)
	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

finalize()
toString()
clone()
behavioral.observer.StockObserver::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
update()
	---> behavioral.observer.StockGrabber::update() [0 time(s)]

	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockObserver::update() [1 time(s)]

displayPrices()
	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

notify()
hashCode()
finalize()
toString()
clone()
behavioral.observer.Subject::notifyObserver()
register(behavioral.observer.Observer)
unregister(behavioral.observer.Observer)
behavioral.observer.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.state.ATMMachine::getClass()
getCashInMachine()
wait(long)
wait(long,int)
wait()
insertCard()
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

ejectCard()
	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

requestCash(int)
	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

notifyAll()
setATMState(behavioral.state.ATMState)
insertPin(int)
	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

equals(java.lang.Object)
registerNatives()
getATMState()
getNoCardState()
notify()
getHasCardState()
hashCode()
getNoCashState()
getCorrectPinState()
finalize()
toString()
clone()
setCashInMachine(int)
behavioral.state.ATMState::getClass()
wait(long)
wait(long,int)
wait()
insertCard()
ejectCard()
requestCash(int)
notifyAll()
insertPin(int)
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.state.CorrectPin::getClass()
wait(long)
wait(long,int)
wait()
insertCard()
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

ejectCard()
	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

requestCash(int)
	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

notifyAll()
insertPin(int)
	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.state.HasCard::getClass()
wait(long)
wait(long,int)
wait()
insertCard()
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

ejectCard()
	---> behavioral.state.ATMMachine::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

requestCash(int)
	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

notifyAll()
insertPin(int)
	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [1 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.state.IATMState::insertCard()
ejectCard()
requestCash(int)
insertPin(int)
behavioral.state.NoCard::getClass()
wait(long)
wait(long,int)
wait()
insertCard()
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

ejectCard()
	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

requestCash(int)
	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

notifyAll()
insertPin(int)
	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
defaultMessage()
	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

finalize()
toString()
clone()
behavioral.state.NoCash::getClass()
wait(long)
wait(long,int)
wait()
insertCard()
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

ejectCard()
	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

requestCash(int)
	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

notifyAll()
insertPin(int)
	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
defaultMessage()
	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

finalize()
toString()
clone()
behavioral.state.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.strategy.Add::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute(int,int)
hashCode()
finalize()
toString()
clone()
behavioral.strategy.ArithmeticOperation::execute(int,int)
behavioral.strategy.Calculator::getClass()
wait(long)
wait(long,int)
wait()
reset()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
getResult()
hashCode()
computeOperation(int,int)
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [0 time(s)]

setOperation(behavioral.strategy.ArithmeticOperation)
finalize()
toString()
clone()
behavioral.strategy.Divide::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute(int,int)
hashCode()
finalize()
toString()
clone()
behavioral.strategy.Modulo::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute(int,int)
hashCode()
finalize()
toString()
clone()
behavioral.strategy.Multiply::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute(int,int)
hashCode()
finalize()
toString()
clone()
behavioral.strategy.Subtract::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute(int,int)
hashCode()
finalize()
toString()
clone()
behavioral.strategy.Test::getClass()
wait(long)
wait(long,int)
wait()
computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int)
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.template_method.Basketball::getClass()
play()
	---> behavioral.template_method.Game::play() [0 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
start()
	---> behavioral.template_method.Game::start() [0 time(s)]

registerNatives()
notify()
hashCode()
initialize()
	---> behavioral.template_method.Game::initialize() [0 time(s)]

finalize()
toString()
clone()
end()
	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football::getClass()
play()
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
start()
	---> behavioral.template_method.Game::start() [0 time(s)]

registerNatives()
notify()
hashCode()
initialize()
	---> behavioral.template_method.Game::initialize() [0 time(s)]

finalize()
toString()
clone()
end()
	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game::getClass()
play()
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
start()
registerNatives()
notify()
hashCode()
initialize()
finalize()
toString()
clone()
end()
behavioral.template_method.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [0 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.visitor.Liquor::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
setPrice(double)
notifyAll()
equals(java.lang.Object)
getPrice()
registerNatives()
notify()
accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

hashCode()
finalize()
toString()
clone()
behavioral.visitor.Necessity::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
setPrice(double)
notifyAll()
equals(java.lang.Object)
getPrice()
registerNatives()
notify()
accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

hashCode()
finalize()
toString()
clone()
behavioral.visitor.Product::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
setPrice(double)
notifyAll()
equals(java.lang.Object)
getPrice()
registerNatives()
notify()
accept(behavioral.visitor.Visitor)
hashCode()
finalize()
toString()
clone()
behavioral.visitor.TaxHolidayVisitor::getClass()
wait(long)
wait(long,int)
wait()
getComputedTax()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
computeTax(behavioral.visitor.Product)
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

getTaxRate()
hashCode()
finalize()
toString()
clone()
visit(behavioral.visitor.Liquor)
	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [0 time(s)]

visit(behavioral.visitor.Tobacco)
	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

visit(behavioral.visitor.Necessity)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [0 time(s)]

behavioral.visitor.TaxVisitor::getClass()
wait(long)
wait(long,int)
wait()
getComputedTax()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
computeTax(behavioral.visitor.Product)
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

getTaxRate()
hashCode()
finalize()
toString()
clone()
visit(behavioral.visitor.Liquor)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

visit(behavioral.visitor.Tobacco)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

visit(behavioral.visitor.Necessity)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor)
	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

finalize()
toString()
clone()
behavioral.visitor.Tobacco::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
setPrice(double)
notifyAll()
equals(java.lang.Object)
getPrice()
registerNatives()
notify()
accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

hashCode()
finalize()
toString()
clone()
behavioral.visitor.Visitable::accept(behavioral.visitor.Visitor)
behavioral.visitor.Visitor::visit(behavioral.visitor.Liquor)
visit(behavioral.visitor.Tobacco)
visit(behavioral.visitor.Necessity)
creational.abstract_factory.AbstractShapeFactory::getClass()
wait(long)
wait(long,int)
wait()
createShape(creational.abstract_factory.ShapeType)
getRegistryKey(java.lang.Class)
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.abstract_factory.Rectangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
draw()
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

notify()
hashCode()
finalize()
toString()
clone()
creational.abstract_factory.RoundedRectangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
draw()
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

notify()
hashCode()
finalize()
toString()
clone()
creational.abstract_factory.RoundedShapeFactory::getClass()
wait(long)
wait(long,int)
wait()
createShape(creational.abstract_factory.ShapeType)
getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.abstract_factory.RoundedShapeType::clone()
compareTo(java.lang.Enum)
describeConstable()
equals(java.lang.Object)
finalize()
getDeclaringClass()
hashCode()
name()
ordinal()
readObject(java.io.ObjectInputStream)
readObjectNoData()
toString()
valueOf(java.lang.Class,java.lang.String)
valueOf(java.lang.String)
values()
creational.abstract_factory.RoundedTriangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
draw()
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

notify()
hashCode()
finalize()
toString()
clone()
creational.abstract_factory.Shape::draw()
creational.abstract_factory.ShapeFactoryType::clone()
compareTo(java.lang.Enum)
describeConstable()
equals(java.lang.Object)
finalize()
getDeclaringClass()
hashCode()
name()
ordinal()
readObject(java.io.ObjectInputStream)
readObjectNoData()
toString()
valueOf(java.lang.Class,java.lang.String)
valueOf(java.lang.String)
values()
creational.abstract_factory.ShapeProducer::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
createFactory(creational.abstract_factory.ShapeFactoryType)
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType::creational.abstract_factory.StandardShapeFactory::getClass()
wait(long)
wait(long,int)
wait()
createShape(creational.abstract_factory.ShapeType)
getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.abstract_factory.StandardShapeType::clone()
compareTo(java.lang.Enum)
describeConstable()
equals(java.lang.Object)
finalize()
getDeclaringClass()
hashCode()
name()
ordinal()
readObject(java.io.ObjectInputStream)
readObjectNoData()
toString()
valueOf(java.lang.Class,java.lang.String)
valueOf(java.lang.String)
values()
creational.abstract_factory.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
creational.abstract_factory.Triangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
draw()
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

notify()
hashCode()
finalize()
toString()
clone()
creational.builder.IRobot::setTorso(java.lang.String)
setArms(java.lang.String)
setLegs(java.lang.String)
setHead(java.lang.String)
creational.builder.IRobotBuilder::buildArms()
buildHead()
getRobot()
buildTorso()
buildLegs()
creational.builder.OldRobotBuilder::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getRobot()
notify()
buildLegs()
	---> creational.builder.Robot::buildLegs() [0 time(s)]

buildArms()
	---> creational.builder.Robot::buildArms() [0 time(s)]

hashCode()
buildHead()
	---> creational.builder.Robot::buildHead() [0 time(s)]

finalize()
toString()
clone()
buildTorso()
	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.Robot::getClass()
wait(long)
wait(long,int)
wait()
setLegs(java.lang.String)
notifyAll()
equals(java.lang.Object)
setHead(java.lang.String)
registerNatives()
getTorso()
notify()
setTorso(java.lang.String)
hashCode()
setArms(java.lang.String)
getArms()
getHead()
toString()
	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

finalize()
clone()
getLegs()
creational.builder.RobotBuilder::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getRobot()
notify()
buildLegs()
buildArms()
hashCode()
buildHead()
finalize()
toString()
clone()
buildTorso()
creational.builder.RobotEngineer::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getRobot()
	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

notify()
hashCode()
constructRobot()
	---> creational.builder.IRobotBuilder::constructRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

setRobotBuilder(creational.builder.IRobotBuilder)
finalize()
toString()
clone()
creational.builder.SophisticatedRobotBuilder::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getRobot()
notify()
buildLegs()
	---> creational.builder.Robot::buildLegs() [1 time(s)]

buildArms()
	---> creational.builder.Robot::buildArms() [1 time(s)]

hashCode()
buildHead()
	---> creational.builder.Robot::buildHead() [1 time(s)]

finalize()
toString()
clone()
buildTorso()
	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
creational.factory.BigUFOEnemyShip::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
getAmtDamage()
setAmtDamage(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
followHeroShip()
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

hashCode()
enemyShipShoots()
	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

displayEnemyShip()
	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

finalize()
toString()
clone()
creational.factory.EnemyShip::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
getAmtDamage()
setAmtDamage(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
followHeroShip()
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

hashCode()
enemyShipShoots()
	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

displayEnemyShip()
	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

finalize()
toString()
clone()
creational.factory.EnemyShipFactory::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
createEnemyShip(java.lang.String)
finalize()
toString()
clone()
creational.factory.EnemyShipTesting::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
doStuffEnemy(creational.factory.EnemyShip)
	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

finalize()
toString()
clone()
creational.factory.RocketEnemyShip::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
getAmtDamage()
setAmtDamage(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
followHeroShip()
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

hashCode()
enemyShipShoots()
	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

displayEnemyShip()
	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

finalize()
toString()
clone()
creational.factory.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
doStuffEnemy(creational.factory.EnemyShip)
	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

finalize()
toString()
clone()
creational.factory.UFOEnemyShip::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
getAmtDamage()
setAmtDamage(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
followHeroShip()
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

hashCode()
enemyShipShoots()
	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

displayEnemyShip()
	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

finalize()
toString()
clone()
creational.prototype.Circle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
getId()
setPosition(creational.prototype.Position)
registerNatives()
draw()
	---> creational.factory.EnemyShip::draw() [0 time(s)]

getPosition()
notify()
hashCode()
getType()
setId(java.lang.String)
clone()
	---> creational.factory.EnemyShip::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

toString()
	---> creational.prototype.Shape::toString() [0 time(s)]

finalize()
creational.prototype.Position::getClass()
wait(long)
wait(long,int)
wait()
setX(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
setY(double)
notify()
hashCode()
getX()
getY()
clone()
	---> creational.prototype.Shape::clone() [0 time(s)]

toString()
	---> creational.prototype.Position::toString() [1 time(s)]

finalize()
creational.prototype.Rectangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
getId()
setPosition(creational.prototype.Position)
registerNatives()
draw()
	---> creational.prototype.Position::draw() [0 time(s)]

getPosition()
notify()
hashCode()
getType()
setId(java.lang.String)
clone()
	---> creational.prototype.Position::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

toString()
	---> creational.prototype.Shape::toString() [1 time(s)]

finalize()
creational.prototype.Shape::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
getId()
setPosition(creational.prototype.Position)
registerNatives()
draw()
getPosition()
notify()
hashCode()
getType()
setId(java.lang.String)
clone()
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

toString()
	---> creational.prototype.Shape::toString() [1 time(s)]

finalize()
creational.prototype.ShapeCache::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
getShape(java.lang.String)
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

hashCode()
displayCacheContent()
	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

finalize()
toString()
clone()
loadCache()
	---> creational.prototype.Circle::loadCache() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Triangle::loadCache() [1 time(s)]

	---> creational.prototype.Triangle::loadCache() [1 time(s)]

	---> creational.prototype.Triangle::loadCache() [0 time(s)]

	---> creational.prototype.Triangle::loadCache() [1 time(s)]

	---> creational.prototype.Rectangle::loadCache() [1 time(s)]

	---> creational.prototype.Rectangle::loadCache() [1 time(s)]

	---> creational.prototype.Rectangle::loadCache() [0 time(s)]

	---> creational.prototype.Rectangle::loadCache() [1 time(s)]

creational.prototype.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
creational.prototype.Triangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
getId()
setPosition(creational.prototype.Position)
registerNatives()
draw()
	---> creational.prototype.Shape::draw() [0 time(s)]

getPosition()
notify()
hashCode()
getType()
setId(java.lang.String)
clone()
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

toString()
	---> creational.prototype.Shape::toString() [1 time(s)]

finalize()
creational.singleton.ExtendedSingleton::getClass()
wait(long)
wait(long,int)
wait()
getRegistryKey(java.lang.Class)
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.singleton.ExtendedSingleton2::getClass()
wait(long)
wait(long,int)
wait()
getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.singleton.Singleton::getClass()
wait(long)
wait(long,int)
wait()
getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.singleton.SingletonRegistry::lookup(java.lang.String)
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
register(java.lang.String,creational.singleton.Singleton)
	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

finalize()
toString()
clone()
creational.singleton.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.adapter.EnemyAttacker::fireWeapon()
driveForward()
assignDriver(java.lang.String)
structural.adapter.EnemyRobot::getClass()
wait(long)
wait(long,int)
wait()
smashwithHands()
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

walkForward()
	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
reactToHuman(java.lang.String)
	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

finalize()
toString()
clone()
structural.adapter.EnemyRobotAdapter::getClass()
wait(long)
wait(long,int)
wait()
driveForward()
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
setRobot(structural.adapter.EnemyRobot)
fireWeapon()
	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

hashCode()
assignDriver(java.lang.String)
	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

finalize()
toString()
clone()
structural.adapter.EnemyTank::getClass()
wait(long)
wait(long,int)
wait()
driveForward()
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
fireWeapon()
	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

hashCode()
assignDriver(java.lang.String)
	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

finalize()
toString()
clone()
structural.adapter.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.adapter.TestEnemyAttackers::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.bridge.AdvancedRemote::getClass()
wait(long)
wait(long,int)
wait()
togglePower()
	---> structural.bridge.Device::togglePower() [0 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [0 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

notifyAll()
equals(java.lang.Object)
mute()
	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

channelDown()
	---> structural.bridge.Device::channelDown() [0 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [0 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

registerNatives()
notify()
hashCode()
volumeDown()
	---> structural.bridge.Device::volumeDown() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

volumeUp()
	---> structural.bridge.Device::volumeUp() [0 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [0 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

finalize()
toString()
clone()
channelUp()
	---> structural.bridge.Device::channelUp() [0 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [0 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

structural.bridge.Device::getName()
getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
setChannel(int)
equals(java.lang.Object)
registerNatives()
setVolume(int)
notify()
enable()
hashCode()
getVolume()
getChannel()
disable()
isEnabled()
finalize()
toString()
clone()
structural.bridge.Radio::getName()
getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
setChannel(int)
equals(java.lang.Object)
registerNatives()
setVolume(int)
notify()
enable()
hashCode()
getVolume()
getChannel()
disable()
isEnabled()
finalize()
toString()
clone()
structural.bridge.Remote::getClass()
wait(long)
wait(long,int)
wait()
togglePower()
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [0 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

notifyAll()
equals(java.lang.Object)
channelDown()
	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [0 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

registerNatives()
notify()
hashCode()
volumeDown()
	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

volumeUp()
	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [0 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

finalize()
toString()
clone()
channelUp()
	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [0 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

structural.bridge.TV::getName()
getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
setChannel(int)
equals(java.lang.Object)
registerNatives()
setVolume(int)
notify()
enable()
hashCode()
getVolume()
getChannel()
disable()
isEnabled()
finalize()
toString()
clone()
structural.bridge.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
ordinaryRemoteTest(structural.bridge.Remote)
	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [0 time(s)]

advancedRemoteTest(structural.bridge.AdvancedRemote)
	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [0 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [0 time(s)]

finalize()
toString()
clone()
structural.composite.DiscJockey::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
getSongList()
displaySongList()
	---> structural.composite.SongComponent::displaySongList() [0 time(s)]

finalize()
toString()
clone()
structural.composite.Song::getClass()
wait(long)
wait(long,int)
wait()
add(structural.composite.SongComponent)
getInfo()
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
getSongName()
notify()
remove(structural.composite.SongComponent)
hashCode()
getBandName()
getComponent(int)
displayInfo()
	---> structural.composite.Song::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

finalize()
toString()
clone()
getReleaseYear()
structural.composite.SongComponent::getClass()
wait(long)
wait(long,int)
wait()
add(structural.composite.SongComponent)
getInfo()
notifyAll()
equals(java.lang.Object)
registerNatives()
getSongName()
notify()
remove(structural.composite.SongComponent)
hashCode()
getBandName()
getComponent(int)
displayInfo()
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

finalize()
toString()
clone()
getReleaseYear()
structural.composite.SongGroup::getClass()
wait(long)
wait(long,int)
wait()
add(structural.composite.SongComponent)
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

getInfo()
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
getSongName()
notify()
remove(structural.composite.SongComponent)
	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

getGroupName()
hashCode()
getBandName()
getComponent(int)
	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

getGroupDescription()
displayInfo()
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

finalize()
toString()
clone()
getReleaseYear()
structural.composite.SongListGenerator::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.composite.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.decorator.Beverage::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
finalize()
toString()
clone()
structural.decorator.BeverageDecorator::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
finalize()
toString()
clone()
structural.decorator.CaramelDecorator::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
	---> structural.decorator.Beverage::description() [0 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
	---> structural.decorator.Beverage::price() [0 time(s)]

finalize()
toString()
clone()
structural.decorator.Espresso::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
finalize()
toString()
clone()
structural.decorator.IBeverage::price()
description()
structural.decorator.SugarDecorator::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
	---> structural.decorator.Beverage::description() [1 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
	---> structural.decorator.Beverage::price() [1 time(s)]

finalize()
toString()
clone()
structural.decorator.Tea::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
finalize()
toString()
clone()
structural.decorator.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

displayOrder(structural.decorator.Beverage)
	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

registerNatives()
notify()
hashCode()
beveragesMenu()
	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

selectBeverage(java.util.Scanner)
	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner)
	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

orderBeverage()
	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

finalize()
toString()
clone()
additionalIngredientsMenu()
	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
setNumber(int)
registerNatives()
notify()
getNumber()
setSecurityCode(int)
hashCode()
getBalance()
getSecurityCode()
finalize()
toString()
clone()
setBalance(double)
structural.facade.BankAccountBalanceSystem::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
canWithdraw(double)
	---> structural.facade.BankAccount::canWithdraw(double) [0 time(s)]

equals(java.lang.Object)
registerNatives()
getAccountBalance()
	---> structural.facade.BankAccount::getAccountBalance() [0 time(s)]

notify()
hashCode()
deposit(double)
	---> structural.facade.BankAccount::deposit(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

finalize()
toString()
clone()
withdraw(double)
	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

structural.facade.BankAccountFacade::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
depositCash(double)
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [0 time(s)]

notify()
hashCode()
getSecurityCode()
getAccountNumber()
fetchBankAccount()
withdrawCash(double)
	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [0 time(s)]

finalize()
toString()
clone()
structural.facade.BankAccountNumberChecker::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
match(int)
	---> structural.facade.BankAccountNumberChecker::match(int) [0 time(s)]

notify()
hashCode()
getAccountNumber()
	---> structural.facade.BankAccount::getAccountNumber() [0 time(s)]

finalize()
toString()
clone()
structural.facade.BankAccountSecurityCodeChecker::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
match(int)
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

notify()
hashCode()
getAccountSecurityCode()
	---> structural.facade.BankAccount::getAccountSecurityCode() [0 time(s)]

finalize()
toString()
clone()
structural.facade.BankAccountWelcomeWindow::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
setWelcomeMessage()
	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

finalize()
toString()
clone()
structural.facade.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.flyweight.Circle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
draw(structural.flyweight.Position)
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

getRadius()
notify()
setRadius(int)
hashCode()
finalize()
toString()
clone()
structural.flyweight.Position::getClass()
wait(long)
wait(long,int)
wait()
setX(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
setY(double)
notify()
hashCode()
getX()
getY()
toString()
finalize()
clone()
structural.flyweight.Shape::draw(structural.flyweight.Position)
structural.flyweight.ShapeFactory::getClass()
wait(long)
wait(long,int)
wait()
getCircle(java.lang.String)
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.flyweight.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
getRandomRadius()
	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

hashCode()
getRandomX()
	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

getRandomY()
	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

finalize()
toString()
clone()
getRandomColor()
	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet::connectTo(java.lang.String)
structural.proxy.ProxyInternet::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
connectTo(java.lang.String)
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.RealInternet::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
connectTo(java.lang.String)
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()

Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger::getClass()
wait(long)
wait(long,int)
wait()
write(behavioral.chain_of_responsibility.LogRequest)
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
setNextLogger(behavioral.chain_of_responsibility.ILogger)
finalize()
toString()
clone()
behavioral.chain_of_responsibility.ErrorLogger::getClass()
wait(long)
wait(long,int)
wait()
write(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
setNextLogger(behavioral.chain_of_responsibility.ILogger)
finalize()
toString()
clone()
behavioral.chain_of_responsibility.FileLogger::getClass()
wait(long)
wait(long,int)
wait()
write(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
setNextLogger(behavioral.chain_of_responsibility.ILogger)
getFilePath()
finalize()
toString()
clone()
setFilePath(java.lang.String)
behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest)
setNextLogger(behavioral.chain_of_responsibility.ILogger)
behavioral.chain_of_responsibility.LogRequest::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getMessage()
notify()
setLevel(behavioral.chain_of_responsibility.LogRequestLevel)
setMessage(java.lang.String)
getLevel()
hashCode()
finalize()
toString()
clone()
behavioral.chain_of_responsibility.LogRequestLevel::value()
behavioral.chain_of_responsibility.Logger::getClass()
wait(long)
wait(long,int)
wait()
write(behavioral.chain_of_responsibility.LogRequest)
log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
setNextLogger(behavioral.chain_of_responsibility.ILogger)
finalize()
toString()
clone()
behavioral.chain_of_responsibility.StandardLogRequestLevel::clone()
compareTo(java.lang.Enum)
describeConstable()
equals(java.lang.Object)
finalize()
getDeclaringClass()
hashCode()
name()
ordinal()
readObject(java.io.ObjectInputStream)
readObjectNoData()
toString()
value()
valueOf(java.lang.Class,java.lang.String)
valueOf(java.lang.String)
values()
behavioral.chain_of_responsibility.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
getChainOfLoggers()
	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

finalize()
toString()
clone()
behavioral.command.Command::getName()
undo()
execute()
behavioral.command.CommandManager::getClass()
wait(long)
wait(long,int)
wait()
getRegistryKey(java.lang.Class)
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
history()
	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

redo()
	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

notify()
execute(behavioral.command.Command)
	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

hashCode()
undo()
	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

behavioral.command.SwitchChannelCommand::getName()
	---> behavioral.command.TV::getName() [0 time(s)]

getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute()
	---> behavioral.command.TV::execute() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

hashCode()
undo()
	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

finalize()
toString()
clone()
behavioral.command.SwitchOffCommand::getName()
	---> behavioral.command.TV::getName() [1 time(s)]

getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute()
	---> behavioral.command.TV::execute() [1 time(s)]

hashCode()
undo()
	---> behavioral.command.TV::undo() [1 time(s)]

finalize()
toString()
clone()
behavioral.command.SwitchOnCommand::getName()
	---> behavioral.command.TV::getName() [1 time(s)]

getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute()
	---> behavioral.command.TV::execute() [1 time(s)]

hashCode()
undo()
	---> behavioral.command.TV::undo() [1 time(s)]

finalize()
toString()
clone()
behavioral.command.TV::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
switchChannel(int)
registerNatives()
notify()
switchOff()
hashCode()
getChannel()
isOn()
finalize()
toString()
clone()
switchOn()
behavioral.command.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.command.TV::main(java.lang.String[]) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.interpreter.AndExpression::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

finalize()
toString()
clone()
behavioral.interpreter.BinaryExpression::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
interpret(java.lang.String)
finalize()
toString()
clone()
behavioral.interpreter.Expression::interpret(java.lang.String)
behavioral.interpreter.OrExpression::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

finalize()
toString()
clone()
behavioral.interpreter.TerminalExpression::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

finalize()
toString()
clone()
behavioral.interpreter.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
getIsFemaleExpression()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
getIsMarriedWomanExpression()
	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

finalize()
toString()
clone()
behavioral.iterator.DiscJockey::getClass()
wait(long)
wait(long,int)
wait()
displaySongs()
	---> structural.composite.Song::displaySongs() [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.iterator.Song::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getSongName()
notify()
hashCode()
getBandName()
toString()
	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

finalize()
clone()
getYearReleased()
behavioral.iterator.SongAggregate::iterator()
spliterator()
forEach(java.util.function.Consumer)
addSong(java.lang.String,java.lang.String,int)
behavioral.iterator.SongArray::getClass()
wait(long)
wait(long,int)
wait()
spliterator()
notifyAll()
forEach(java.util.function.Consumer)
equals(java.lang.Object)
length()
registerNatives()
notify()
hashCode()
iterator()
	---> structural.composite.Song::iterator() [0 time(s)]

	---> structural.composite.Song::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

getFilledArray()
	---> behavioral.iterator.SongArray::getFilledArray() [0 time(s)]

finalize()
toString()
clone()
addSong(java.lang.String,java.lang.String,int)
behavioral.iterator.SongHashtable::getClass()
wait(long)
wait(long,int)
wait()
spliterator()
notifyAll()
forEach(java.util.function.Consumer)
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
iterator()
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

finalize()
toString()
clone()
addSong(java.lang.String,java.lang.String,int)
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList::getClass()
wait(long)
wait(long,int)
wait()
spliterator()
notifyAll()
forEach(java.util.function.Consumer)
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
iterator()
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

finalize()
toString()
clone()
addSong(java.lang.String,java.lang.String,int)
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [0 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [0 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [0 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [0 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [0 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.mediator.ChatRoom::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
addUser(behavioral.mediator.User)
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [0 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
sendMessage(java.lang.String,java.lang.String)
	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

finalize()
toString()
clone()
behavioral.mediator.ChatUser::getName()
getClass()
wait(long)
wait(long,int)
wait()
receive(java.lang.String)
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [0 time(s)]

notifyAll()
equals(java.lang.Object)
getId()
registerNatives()
notify()
hashCode()
getRoom()
finalize()
toString()
clone()
send(java.lang.String,java.lang.String)
	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

behavioral.mediator.IChatRoom::sendMessage(java.lang.String,java.lang.String)
addUser(behavioral.mediator.User)
behavioral.mediator.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.mediator.User::getName()
getClass()
wait(long)
wait(long,int)
wait()
receive(java.lang.String)
notifyAll()
equals(java.lang.Object)
getId()
registerNatives()
notify()
hashCode()
getRoom()
finalize()
toString()
clone()
send(java.lang.String,java.lang.String)
behavioral.memento.CareTaker::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
addMemento(behavioral.memento.Memento)
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

get(int)
	---> behavioral.mediator.User::get(int) [0 time(s)]

finalize()
toString()
clone()
behavioral.memento.Memento::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
getState()
finalize()
toString()
clone()
behavioral.memento.Originator::getClass()
wait(long)
wait(long,int)
wait()
restoreState(behavioral.memento.Memento)
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

setState(java.lang.String)
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
getState()
externalizeState()
finalize()
toString()
clone()
behavioral.memento.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [0 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [0 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [0 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.observer.Observer::update()
behavioral.observer.StockGrabber::getClass()
wait(long)
wait(long,int)
wait()
setGoogleStock(double)
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [0 time(s)]

notifyObserver()
	---> behavioral.observer.Observer::notifyObserver() [0 time(s)]

notifyAll()
getIBMStock()
equals(java.lang.Object)
unregister(behavioral.observer.Observer)
	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

registerNatives()
notify()
setAppleStock(double)
	---> behavioral.observer.StockGrabber::setAppleStock(double) [0 time(s)]

getGoogleStock()
hashCode()
setIBMStock(double)
	---> behavioral.observer.StockGrabber::setIBMStock(double) [0 time(s)]

getAppleStock()
register(behavioral.observer.Observer)
	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

finalize()
toString()
clone()
behavioral.observer.StockObserver::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
update()
	---> behavioral.observer.StockGrabber::update() [0 time(s)]

	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockObserver::update() [1 time(s)]

displayPrices()
	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

notify()
hashCode()
finalize()
toString()
clone()
behavioral.observer.Subject::notifyObserver()
register(behavioral.observer.Observer)
unregister(behavioral.observer.Observer)
behavioral.observer.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.state.ATMMachine::getClass()
getCashInMachine()
wait(long)
wait(long,int)
wait()
insertCard()
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

ejectCard()
	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

requestCash(int)
	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

notifyAll()
setATMState(behavioral.state.ATMState)
insertPin(int)
	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

equals(java.lang.Object)
registerNatives()
getATMState()
getNoCardState()
notify()
getHasCardState()
hashCode()
getNoCashState()
getCorrectPinState()
finalize()
toString()
clone()
setCashInMachine(int)
behavioral.state.ATMState::getClass()
wait(long)
wait(long,int)
wait()
insertCard()
ejectCard()
requestCash(int)
notifyAll()
insertPin(int)
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.state.CorrectPin::getClass()
wait(long)
wait(long,int)
wait()
insertCard()
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

ejectCard()
	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

requestCash(int)
	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

notifyAll()
insertPin(int)
	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.state.HasCard::getClass()
wait(long)
wait(long,int)
wait()
insertCard()
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

ejectCard()
	---> behavioral.state.ATMMachine::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

requestCash(int)
	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

notifyAll()
insertPin(int)
	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [1 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.state.IATMState::insertCard()
ejectCard()
requestCash(int)
insertPin(int)
behavioral.state.NoCard::getClass()
wait(long)
wait(long,int)
wait()
insertCard()
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

ejectCard()
	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

requestCash(int)
	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

notifyAll()
insertPin(int)
	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
defaultMessage()
	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

finalize()
toString()
clone()
behavioral.state.NoCash::getClass()
wait(long)
wait(long,int)
wait()
insertCard()
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

ejectCard()
	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

requestCash(int)
	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

notifyAll()
insertPin(int)
	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
defaultMessage()
	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

finalize()
toString()
clone()
behavioral.state.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.strategy.Add::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute(int,int)
hashCode()
finalize()
toString()
clone()
behavioral.strategy.ArithmeticOperation::execute(int,int)
behavioral.strategy.Calculator::getClass()
wait(long)
wait(long,int)
wait()
reset()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
getResult()
hashCode()
computeOperation(int,int)
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [0 time(s)]

setOperation(behavioral.strategy.ArithmeticOperation)
finalize()
toString()
clone()
behavioral.strategy.Divide::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute(int,int)
hashCode()
finalize()
toString()
clone()
behavioral.strategy.Modulo::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute(int,int)
hashCode()
finalize()
toString()
clone()
behavioral.strategy.Multiply::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute(int,int)
hashCode()
finalize()
toString()
clone()
behavioral.strategy.Subtract::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute(int,int)
hashCode()
finalize()
toString()
clone()
behavioral.strategy.Test::getClass()
wait(long)
wait(long,int)
wait()
computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int)
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.template_method.Basketball::getClass()
play()
	---> behavioral.template_method.Game::play() [0 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
start()
	---> behavioral.template_method.Game::start() [0 time(s)]

registerNatives()
notify()
hashCode()
initialize()
	---> behavioral.template_method.Game::initialize() [0 time(s)]

finalize()
toString()
clone()
end()
	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football::getClass()
play()
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
start()
	---> behavioral.template_method.Game::start() [0 time(s)]

registerNatives()
notify()
hashCode()
initialize()
	---> behavioral.template_method.Game::initialize() [0 time(s)]

finalize()
toString()
clone()
end()
	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game::getClass()
play()
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
start()
registerNatives()
notify()
hashCode()
initialize()
finalize()
toString()
clone()
end()
behavioral.template_method.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [0 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.visitor.Liquor::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
setPrice(double)
notifyAll()
equals(java.lang.Object)
getPrice()
registerNatives()
notify()
accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

hashCode()
finalize()
toString()
clone()
behavioral.visitor.Necessity::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
setPrice(double)
notifyAll()
equals(java.lang.Object)
getPrice()
registerNatives()
notify()
accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

hashCode()
finalize()
toString()
clone()
behavioral.visitor.Product::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
setPrice(double)
notifyAll()
equals(java.lang.Object)
getPrice()
registerNatives()
notify()
accept(behavioral.visitor.Visitor)
hashCode()
finalize()
toString()
clone()
behavioral.visitor.TaxHolidayVisitor::getClass()
wait(long)
wait(long,int)
wait()
getComputedTax()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
computeTax(behavioral.visitor.Product)
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

getTaxRate()
hashCode()
finalize()
toString()
clone()
visit(behavioral.visitor.Liquor)
	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [0 time(s)]

visit(behavioral.visitor.Tobacco)
	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

visit(behavioral.visitor.Necessity)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [0 time(s)]

behavioral.visitor.TaxVisitor::getClass()
wait(long)
wait(long,int)
wait()
getComputedTax()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
computeTax(behavioral.visitor.Product)
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

getTaxRate()
hashCode()
finalize()
toString()
clone()
visit(behavioral.visitor.Liquor)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

visit(behavioral.visitor.Tobacco)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

visit(behavioral.visitor.Necessity)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor)
	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

finalize()
toString()
clone()
behavioral.visitor.Tobacco::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
setPrice(double)
notifyAll()
equals(java.lang.Object)
getPrice()
registerNatives()
notify()
accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

hashCode()
finalize()
toString()
clone()
behavioral.visitor.Visitable::accept(behavioral.visitor.Visitor)
behavioral.visitor.Visitor::visit(behavioral.visitor.Liquor)
visit(behavioral.visitor.Tobacco)
visit(behavioral.visitor.Necessity)
creational.abstract_factory.AbstractShapeFactory::getClass()
wait(long)
wait(long,int)
wait()
createShape(creational.abstract_factory.ShapeType)
getRegistryKey(java.lang.Class)
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.abstract_factory.Rectangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
draw()
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

notify()
hashCode()
finalize()
toString()
clone()
creational.abstract_factory.RoundedRectangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
draw()
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

notify()
hashCode()
finalize()
toString()
clone()
creational.abstract_factory.RoundedShapeFactory::getClass()
wait(long)
wait(long,int)
wait()
createShape(creational.abstract_factory.ShapeType)
getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.abstract_factory.RoundedShapeType::clone()
compareTo(java.lang.Enum)
describeConstable()
equals(java.lang.Object)
finalize()
getDeclaringClass()
hashCode()
name()
ordinal()
readObject(java.io.ObjectInputStream)
readObjectNoData()
toString()
valueOf(java.lang.Class,java.lang.String)
valueOf(java.lang.String)
values()
creational.abstract_factory.RoundedTriangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
draw()
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

notify()
hashCode()
finalize()
toString()
clone()
creational.abstract_factory.Shape::draw()
creational.abstract_factory.ShapeFactoryType::clone()
compareTo(java.lang.Enum)
describeConstable()
equals(java.lang.Object)
finalize()
getDeclaringClass()
hashCode()
name()
ordinal()
readObject(java.io.ObjectInputStream)
readObjectNoData()
toString()
valueOf(java.lang.Class,java.lang.String)
valueOf(java.lang.String)
values()
creational.abstract_factory.ShapeProducer::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
createFactory(creational.abstract_factory.ShapeFactoryType)
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType::creational.abstract_factory.StandardShapeFactory::getClass()
wait(long)
wait(long,int)
wait()
createShape(creational.abstract_factory.ShapeType)
getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.abstract_factory.StandardShapeType::clone()
compareTo(java.lang.Enum)
describeConstable()
equals(java.lang.Object)
finalize()
getDeclaringClass()
hashCode()
name()
ordinal()
readObject(java.io.ObjectInputStream)
readObjectNoData()
toString()
valueOf(java.lang.Class,java.lang.String)
valueOf(java.lang.String)
values()
creational.abstract_factory.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
creational.abstract_factory.Triangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
draw()
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

notify()
hashCode()
finalize()
toString()
clone()
creational.builder.IRobot::setTorso(java.lang.String)
setArms(java.lang.String)
setLegs(java.lang.String)
setHead(java.lang.String)
creational.builder.IRobotBuilder::buildArms()
buildHead()
getRobot()
buildTorso()
buildLegs()
creational.builder.OldRobotBuilder::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getRobot()
notify()
buildLegs()
	---> creational.builder.Robot::buildLegs() [0 time(s)]

buildArms()
	---> creational.builder.Robot::buildArms() [0 time(s)]

hashCode()
buildHead()
	---> creational.builder.Robot::buildHead() [0 time(s)]

finalize()
toString()
clone()
buildTorso()
	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.Robot::getClass()
wait(long)
wait(long,int)
wait()
setLegs(java.lang.String)
notifyAll()
equals(java.lang.Object)
setHead(java.lang.String)
registerNatives()
getTorso()
notify()
setTorso(java.lang.String)
hashCode()
setArms(java.lang.String)
getArms()
getHead()
toString()
	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

finalize()
clone()
getLegs()
creational.builder.RobotBuilder::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getRobot()
notify()
buildLegs()
buildArms()
hashCode()
buildHead()
finalize()
toString()
clone()
buildTorso()
creational.builder.RobotEngineer::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getRobot()
	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

notify()
hashCode()
constructRobot()
	---> creational.builder.IRobotBuilder::constructRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

setRobotBuilder(creational.builder.IRobotBuilder)
finalize()
toString()
clone()
creational.builder.SophisticatedRobotBuilder::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getRobot()
notify()
buildLegs()
	---> creational.builder.Robot::buildLegs() [1 time(s)]

buildArms()
	---> creational.builder.Robot::buildArms() [1 time(s)]

hashCode()
buildHead()
	---> creational.builder.Robot::buildHead() [1 time(s)]

finalize()
toString()
clone()
buildTorso()
	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
creational.factory.BigUFOEnemyShip::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
getAmtDamage()
setAmtDamage(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
followHeroShip()
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

hashCode()
enemyShipShoots()
	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

displayEnemyShip()
	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

finalize()
toString()
clone()
creational.factory.EnemyShip::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
getAmtDamage()
setAmtDamage(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
followHeroShip()
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

hashCode()
enemyShipShoots()
	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

displayEnemyShip()
	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

finalize()
toString()
clone()
creational.factory.EnemyShipFactory::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
createEnemyShip(java.lang.String)
finalize()
toString()
clone()
creational.factory.EnemyShipTesting::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
doStuffEnemy(creational.factory.EnemyShip)
	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

finalize()
toString()
clone()
creational.factory.RocketEnemyShip::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
getAmtDamage()
setAmtDamage(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
followHeroShip()
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

hashCode()
enemyShipShoots()
	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

displayEnemyShip()
	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

finalize()
toString()
clone()
creational.factory.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
doStuffEnemy(creational.factory.EnemyShip)
	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

finalize()
toString()
clone()
creational.factory.UFOEnemyShip::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
getAmtDamage()
setAmtDamage(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
followHeroShip()
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

hashCode()
enemyShipShoots()
	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

displayEnemyShip()
	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

finalize()
toString()
clone()
creational.prototype.Circle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
getId()
setPosition(creational.prototype.Position)
registerNatives()
draw()
	---> creational.factory.EnemyShip::draw() [0 time(s)]

getPosition()
notify()
hashCode()
getType()
setId(java.lang.String)
clone()
	---> creational.factory.EnemyShip::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

toString()
	---> creational.prototype.Shape::toString() [0 time(s)]

finalize()
creational.prototype.Position::getClass()
wait(long)
wait(long,int)
wait()
setX(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
setY(double)
notify()
hashCode()
getX()
getY()
clone()
	---> creational.prototype.Shape::clone() [0 time(s)]

toString()
	---> creational.prototype.Position::toString() [1 time(s)]

finalize()
creational.prototype.Rectangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
getId()
setPosition(creational.prototype.Position)
registerNatives()
draw()
	---> creational.prototype.Position::draw() [0 time(s)]

getPosition()
notify()
hashCode()
getType()
setId(java.lang.String)
clone()
	---> creational.prototype.Position::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

toString()
	---> creational.prototype.Shape::toString() [1 time(s)]

finalize()
creational.prototype.Shape::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
getId()
setPosition(creational.prototype.Position)
registerNatives()
draw()
getPosition()
notify()
hashCode()
getType()
setId(java.lang.String)
clone()
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

toString()
	---> creational.prototype.Shape::toString() [1 time(s)]

finalize()
creational.prototype.ShapeCache::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
getShape(java.lang.String)
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

hashCode()
displayCacheContent()
	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

finalize()
toString()
clone()
loadCache()
	---> creational.prototype.Circle::loadCache() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Triangle::loadCache() [1 time(s)]

	---> creational.prototype.Triangle::loadCache() [1 time(s)]

	---> creational.prototype.Triangle::loadCache() [0 time(s)]

	---> creational.prototype.Triangle::loadCache() [1 time(s)]

	---> creational.prototype.Rectangle::loadCache() [1 time(s)]

	---> creational.prototype.Rectangle::loadCache() [1 time(s)]

	---> creational.prototype.Rectangle::loadCache() [0 time(s)]

	---> creational.prototype.Rectangle::loadCache() [1 time(s)]

creational.prototype.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
creational.prototype.Triangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
getId()
setPosition(creational.prototype.Position)
registerNatives()
draw()
	---> creational.prototype.Shape::draw() [0 time(s)]

getPosition()
notify()
hashCode()
getType()
setId(java.lang.String)
clone()
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

toString()
	---> creational.prototype.Shape::toString() [1 time(s)]

finalize()
creational.singleton.ExtendedSingleton::getClass()
wait(long)
wait(long,int)
wait()
getRegistryKey(java.lang.Class)
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.singleton.ExtendedSingleton2::getClass()
wait(long)
wait(long,int)
wait()
getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.singleton.Singleton::getClass()
wait(long)
wait(long,int)
wait()
getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.singleton.SingletonRegistry::lookup(java.lang.String)
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
register(java.lang.String,creational.singleton.Singleton)
	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

finalize()
toString()
clone()
creational.singleton.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.adapter.EnemyAttacker::fireWeapon()
driveForward()
assignDriver(java.lang.String)
structural.adapter.EnemyRobot::getClass()
wait(long)
wait(long,int)
wait()
smashwithHands()
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

walkForward()
	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
reactToHuman(java.lang.String)
	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

finalize()
toString()
clone()
structural.adapter.EnemyRobotAdapter::getClass()
wait(long)
wait(long,int)
wait()
driveForward()
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
setRobot(structural.adapter.EnemyRobot)
fireWeapon()
	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

hashCode()
assignDriver(java.lang.String)
	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

finalize()
toString()
clone()
structural.adapter.EnemyTank::getClass()
wait(long)
wait(long,int)
wait()
driveForward()
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
fireWeapon()
	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

hashCode()
assignDriver(java.lang.String)
	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

finalize()
toString()
clone()
structural.adapter.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.adapter.TestEnemyAttackers::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.bridge.AdvancedRemote::getClass()
wait(long)
wait(long,int)
wait()
togglePower()
	---> structural.bridge.Device::togglePower() [0 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [0 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

notifyAll()
equals(java.lang.Object)
mute()
	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

channelDown()
	---> structural.bridge.Device::channelDown() [0 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [0 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

registerNatives()
notify()
hashCode()
volumeDown()
	---> structural.bridge.Device::volumeDown() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

volumeUp()
	---> structural.bridge.Device::volumeUp() [0 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [0 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

finalize()
toString()
clone()
channelUp()
	---> structural.bridge.Device::channelUp() [0 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [0 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

structural.bridge.Device::getName()
getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
setChannel(int)
equals(java.lang.Object)
registerNatives()
setVolume(int)
notify()
enable()
hashCode()
getVolume()
getChannel()
disable()
isEnabled()
finalize()
toString()
clone()
structural.bridge.Radio::getName()
getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
setChannel(int)
equals(java.lang.Object)
registerNatives()
setVolume(int)
notify()
enable()
hashCode()
getVolume()
getChannel()
disable()
isEnabled()
finalize()
toString()
clone()
structural.bridge.Remote::getClass()
wait(long)
wait(long,int)
wait()
togglePower()
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [0 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

notifyAll()
equals(java.lang.Object)
channelDown()
	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [0 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

registerNatives()
notify()
hashCode()
volumeDown()
	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

volumeUp()
	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [0 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

finalize()
toString()
clone()
channelUp()
	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [0 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

structural.bridge.TV::getName()
getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
setChannel(int)
equals(java.lang.Object)
registerNatives()
setVolume(int)
notify()
enable()
hashCode()
getVolume()
getChannel()
disable()
isEnabled()
finalize()
toString()
clone()
structural.bridge.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
ordinaryRemoteTest(structural.bridge.Remote)
	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [0 time(s)]

advancedRemoteTest(structural.bridge.AdvancedRemote)
	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [0 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [0 time(s)]

finalize()
toString()
clone()
structural.composite.DiscJockey::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
getSongList()
displaySongList()
	---> structural.composite.SongComponent::displaySongList() [0 time(s)]

finalize()
toString()
clone()
structural.composite.Song::getClass()
wait(long)
wait(long,int)
wait()
add(structural.composite.SongComponent)
getInfo()
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
getSongName()
notify()
remove(structural.composite.SongComponent)
hashCode()
getBandName()
getComponent(int)
displayInfo()
	---> structural.composite.Song::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

finalize()
toString()
clone()
getReleaseYear()
structural.composite.SongComponent::getClass()
wait(long)
wait(long,int)
wait()
add(structural.composite.SongComponent)
getInfo()
notifyAll()
equals(java.lang.Object)
registerNatives()
getSongName()
notify()
remove(structural.composite.SongComponent)
hashCode()
getBandName()
getComponent(int)
displayInfo()
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

finalize()
toString()
clone()
getReleaseYear()
structural.composite.SongGroup::getClass()
wait(long)
wait(long,int)
wait()
add(structural.composite.SongComponent)
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

getInfo()
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
getSongName()
notify()
remove(structural.composite.SongComponent)
	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

getGroupName()
hashCode()
getBandName()
getComponent(int)
	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

getGroupDescription()
displayInfo()
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

finalize()
toString()
clone()
getReleaseYear()
structural.composite.SongListGenerator::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.composite.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.decorator.Beverage::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
finalize()
toString()
clone()
structural.decorator.BeverageDecorator::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
finalize()
toString()
clone()
structural.decorator.CaramelDecorator::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
	---> structural.decorator.Beverage::description() [0 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
	---> structural.decorator.Beverage::price() [0 time(s)]

finalize()
toString()
clone()
structural.decorator.Espresso::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
finalize()
toString()
clone()
structural.decorator.IBeverage::price()
description()
structural.decorator.SugarDecorator::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
	---> structural.decorator.Beverage::description() [1 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
	---> structural.decorator.Beverage::price() [1 time(s)]

finalize()
toString()
clone()
structural.decorator.Tea::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
finalize()
toString()
clone()
structural.decorator.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

displayOrder(structural.decorator.Beverage)
	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

registerNatives()
notify()
hashCode()
beveragesMenu()
	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

selectBeverage(java.util.Scanner)
	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner)
	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

orderBeverage()
	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

finalize()
toString()
clone()
additionalIngredientsMenu()
	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
setNumber(int)
registerNatives()
notify()
getNumber()
setSecurityCode(int)
hashCode()
getBalance()
getSecurityCode()
finalize()
toString()
clone()
setBalance(double)
structural.facade.BankAccountBalanceSystem::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
canWithdraw(double)
	---> structural.facade.BankAccount::canWithdraw(double) [0 time(s)]

equals(java.lang.Object)
registerNatives()
getAccountBalance()
	---> structural.facade.BankAccount::getAccountBalance() [0 time(s)]

notify()
hashCode()
deposit(double)
	---> structural.facade.BankAccount::deposit(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

finalize()
toString()
clone()
withdraw(double)
	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

structural.facade.BankAccountFacade::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
depositCash(double)
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [0 time(s)]

notify()
hashCode()
getSecurityCode()
getAccountNumber()
fetchBankAccount()
withdrawCash(double)
	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [0 time(s)]

finalize()
toString()
clone()
structural.facade.BankAccountNumberChecker::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
match(int)
	---> structural.facade.BankAccountNumberChecker::match(int) [0 time(s)]

notify()
hashCode()
getAccountNumber()
	---> structural.facade.BankAccount::getAccountNumber() [0 time(s)]

finalize()
toString()
clone()
structural.facade.BankAccountSecurityCodeChecker::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
match(int)
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

notify()
hashCode()
getAccountSecurityCode()
	---> structural.facade.BankAccount::getAccountSecurityCode() [0 time(s)]

finalize()
toString()
clone()
structural.facade.BankAccountWelcomeWindow::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
setWelcomeMessage()
	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

finalize()
toString()
clone()
structural.facade.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.flyweight.Circle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
draw(structural.flyweight.Position)
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

getRadius()
notify()
setRadius(int)
hashCode()
finalize()
toString()
clone()
structural.flyweight.Position::getClass()
wait(long)
wait(long,int)
wait()
setX(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
setY(double)
notify()
hashCode()
getX()
getY()
toString()
finalize()
clone()
structural.flyweight.Shape::draw(structural.flyweight.Position)
structural.flyweight.ShapeFactory::getClass()
wait(long)
wait(long,int)
wait()
getCircle(java.lang.String)
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.flyweight.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
getRandomRadius()
	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

hashCode()
getRandomX()
	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

getRandomY()
	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

finalize()
toString()
clone()
getRandomColor()
	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet::connectTo(java.lang.String)
structural.proxy.ProxyInternet::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
connectTo(java.lang.String)
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.RealInternet::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
connectTo(java.lang.String)
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()

Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [0 time(s)]

	---> behavioral.command.TV::execute() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [0 time(s)]

	---> structural.composite.Song::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [0 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [0 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [0 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [0 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [0 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [1 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.mediator.User::get(int) [0 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [0 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [0 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [0 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [0 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [0 time(s)]

	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockObserver::update() [1 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [1 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [0 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [0 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [0 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [0 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [1 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [0 time(s)]

	---> creational.builder.Robot::buildArms() [0 time(s)]

	---> creational.builder.Robot::buildHead() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [0 time(s)]

	---> creational.prototype.Position::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Triangle::loadCache() [1 time(s)]

	---> creational.prototype.Triangle::loadCache() [1 time(s)]

	---> creational.prototype.Triangle::loadCache() [0 time(s)]

	---> creational.prototype.Triangle::loadCache() [1 time(s)]

	---> creational.prototype.Rectangle::loadCache() [1 time(s)]

	---> creational.prototype.Rectangle::loadCache() [1 time(s)]

	---> creational.prototype.Rectangle::loadCache() [0 time(s)]

	---> creational.prototype.Rectangle::loadCache() [1 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [1 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [0 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [0 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::channelDown() [0 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [0 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [0 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [0 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [0 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [0 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [0 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [0 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [0 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [0 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [0 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [0 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [0 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [1 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [1 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [0 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [0 time(s)]

	---> structural.facade.BankAccount::deposit(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [0 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [0 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> ILogger::main(java.lang.String[]) [0 time(s)]

	---> ILogger::main(java.lang.String[]) [0 time(s)]

	---> ILogger::main(java.lang.String[]) [1 time(s)]

	---> ILogger::main(java.lang.String[]) [1 time(s)]

	---> ILogger::getChainOfLoggers() [0 time(s)]

	---> ILogger::getChainOfLoggers() [1 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

	---> ILogger::history() [0 time(s)]

	---> ILogger::redo() [0 time(s)]

	---> ILogger::redo() [0 time(s)]

	---> ILogger::redo() [0 time(s)]

	---> Command::redo() [0 time(s)]

	---> Command::redo() [0 time(s)]

	---> Command::redo() [0 time(s)]

	---> Command::redo() [1 time(s)]

	---> Command::execute(behavioral.command.Command) [0 time(s)]

	---> Command::execute(behavioral.command.Command) [0 time(s)]

	---> Command::execute(behavioral.command.Command) [0 time(s)]

	---> Command::execute(behavioral.command.Command) [1 time(s)]

	---> Command::undo() [0 time(s)]

	---> Command::undo() [0 time(s)]

	---> Command::undo() [0 time(s)]

	---> Command::undo() [0 time(s)]

	---> Command::undo() [0 time(s)]

	---> Command::undo() [0 time(s)]

	---> Command::undo() [1 time(s)]

	---> Command::getInstance(java.lang.Class) [0 time(s)]

	---> Command::getInstance(java.lang.Class) [0 time(s)]

	---> Command::getInstance(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> TV::getName() [0 time(s)]

	---> TV::execute() [0 time(s)]

	---> TV::execute() [1 time(s)]

	---> TV::undo() [1 time(s)]

	---> TV::undo() [1 time(s)]

behavioral.command.SwitchOffCommand:
	---> TV::getName() [1 time(s)]

	---> TV::execute() [1 time(s)]

	---> TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> TV::getName() [1 time(s)]

	---> TV::execute() [1 time(s)]

	---> TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> TV::main(java.lang.String[]) [0 time(s)]

	---> CommandManager::main(java.lang.String[]) [1 time(s)]

	---> CommandManager::main(java.lang.String[]) [1 time(s)]

	---> CommandManager::main(java.lang.String[]) [1 time(s)]

	---> CommandManager::main(java.lang.String[]) [1 time(s)]

	---> CommandManager::main(java.lang.String[]) [1 time(s)]

	---> CommandManager::main(java.lang.String[]) [1 time(s)]

	---> CommandManager::main(java.lang.String[]) [1 time(s)]

	---> CommandManager::main(java.lang.String[]) [1 time(s)]

	---> CommandManager::main(java.lang.String[]) [1 time(s)]

	---> CommandManager::main(java.lang.String[]) [1 time(s)]

	---> CommandManager::main(java.lang.String[]) [1 time(s)]

	---> CommandManager::main(java.lang.String[]) [1 time(s)]

	---> CommandManager::main(java.lang.String[]) [1 time(s)]

	---> CommandManager::main(java.lang.String[]) [1 time(s)]

behavioral.interpreter.AndExpression:
	---> Expression::interpret(java.lang.String) [0 time(s)]

	---> Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> Expression::interpret(java.lang.String) [1 time(s)]

	---> Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.TerminalExpression:
	---> Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.Test:
	---> Expression::main(java.lang.String[]) [0 time(s)]

	---> Expression::main(java.lang.String[]) [0 time(s)]

	---> Expression::main(java.lang.String[]) [0 time(s)]

	---> Expression::main(java.lang.String[]) [1 time(s)]

	---> Expression::main(java.lang.String[]) [0 time(s)]

	---> Expression::main(java.lang.String[]) [1 time(s)]

	---> Expression::getIsMarriedWomanExpression() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> Song::displaySongs() [0 time(s)]

behavioral.iterator.Song:
	---> Song::toString() [0 time(s)]

	---> Song::toString() [0 time(s)]

	---> Song::toString() [0 time(s)]

	---> Song::toString() [0 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> Song::iterator() [0 time(s)]

	---> Song::iterator() [0 time(s)]

	---> SongArray::iterator() [0 time(s)]

	---> SongArray::getFilledArray() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> SongArray::iterator() [0 time(s)]

	---> SongArray::iterator() [0 time(s)]

	---> SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> SongArray::iterator() [0 time(s)]

	---> SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> SongAggregate::main(java.lang.String[]) [0 time(s)]

	---> DiscJockey::main(java.lang.String[]) [1 time(s)]

	---> DiscJockey::main(java.lang.String[]) [0 time(s)]

	---> SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> SongAggregate::main(java.lang.String[]) [0 time(s)]

	---> DiscJockey::main(java.lang.String[]) [1 time(s)]

	---> DiscJockey::main(java.lang.String[]) [0 time(s)]

	---> SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> SongAggregate::main(java.lang.String[]) [0 time(s)]

	---> DiscJockey::main(java.lang.String[]) [1 time(s)]

	---> DiscJockey::main(java.lang.String[]) [0 time(s)]

behavioral.mediator.ChatRoom:
	---> DiscJockey::addUser(behavioral.mediator.User) [0 time(s)]

	---> User::addUser(behavioral.mediator.User) [0 time(s)]

	---> User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

behavioral.mediator.ChatUser:
	---> User::receive(java.lang.String) [0 time(s)]

	---> ChatUser::receive(java.lang.String) [0 time(s)]

	---> ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> IChatRoom::send(java.lang.String,java.lang.String) [1 time(s)]

	---> ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> User::main(java.lang.String[]) [1 time(s)]

	---> User::main(java.lang.String[]) [1 time(s)]

	---> User::main(java.lang.String[]) [1 time(s)]

	---> User::main(java.lang.String[]) [1 time(s)]

	---> User::main(java.lang.String[]) [1 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> User::addMemento(behavioral.memento.Memento) [0 time(s)]

	---> User::get(int) [0 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> Originator::restoreState(behavioral.memento.Memento) [0 time(s)]

	---> Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

behavioral.memento.Test:
	---> Originator::main(java.lang.String[]) [1 time(s)]

	---> Originator::main(java.lang.String[]) [1 time(s)]

	---> CareTaker::main(java.lang.String[]) [1 time(s)]

	---> Originator::main(java.lang.String[]) [1 time(s)]

	---> Originator::main(java.lang.String[]) [1 time(s)]

	---> CareTaker::main(java.lang.String[]) [1 time(s)]

	---> Originator::main(java.lang.String[]) [1 time(s)]

	---> Originator::main(java.lang.String[]) [1 time(s)]

	---> Originator::main(java.lang.String[]) [0 time(s)]

	---> Originator::main(java.lang.String[]) [1 time(s)]

	---> Originator::main(java.lang.String[]) [1 time(s)]

	---> CareTaker::main(java.lang.String[]) [1 time(s)]

	---> CareTaker::main(java.lang.String[]) [0 time(s)]

	---> Originator::main(java.lang.String[]) [1 time(s)]

	---> Originator::main(java.lang.String[]) [1 time(s)]

	---> CareTaker::main(java.lang.String[]) [1 time(s)]

	---> CareTaker::main(java.lang.String[]) [0 time(s)]

	---> Originator::main(java.lang.String[]) [1 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> StockGrabber::setGoogleStock(double) [0 time(s)]

	---> Observer::notifyObserver() [0 time(s)]

	---> Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> StockGrabber::setAppleStock(double) [0 time(s)]

	---> StockGrabber::setIBMStock(double) [0 time(s)]

	---> StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.StockObserver:
	---> StockGrabber::update() [0 time(s)]

	---> StockGrabber::update() [1 time(s)]

	---> StockGrabber::update() [1 time(s)]

	---> StockObserver::update() [1 time(s)]

	---> StockObserver::displayPrices() [0 time(s)]

	---> StockObserver::displayPrices() [0 time(s)]

	---> StockObserver::displayPrices() [0 time(s)]

	---> StockObserver::displayPrices() [0 time(s)]

	---> StockObserver::displayPrices() [0 time(s)]

	---> StockObserver::displayPrices() [0 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> StockGrabber::main(java.lang.String[]) [1 time(s)]

behavioral.state.ATMMachine:
	---> ATMState::insertCard() [0 time(s)]

	---> ATMState::ejectCard() [0 time(s)]

	---> ATMState::requestCash(int) [0 time(s)]

	---> ATMState::insertPin(int) [0 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> ATMState::insertCard() [0 time(s)]

	---> ATMState::ejectCard() [0 time(s)]

	---> ATMMachine::ejectCard() [1 time(s)]

	---> ATMMachine::ejectCard() [1 time(s)]

	---> ATMMachine::requestCash(int) [1 time(s)]

	---> ATMMachine::requestCash(int) [0 time(s)]

	---> ATMMachine::requestCash(int) [0 time(s)]

	---> ATMMachine::requestCash(int) [1 time(s)]

	---> ATMMachine::requestCash(int) [1 time(s)]

	---> CorrectPin::requestCash(int) [1 time(s)]

	---> ATMMachine::requestCash(int) [1 time(s)]

	---> ATMMachine::requestCash(int) [1 time(s)]

	---> ATMMachine::requestCash(int) [1 time(s)]

	---> ATMMachine::insertPin(int) [0 time(s)]

behavioral.state.HasCard:
	---> ATMMachine::insertCard() [0 time(s)]

	---> ATMMachine::ejectCard() [0 time(s)]

	---> ATMMachine::ejectCard() [1 time(s)]

	---> ATMMachine::ejectCard() [1 time(s)]

	---> ATMMachine::requestCash(int) [0 time(s)]

	---> ATMMachine::insertPin(int) [0 time(s)]

	---> ATMMachine::insertPin(int) [1 time(s)]

	---> ATMMachine::insertPin(int) [1 time(s)]

	---> ATMMachine::insertPin(int) [0 time(s)]

	---> HasCard::insertPin(int) [1 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> HasCard::insertCard() [0 time(s)]

	---> ATMMachine::insertCard() [1 time(s)]

	---> ATMMachine::insertCard() [1 time(s)]

	---> NoCard::ejectCard() [1 time(s)]

	---> NoCard::requestCash(int) [1 time(s)]

	---> NoCard::insertPin(int) [1 time(s)]

	---> NoCard::defaultMessage() [0 time(s)]

behavioral.state.NoCash:
	---> NoCash::insertCard() [1 time(s)]

	---> NoCash::ejectCard() [1 time(s)]

	---> NoCash::requestCash(int) [1 time(s)]

	---> NoCash::insertPin(int) [1 time(s)]

	---> NoCash::defaultMessage() [0 time(s)]

behavioral.state.Test:
	---> ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> ATMMachine::main(java.lang.String[]) [1 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> ArithmeticOperation::computeOperation(int,int) [0 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

behavioral.template_method.Basketball:
	---> Game::play() [0 time(s)]

	---> Game::play() [1 time(s)]

	---> Game::play() [1 time(s)]

	---> Game::start() [0 time(s)]

	---> Game::initialize() [0 time(s)]

	---> Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> Game::play() [1 time(s)]

	---> Game::play() [1 time(s)]

	---> Game::play() [1 time(s)]

	---> Game::start() [0 time(s)]

	---> Game::initialize() [0 time(s)]

	---> Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> Game::play() [1 time(s)]

	---> Game::play() [1 time(s)]

	---> Game::play() [1 time(s)]

behavioral.template_method.Test:
	---> Game::main(java.lang.String[]) [1 time(s)]

	---> Game::main(java.lang.String[]) [0 time(s)]

	---> Game::main(java.lang.String[]) [1 time(s)]

behavioral.visitor.Liquor:
	---> Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

behavioral.visitor.Necessity:
	---> Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> Product::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [0 time(s)]

	---> TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

	---> TaxVisitor::visit(behavioral.visitor.Necessity) [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

behavioral.visitor.Tobacco:
	---> Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

	---> Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.abstract_factory.Rectangle:
	---> SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

	---> SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> Shape::main(java.lang.String[]) [1 time(s)]

	---> AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> Shape::main(java.lang.String[]) [1 time(s)]

	---> Shape::main(java.lang.String[]) [0 time(s)]

	---> AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> Shape::main(java.lang.String[]) [1 time(s)]

	---> AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> Shape::main(java.lang.String[]) [1 time(s)]

creational.abstract_factory.Triangle:
	---> Shape::draw() [0 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> Robot::buildLegs() [0 time(s)]

	---> Robot::buildArms() [0 time(s)]

	---> Robot::buildHead() [0 time(s)]

	---> Robot::buildTorso() [0 time(s)]

creational.builder.Robot:
	---> Robot::toString() [0 time(s)]

	---> Robot::toString() [0 time(s)]

	---> Robot::toString() [0 time(s)]

	---> Robot::toString() [0 time(s)]

	---> Robot::toString() [0 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> IRobotBuilder::getRobot() [0 time(s)]

	---> IRobotBuilder::constructRobot() [0 time(s)]

	---> IRobotBuilder::constructRobot() [1 time(s)]

	---> IRobotBuilder::constructRobot() [1 time(s)]

	---> IRobotBuilder::constructRobot() [1 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> Robot::buildLegs() [1 time(s)]

	---> Robot::buildArms() [1 time(s)]

	---> Robot::buildHead() [1 time(s)]

	---> Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> RobotEngineer::main(java.lang.String[]) [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> RobotEngineer::followHeroShip() [0 time(s)]

	---> RobotEngineer::enemyShipShoots() [0 time(s)]

	---> RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShip:
	---> RobotEngineer::followHeroShip() [0 time(s)]

	---> RobotEngineer::enemyShipShoots() [0 time(s)]

	---> RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

	---> EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

	---> EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

	---> EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [0 time(s)]

	---> EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

creational.factory.RocketEnemyShip:
	---> EnemyShip::followHeroShip() [0 time(s)]

	---> EnemyShip::enemyShipShoots() [0 time(s)]

	---> EnemyShip::displayEnemyShip() [0 time(s)]

creational.factory.Test:
	---> EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

	---> EnemyShipFactory::main(java.lang.String[]) [0 time(s)]

	---> EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

creational.factory.UFOEnemyShip:
	---> EnemyShip::followHeroShip() [0 time(s)]

	---> EnemyShip::enemyShipShoots() [0 time(s)]

	---> EnemyShip::displayEnemyShip() [0 time(s)]

creational.prototype.Circle:
	---> EnemyShip::draw() [0 time(s)]

	---> EnemyShip::clone() [0 time(s)]

	---> Shape::clone() [0 time(s)]

	---> Position::clone() [1 time(s)]

	---> Shape::clone() [1 time(s)]

	---> Shape::clone() [0 time(s)]

	---> Shape::toString() [0 time(s)]

creational.prototype.Position:
	---> Shape::clone() [0 time(s)]

	---> Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> Position::draw() [0 time(s)]

	---> Position::clone() [0 time(s)]

	---> Shape::clone() [1 time(s)]

	---> Position::clone() [1 time(s)]

	---> Shape::clone() [1 time(s)]

	---> Shape::clone() [0 time(s)]

	---> Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> Shape::clone() [0 time(s)]

	---> Shape::clone() [1 time(s)]

	---> Position::clone() [1 time(s)]

	---> Shape::clone() [1 time(s)]

	---> Shape::clone() [0 time(s)]

	---> Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> Shape::getShape(java.lang.String) [0 time(s)]

	---> Shape::getShape(java.lang.String) [0 time(s)]

	---> Shape::displayCacheContent() [0 time(s)]

	---> Shape::displayCacheContent() [0 time(s)]

	---> Circle::loadCache() [0 time(s)]

	---> Circle::loadCache() [1 time(s)]

	---> Circle::loadCache() [0 time(s)]

	---> Circle::loadCache() [1 time(s)]

	---> Triangle::loadCache() [1 time(s)]

	---> Triangle::loadCache() [1 time(s)]

	---> Triangle::loadCache() [0 time(s)]

	---> Triangle::loadCache() [1 time(s)]

	---> Rectangle::loadCache() [1 time(s)]

	---> Rectangle::loadCache() [1 time(s)]

	---> Rectangle::loadCache() [0 time(s)]

	---> Rectangle::loadCache() [1 time(s)]

creational.prototype.Test:
	---> Rectangle::main(java.lang.String[]) [0 time(s)]

	---> Rectangle::main(java.lang.String[]) [0 time(s)]

	---> Rectangle::main(java.lang.String[]) [0 time(s)]

	---> Rectangle::main(java.lang.String[]) [0 time(s)]

	---> Rectangle::main(java.lang.String[]) [0 time(s)]

	---> Position::main(java.lang.String[]) [1 time(s)]

	---> Shape::main(java.lang.String[]) [1 time(s)]

	---> Shape::main(java.lang.String[]) [0 time(s)]

	---> Position::main(java.lang.String[]) [1 time(s)]

	---> Shape::main(java.lang.String[]) [1 time(s)]

	---> Shape::main(java.lang.String[]) [0 time(s)]

	---> Position::main(java.lang.String[]) [1 time(s)]

	---> Shape::main(java.lang.String[]) [1 time(s)]

	---> Shape::main(java.lang.String[]) [0 time(s)]

	---> Shape::main(java.lang.String[]) [0 time(s)]

	---> Shape::main(java.lang.String[]) [0 time(s)]

	---> Shape::main(java.lang.String[]) [0 time(s)]

creational.prototype.Triangle:
	---> Shape::draw() [0 time(s)]

	---> Shape::clone() [0 time(s)]

	---> Shape::clone() [1 time(s)]

	---> Position::clone() [1 time(s)]

	---> Shape::clone() [1 time(s)]

	---> Shape::clone() [0 time(s)]

	---> Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> Shape::getRegistryKey(java.lang.Class) [0 time(s)]

	---> Shape::getInstance(java.lang.Class) [0 time(s)]

	---> Shape::getInstance(java.lang.Class) [0 time(s)]

	---> Shape::getInstance(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.singleton.ExtendedSingleton2:
	---> SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.singleton.Singleton:
	---> SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

creational.singleton.SingletonRegistry:
	---> SingletonRegistry::lookup(java.lang.String) [0 time(s)]

	---> SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

creational.singleton.Test:
	---> SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> ExtendedSingleton::main(java.lang.String[]) [0 time(s)]

	---> ExtendedSingleton2::main(java.lang.String[]) [1 time(s)]

	---> ExtendedSingleton2::main(java.lang.String[]) [1 time(s)]

	---> ExtendedSingleton2::main(java.lang.String[]) [0 time(s)]

	---> ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> ExtendedSingleton2::main(java.lang.String[]) [1 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> ExtendedSingleton2::walkForward() [0 time(s)]

	---> ExtendedSingleton2::walkForward() [0 time(s)]

	---> ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> EnemyRobot::driveForward() [0 time(s)]

	---> EnemyRobot::fireWeapon() [0 time(s)]

	---> EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyTank:
	---> EnemyRobot::driveForward() [0 time(s)]

	---> EnemyRobot::driveForward() [0 time(s)]

	---> EnemyRobot::fireWeapon() [0 time(s)]

	---> EnemyRobot::fireWeapon() [0 time(s)]

	---> EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.Test:
	---> EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> EnemyTank::main(java.lang.String[]) [0 time(s)]

	---> EnemyTank::main(java.lang.String[]) [0 time(s)]

	---> EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> EnemyAttacker::main(java.lang.String[]) [1 time(s)]

structural.adapter.TestEnemyAttackers:
	---> EnemyAttacker::main(java.lang.String[]) [0 time(s)]

	---> EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> EnemyTank::main(java.lang.String[]) [0 time(s)]

	---> EnemyTank::main(java.lang.String[]) [0 time(s)]

	---> EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> EnemyAttacker::main(java.lang.String[]) [1 time(s)]

structural.bridge.AdvancedRemote:
	---> Device::togglePower() [0 time(s)]

	---> Device::togglePower() [1 time(s)]

	---> Device::togglePower() [1 time(s)]

	---> Device::togglePower() [0 time(s)]

	---> Device::togglePower() [1 time(s)]

	---> Device::togglePower() [1 time(s)]

	---> Device::mute() [0 time(s)]

	---> Device::mute() [0 time(s)]

	---> Device::mute() [1 time(s)]

	---> Device::mute() [1 time(s)]

	---> Device::channelDown() [0 time(s)]

	---> Device::channelDown() [1 time(s)]

	---> Device::channelDown() [0 time(s)]

	---> Device::channelDown() [1 time(s)]

	---> Device::volumeDown() [0 time(s)]

	---> Device::volumeDown() [1 time(s)]

	---> Device::volumeDown() [0 time(s)]

	---> Device::volumeDown() [1 time(s)]

	---> Device::volumeUp() [0 time(s)]

	---> Device::volumeUp() [1 time(s)]

	---> Device::volumeUp() [0 time(s)]

	---> Device::volumeUp() [1 time(s)]

	---> Device::channelUp() [0 time(s)]

	---> Device::channelUp() [1 time(s)]

	---> Device::channelUp() [0 time(s)]

	---> Device::channelUp() [1 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> Device::togglePower() [1 time(s)]

	---> Device::togglePower() [1 time(s)]

	---> Device::togglePower() [1 time(s)]

	---> Device::togglePower() [0 time(s)]

	---> Device::togglePower() [1 time(s)]

	---> Device::togglePower() [1 time(s)]

	---> Device::channelDown() [1 time(s)]

	---> Device::channelDown() [1 time(s)]

	---> Device::channelDown() [0 time(s)]

	---> Device::channelDown() [1 time(s)]

	---> Device::volumeDown() [1 time(s)]

	---> Device::volumeDown() [1 time(s)]

	---> Device::volumeDown() [0 time(s)]

	---> Device::volumeDown() [1 time(s)]

	---> Device::volumeUp() [1 time(s)]

	---> Device::volumeUp() [1 time(s)]

	---> Device::volumeUp() [0 time(s)]

	---> Device::volumeUp() [1 time(s)]

	---> Device::channelUp() [1 time(s)]

	---> Device::channelUp() [1 time(s)]

	---> Device::channelUp() [0 time(s)]

	---> Device::channelUp() [1 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> Device::main(java.lang.String[]) [0 time(s)]

	---> Device::main(java.lang.String[]) [0 time(s)]

	---> Device::main(java.lang.String[]) [0 time(s)]

	---> Device::main(java.lang.String[]) [0 time(s)]

	---> Remote::ordinaryRemoteTest(structural.bridge.Remote) [0 time(s)]

	---> Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> Remote::ordinaryRemoteTest(structural.bridge.Remote) [0 time(s)]

	---> AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [0 time(s)]

	---> AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [0 time(s)]

structural.composite.DiscJockey:
	---> SongComponent::displaySongList() [0 time(s)]

structural.composite.Song:
	---> SongComponent::getInfo() [0 time(s)]

	---> Song::getInfo() [0 time(s)]

	---> Song::getInfo() [0 time(s)]

	---> Song::getInfo() [1 time(s)]

	---> Song::getInfo() [0 time(s)]

	---> Song::getInfo() [1 time(s)]

	---> Song::getInfo() [0 time(s)]

	---> Song::displayInfo() [0 time(s)]

	---> SongComponent::displayInfo() [0 time(s)]

structural.composite.SongComponent:
	---> SongComponent::displayInfo() [0 time(s)]

	---> SongComponent::displayInfo() [1 time(s)]

structural.composite.SongGroup:
	---> SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> SongComponent::getInfo() [0 time(s)]

	---> SongGroup::getInfo() [1 time(s)]

	---> SongGroup::getInfo() [0 time(s)]

	---> SongGroup::getInfo() [1 time(s)]

	---> SongGroup::getInfo() [0 time(s)]

	---> SongGroup::getInfo() [0 time(s)]

	---> SongGroup::getInfo() [0 time(s)]

	---> SongGroup::getInfo() [0 time(s)]

	---> SongGroup::getInfo() [0 time(s)]

	---> SongGroup::getInfo() [0 time(s)]

	---> SongGroup::getInfo() [0 time(s)]

	---> SongGroup::getInfo() [0 time(s)]

	---> SongGroup::getInfo() [0 time(s)]

	---> SongComponent::getInfo() [1 time(s)]

	---> SongComponent::getInfo() [0 time(s)]

	---> SongComponent::getInfo() [1 time(s)]

	---> SongComponent::getInfo() [0 time(s)]

	---> SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

	---> SongComponent::getComponent(int) [0 time(s)]

	---> SongComponent::displayInfo() [0 time(s)]

	---> SongComponent::displayInfo() [1 time(s)]

structural.composite.SongListGenerator:
	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> DiscJockey::main(java.lang.String[]) [1 time(s)]

structural.composite.Test:
	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> SongComponent::main(java.lang.String[]) [1 time(s)]

	---> DiscJockey::main(java.lang.String[]) [1 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> Beverage::description() [0 time(s)]

	---> Beverage::price() [0 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> Beverage::description() [1 time(s)]

	---> Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> Beverage::main(java.lang.String[]) [0 time(s)]

	---> Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> Beverage::beveragesMenu() [0 time(s)]

	---> Beverage::beveragesMenu() [0 time(s)]

	---> Beverage::beveragesMenu() [0 time(s)]

	---> Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> Beverage::orderBeverage() [0 time(s)]

	---> Beverage::orderBeverage() [0 time(s)]

	---> Beverage::orderBeverage() [0 time(s)]

	---> Beverage::additionalIngredientsMenu() [0 time(s)]

	---> Beverage::additionalIngredientsMenu() [0 time(s)]

	---> Beverage::additionalIngredientsMenu() [0 time(s)]

	---> Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> BankAccount::canWithdraw(double) [0 time(s)]

	---> BankAccount::getAccountBalance() [0 time(s)]

	---> BankAccount::deposit(double) [0 time(s)]

	---> BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> BankAccountBalanceSystem::deposit(double) [0 time(s)]

	---> BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> BankAccount::withdraw(double) [1 time(s)]

	---> BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> BankAccountBalanceSystem::withdraw(double) [1 time(s)]

structural.facade.BankAccountFacade:
	---> BankAccountNumberChecker::depositCash(double) [0 time(s)]

	---> BankAccountSecurityCodeChecker::depositCash(double) [1 time(s)]

	---> BankAccountBalanceSystem::depositCash(double) [1 time(s)]

	---> BankAccountBalanceSystem::depositCash(double) [0 time(s)]

	---> BankAccountBalanceSystem::depositCash(double) [0 time(s)]

	---> BankAccountNumberChecker::withdrawCash(double) [0 time(s)]

	---> BankAccountSecurityCodeChecker::withdrawCash(double) [1 time(s)]

	---> BankAccountBalanceSystem::withdrawCash(double) [1 time(s)]

	---> BankAccountBalanceSystem::withdrawCash(double) [1 time(s)]

	---> BankAccountBalanceSystem::withdrawCash(double) [0 time(s)]

	---> BankAccountBalanceSystem::withdrawCash(double) [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> BankAccountNumberChecker::match(int) [0 time(s)]

	---> BankAccount::getAccountNumber() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> BankAccount::getAccountSecurityCode() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> BankAccount::setWelcomeMessage() [0 time(s)]

	---> BankAccount::setWelcomeMessage() [0 time(s)]

	---> BankAccount::setWelcomeMessage() [0 time(s)]

	---> BankAccount::setWelcomeMessage() [0 time(s)]

	---> BankAccount::setWelcomeMessage() [0 time(s)]

	---> BankAccount::setWelcomeMessage() [1 time(s)]

	---> BankAccount::setWelcomeMessage() [0 time(s)]

structural.facade.Test:
	---> BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> BankAccountFacade::main(java.lang.String[]) [1 time(s)]

structural.flyweight.Circle:
	---> BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

structural.flyweight.Test:
	---> BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> Circle::main(java.lang.String[]) [1 time(s)]

	---> Circle::main(java.lang.String[]) [0 time(s)]

	---> Circle::main(java.lang.String[]) [1 time(s)]

	---> Circle::main(java.lang.String[]) [0 time(s)]

	---> Circle::main(java.lang.String[]) [0 time(s)]

	---> Circle::getRandomRadius() [0 time(s)]

	---> Circle::getRandomX() [0 time(s)]

	---> Circle::getRandomY() [0 time(s)]

	---> Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> Circle::connectTo(java.lang.String) [0 time(s)]

	---> Circle::connectTo(java.lang.String) [0 time(s)]

	---> Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.RealInternet:
	---> Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> Internet::main(java.lang.String[]) [1 time(s)]

	---> Internet::main(java.lang.String[]) [1 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::getClass() [0 time(s)]

	---> ::wait(long) [0 time(s)]

	---> ::wait(long,int) [0 time(s)]

	---> ::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getFilePath() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setFilePath(java.lang.String) [0 time(s)]

behavioral.chain_of_responsibility.ILogger:
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getMessage() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setLevel(behavioral.chain_of_responsibility.LogRequestLevel) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setMessage(java.lang.String) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getLevel() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.LogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::value() [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::compareTo(java.lang.Enum) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::describeConstable() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getDeclaringClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::name() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::ordinal() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::readObject(java.io.ObjectInputStream) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::readObjectNoData() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::value() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::valueOf(java.lang.String) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::values() [0 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.command.Command:
	---> behavioral.chain_of_responsibility.ILogger::getName() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::undo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::execute() [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::notify() [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::hashCode() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::finalize() [0 time(s)]

	---> behavioral.command.Command::toString() [0 time(s)]

	---> behavioral.command.Command::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [0 time(s)]

	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.TV::registerNatives() [0 time(s)]

	---> behavioral.command.TV::notify() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::hashCode() [0 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

	---> behavioral.command.TV::finalize() [0 time(s)]

	---> behavioral.command.TV::toString() [0 time(s)]

	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.TV::registerNatives() [0 time(s)]

	---> behavioral.command.TV::notify() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::hashCode() [0 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::finalize() [0 time(s)]

	---> behavioral.command.TV::toString() [0 time(s)]

	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.TV::registerNatives() [0 time(s)]

	---> behavioral.command.TV::notify() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::hashCode() [0 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::finalize() [0 time(s)]

	---> behavioral.command.TV::toString() [0 time(s)]

	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.TV::switchChannel(int) [0 time(s)]

	---> behavioral.command.TV::registerNatives() [0 time(s)]

	---> behavioral.command.TV::notify() [0 time(s)]

	---> behavioral.command.TV::switchOff() [0 time(s)]

	---> behavioral.command.TV::hashCode() [0 time(s)]

	---> behavioral.command.TV::getChannel() [0 time(s)]

	---> behavioral.command.TV::isOn() [0 time(s)]

	---> behavioral.command.TV::finalize() [0 time(s)]

	---> behavioral.command.TV::toString() [0 time(s)]

	---> behavioral.command.TV::clone() [0 time(s)]

	---> behavioral.command.TV::switchOn() [0 time(s)]

behavioral.command.Test:
	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

	---> behavioral.command.CommandManager::registerNatives() [0 time(s)]

	---> behavioral.command.CommandManager::notify() [0 time(s)]

	---> behavioral.command.CommandManager::hashCode() [0 time(s)]

	---> behavioral.command.CommandManager::finalize() [0 time(s)]

	---> behavioral.command.CommandManager::toString() [0 time(s)]

	---> behavioral.command.CommandManager::clone() [0 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.command.CommandManager::getClass() [0 time(s)]

	---> behavioral.command.CommandManager::wait(long) [0 time(s)]

	---> behavioral.command.CommandManager::wait(long,int) [0 time(s)]

	---> behavioral.command.CommandManager::wait() [0 time(s)]

	---> behavioral.command.CommandManager::notifyAll() [0 time(s)]

	---> behavioral.command.CommandManager::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.CommandManager::registerNatives() [0 time(s)]

	---> behavioral.command.CommandManager::notify() [0 time(s)]

	---> behavioral.command.CommandManager::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

	---> behavioral.interpreter.Expression::notify() [0 time(s)]

	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.Expression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

	---> behavioral.interpreter.Expression::notify() [0 time(s)]

	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

	---> behavioral.interpreter.Expression::notify() [0 time(s)]

	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

	---> behavioral.interpreter.Expression::getIsFemaleExpression() [0 time(s)]

	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

	---> behavioral.interpreter.Expression::notify() [0 time(s)]

	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> structural.composite.Song::displaySongs() [0 time(s)]

	---> structural.composite.Song::notifyAll() [0 time(s)]

	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.Song::registerNatives() [0 time(s)]

	---> structural.composite.Song::notify() [0 time(s)]

	---> structural.composite.Song::hashCode() [0 time(s)]

	---> structural.composite.Song::finalize() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::clone() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::getClass() [0 time(s)]

	---> structural.composite.Song::wait(long) [0 time(s)]

	---> structural.composite.Song::wait(long,int) [0 time(s)]

	---> structural.composite.Song::wait() [0 time(s)]

	---> structural.composite.Song::notifyAll() [0 time(s)]

	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.Song::registerNatives() [0 time(s)]

	---> structural.composite.Song::getSongName() [0 time(s)]

	---> structural.composite.Song::notify() [0 time(s)]

	---> structural.composite.Song::hashCode() [0 time(s)]

	---> structural.composite.Song::getBandName() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::finalize() [0 time(s)]

	---> structural.composite.Song::clone() [0 time(s)]

	---> structural.composite.Song::getYearReleased() [0 time(s)]

behavioral.iterator.SongAggregate:
	---> structural.composite.Song::iterator() [0 time(s)]

	---> structural.composite.Song::spliterator() [0 time(s)]

	---> structural.composite.Song::forEach(java.util.function.Consumer) [0 time(s)]

	---> structural.composite.Song::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongArray:
	---> structural.composite.Song::getClass() [0 time(s)]

	---> structural.composite.Song::wait(long) [0 time(s)]

	---> structural.composite.Song::wait(long,int) [0 time(s)]

	---> structural.composite.Song::wait() [0 time(s)]

	---> structural.composite.Song::spliterator() [0 time(s)]

	---> structural.composite.Song::notifyAll() [0 time(s)]

	---> structural.composite.Song::forEach(java.util.function.Consumer) [0 time(s)]

	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.Song::length() [0 time(s)]

	---> structural.composite.Song::registerNatives() [0 time(s)]

	---> structural.composite.Song::notify() [0 time(s)]

	---> structural.composite.Song::hashCode() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [0 time(s)]

	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

	---> behavioral.iterator.SongArray::toString() [0 time(s)]

	---> behavioral.iterator.SongArray::clone() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

	---> behavioral.iterator.SongArray::wait() [0 time(s)]

	---> behavioral.iterator.SongArray::spliterator() [0 time(s)]

	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

	---> behavioral.iterator.SongArray::forEach(java.util.function.Consumer) [0 time(s)]

	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

	---> behavioral.iterator.SongArray::registerNatives() [0 time(s)]

	---> behavioral.iterator.SongArray::notify() [0 time(s)]

	---> behavioral.iterator.SongArray::hashCode() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

	---> behavioral.iterator.SongArray::toString() [0 time(s)]

	---> behavioral.iterator.SongArray::clone() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

	---> behavioral.iterator.SongArray::wait() [0 time(s)]

	---> behavioral.iterator.SongArray::spliterator() [0 time(s)]

	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

	---> behavioral.iterator.SongArray::forEach(java.util.function.Consumer) [0 time(s)]

	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

	---> behavioral.iterator.SongArray::registerNatives() [0 time(s)]

	---> behavioral.iterator.SongArray::notify() [0 time(s)]

	---> behavioral.iterator.SongArray::hashCode() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

	---> behavioral.iterator.SongArray::toString() [0 time(s)]

	---> behavioral.iterator.SongArray::clone() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

	---> behavioral.iterator.SongArray::wait() [0 time(s)]

	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.DiscJockey::registerNatives() [0 time(s)]

	---> behavioral.iterator.DiscJockey::notify() [0 time(s)]

	---> behavioral.iterator.DiscJockey::hashCode() [0 time(s)]

	---> behavioral.iterator.DiscJockey::finalize() [0 time(s)]

	---> behavioral.iterator.DiscJockey::toString() [0 time(s)]

	---> behavioral.iterator.DiscJockey::clone() [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::getClass() [0 time(s)]

	---> behavioral.iterator.DiscJockey::wait(long) [0 time(s)]

	---> behavioral.iterator.DiscJockey::wait(long,int) [0 time(s)]

	---> behavioral.iterator.DiscJockey::wait() [0 time(s)]

	---> behavioral.iterator.DiscJockey::notifyAll() [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::getName() [0 time(s)]

	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::notifyAll() [0 time(s)]

	---> behavioral.mediator.ChatUser::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.ChatUser::getId() [0 time(s)]

	---> behavioral.mediator.ChatUser::registerNatives() [0 time(s)]

	---> behavioral.mediator.ChatUser::notify() [0 time(s)]

	---> behavioral.mediator.ChatUser::hashCode() [0 time(s)]

	---> behavioral.mediator.ChatUser::getRoom() [0 time(s)]

	---> behavioral.mediator.ChatUser::finalize() [0 time(s)]

	---> behavioral.mediator.ChatUser::toString() [0 time(s)]

	---> behavioral.mediator.ChatUser::clone() [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

behavioral.mediator.IChatRoom:
	---> behavioral.mediator.ChatUser::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::addUser(behavioral.mediator.User) [0 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.ChatUser::getClass() [0 time(s)]

	---> behavioral.mediator.ChatUser::wait(long) [0 time(s)]

	---> behavioral.mediator.ChatUser::wait(long,int) [0 time(s)]

	---> behavioral.mediator.ChatUser::wait() [0 time(s)]

	---> behavioral.mediator.ChatUser::notifyAll() [0 time(s)]

	---> behavioral.mediator.ChatUser::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::getName() [0 time(s)]

	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::notifyAll() [0 time(s)]

	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::getId() [0 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::getRoom() [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

	---> behavioral.mediator.User::send(java.lang.String,java.lang.String) [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.mediator.User::notifyAll() [0 time(s)]

	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.mediator.User::get(int) [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.mediator.User::notifyAll() [0 time(s)]

	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::getState() [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::setState(java.lang.String) [0 time(s)]

	---> behavioral.memento.Memento::notifyAll() [0 time(s)]

	---> behavioral.memento.Memento::equals(java.lang.Object) [0 time(s)]

	---> behavioral.memento.Memento::registerNatives() [0 time(s)]

	---> behavioral.memento.Memento::notify() [0 time(s)]

	---> behavioral.memento.Memento::hashCode() [0 time(s)]

	---> behavioral.memento.Memento::getState() [0 time(s)]

	---> behavioral.memento.Memento::externalizeState() [0 time(s)]

	---> behavioral.memento.Memento::finalize() [0 time(s)]

	---> behavioral.memento.Memento::toString() [0 time(s)]

	---> behavioral.memento.Memento::clone() [0 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Memento::getClass() [0 time(s)]

	---> behavioral.memento.Memento::wait(long) [0 time(s)]

	---> behavioral.memento.Memento::wait(long,int) [0 time(s)]

	---> behavioral.memento.Memento::wait() [0 time(s)]

	---> behavioral.memento.Memento::notifyAll() [0 time(s)]

	---> behavioral.memento.Memento::equals(java.lang.Object) [0 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

	---> behavioral.memento.Originator::registerNatives() [0 time(s)]

	---> behavioral.memento.Originator::notify() [0 time(s)]

	---> behavioral.memento.Originator::hashCode() [0 time(s)]

	---> behavioral.memento.Originator::finalize() [0 time(s)]

	---> behavioral.memento.Originator::toString() [0 time(s)]

	---> behavioral.memento.Originator::clone() [0 time(s)]

behavioral.observer.Observer:
	---> behavioral.memento.Originator::update() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.memento.Originator::getClass() [0 time(s)]

	---> behavioral.memento.Originator::wait(long) [0 time(s)]

	---> behavioral.memento.Originator::wait(long,int) [0 time(s)]

	---> behavioral.memento.Originator::wait() [0 time(s)]

	---> behavioral.observer.StockGrabber::setGoogleStock(double) [0 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [0 time(s)]

	---> behavioral.observer.Observer::notifyAll() [0 time(s)]

	---> behavioral.observer.Observer::getIBMStock() [0 time(s)]

	---> behavioral.observer.Observer::equals(java.lang.Object) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::registerNatives() [0 time(s)]

	---> behavioral.observer.Observer::notify() [0 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::getGoogleStock() [0 time(s)]

	---> behavioral.observer.StockGrabber::hashCode() [0 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::getAppleStock() [0 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockGrabber::finalize() [0 time(s)]

	---> behavioral.observer.StockGrabber::toString() [0 time(s)]

	---> behavioral.observer.StockGrabber::clone() [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::getClass() [0 time(s)]

	---> behavioral.observer.StockGrabber::wait(long) [0 time(s)]

	---> behavioral.observer.StockGrabber::wait(long,int) [0 time(s)]

	---> behavioral.observer.StockGrabber::wait() [0 time(s)]

	---> behavioral.observer.StockGrabber::notifyAll() [0 time(s)]

	---> behavioral.observer.StockGrabber::equals(java.lang.Object) [0 time(s)]

	---> behavioral.observer.StockGrabber::registerNatives() [0 time(s)]

	---> behavioral.observer.StockObserver::update() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::notify() [0 time(s)]

	---> behavioral.observer.StockObserver::hashCode() [0 time(s)]

	---> behavioral.observer.StockObserver::finalize() [0 time(s)]

	---> behavioral.observer.StockObserver::toString() [0 time(s)]

	---> behavioral.observer.StockObserver::clone() [0 time(s)]

behavioral.observer.Subject:
	---> behavioral.observer.StockObserver::notifyObserver() [0 time(s)]

	---> behavioral.observer.StockObserver::register(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockObserver::unregister(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.Test:
	---> behavioral.observer.StockObserver::getClass() [0 time(s)]

	---> behavioral.observer.StockObserver::wait(long) [0 time(s)]

	---> behavioral.observer.StockObserver::wait(long,int) [0 time(s)]

	---> behavioral.observer.StockObserver::wait() [0 time(s)]

	---> behavioral.observer.StockObserver::notifyAll() [0 time(s)]

	---> behavioral.observer.StockObserver::equals(java.lang.Object) [0 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

	---> behavioral.observer.StockGrabber::registerNatives() [0 time(s)]

	---> behavioral.observer.StockGrabber::notify() [0 time(s)]

	---> behavioral.observer.StockGrabber::hashCode() [0 time(s)]

	---> behavioral.observer.StockGrabber::finalize() [0 time(s)]

	---> behavioral.observer.StockGrabber::toString() [0 time(s)]

	---> behavioral.observer.StockGrabber::clone() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.observer.StockGrabber::getClass() [0 time(s)]

	---> behavioral.observer.StockGrabber::getCashInMachine() [0 time(s)]

	---> behavioral.observer.StockGrabber::wait(long) [0 time(s)]

	---> behavioral.observer.StockGrabber::wait(long,int) [0 time(s)]

	---> behavioral.observer.StockGrabber::wait() [0 time(s)]

	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMState::notifyAll() [0 time(s)]

	---> behavioral.state.ATMState::setATMState(behavioral.state.ATMState) [0 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMState::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMState::registerNatives() [0 time(s)]

	---> behavioral.state.ATMState::getATMState() [0 time(s)]

	---> behavioral.state.ATMState::getNoCardState() [0 time(s)]

	---> behavioral.state.ATMState::notify() [0 time(s)]

	---> behavioral.state.ATMState::getHasCardState() [0 time(s)]

	---> behavioral.state.ATMState::hashCode() [0 time(s)]

	---> behavioral.state.ATMState::getNoCashState() [0 time(s)]

	---> behavioral.state.ATMState::getCorrectPinState() [0 time(s)]

	---> behavioral.state.ATMState::finalize() [0 time(s)]

	---> behavioral.state.ATMState::toString() [0 time(s)]

	---> behavioral.state.ATMState::clone() [0 time(s)]

	---> behavioral.state.ATMState::setCashInMachine(int) [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::getClass() [0 time(s)]

	---> behavioral.state.ATMState::wait(long) [0 time(s)]

	---> behavioral.state.ATMState::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMState::wait() [0 time(s)]

	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMState::notifyAll() [0 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMState::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMState::registerNatives() [0 time(s)]

	---> behavioral.state.ATMState::notify() [0 time(s)]

	---> behavioral.state.ATMState::hashCode() [0 time(s)]

	---> behavioral.state.ATMState::finalize() [0 time(s)]

	---> behavioral.state.ATMState::toString() [0 time(s)]

	---> behavioral.state.ATMState::clone() [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::getClass() [0 time(s)]

	---> behavioral.state.ATMState::wait(long) [0 time(s)]

	---> behavioral.state.ATMState::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMState::wait() [0 time(s)]

	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

	---> behavioral.state.ATMMachine::notify() [0 time(s)]

	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

	---> behavioral.state.ATMMachine::toString() [0 time(s)]

	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMMachine::wait() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

	---> behavioral.state.HasCard::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.HasCard::registerNatives() [0 time(s)]

	---> behavioral.state.HasCard::notify() [0 time(s)]

	---> behavioral.state.HasCard::hashCode() [0 time(s)]

	---> behavioral.state.HasCard::finalize() [0 time(s)]

	---> behavioral.state.HasCard::toString() [0 time(s)]

	---> behavioral.state.HasCard::clone() [0 time(s)]

behavioral.state.IATMState:
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.HasCard::ejectCard() [0 time(s)]

	---> behavioral.state.HasCard::requestCash(int) [0 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.HasCard::getClass() [0 time(s)]

	---> behavioral.state.HasCard::wait(long) [0 time(s)]

	---> behavioral.state.HasCard::wait(long,int) [0 time(s)]

	---> behavioral.state.HasCard::wait() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::notifyAll() [0 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.NoCard::registerNatives() [0 time(s)]

	---> behavioral.state.NoCard::notify() [0 time(s)]

	---> behavioral.state.NoCard::hashCode() [0 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

	---> behavioral.state.NoCard::finalize() [0 time(s)]

	---> behavioral.state.NoCard::toString() [0 time(s)]

	---> behavioral.state.NoCard::clone() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCard::getClass() [0 time(s)]

	---> behavioral.state.NoCard::wait(long) [0 time(s)]

	---> behavioral.state.NoCard::wait(long,int) [0 time(s)]

	---> behavioral.state.NoCard::wait() [0 time(s)]

	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::notifyAll() [0 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.NoCash::registerNatives() [0 time(s)]

	---> behavioral.state.NoCash::notify() [0 time(s)]

	---> behavioral.state.NoCash::hashCode() [0 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

	---> behavioral.state.NoCash::finalize() [0 time(s)]

	---> behavioral.state.NoCash::toString() [0 time(s)]

	---> behavioral.state.NoCash::clone() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.NoCash::getClass() [0 time(s)]

	---> behavioral.state.NoCash::wait(long) [0 time(s)]

	---> behavioral.state.NoCash::wait(long,int) [0 time(s)]

	---> behavioral.state.NoCash::wait() [0 time(s)]

	---> behavioral.state.NoCash::notifyAll() [0 time(s)]

	---> behavioral.state.NoCash::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

	---> behavioral.state.ATMMachine::notify() [0 time(s)]

	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

	---> behavioral.state.ATMMachine::toString() [0 time(s)]

	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMMachine::wait() [0 time(s)]

	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

	---> behavioral.state.ATMMachine::notify() [0 time(s)]

	---> behavioral.state.ATMMachine::execute(int,int) [0 time(s)]

	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

	---> behavioral.state.ATMMachine::toString() [0 time(s)]

	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.strategy.ArithmeticOperation:
	---> behavioral.state.ATMMachine::execute(int,int) [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMMachine::wait() [0 time(s)]

	---> behavioral.state.ATMMachine::reset() [0 time(s)]

	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

	---> behavioral.state.ATMMachine::notify() [0 time(s)]

	---> behavioral.state.ATMMachine::getResult() [0 time(s)]

	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::setOperation(behavioral.strategy.ArithmeticOperation) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.template_method.Game::hashCode() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::finalize() [0 time(s)]

	---> behavioral.template_method.Game::toString() [0 time(s)]

	---> behavioral.template_method.Game::clone() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::getClass() [0 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.template_method.Game::hashCode() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::finalize() [0 time(s)]

	---> behavioral.template_method.Game::toString() [0 time(s)]

	---> behavioral.template_method.Game::clone() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::getClass() [0 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.template_method.Game::hashCode() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::finalize() [0 time(s)]

	---> behavioral.template_method.Game::toString() [0 time(s)]

	---> behavioral.template_method.Game::clone() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::getClass() [0 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.template_method.Game::hashCode() [0 time(s)]

	---> behavioral.template_method.Game::finalize() [0 time(s)]

	---> behavioral.template_method.Game::toString() [0 time(s)]

	---> behavioral.template_method.Game::clone() [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.template_method.Game::getName() [0 time(s)]

	---> behavioral.template_method.Game::getClass() [0 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::setName(java.lang.String) [0 time(s)]

	---> behavioral.template_method.Game::setPrice(double) [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::getPrice() [0 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::getName() [0 time(s)]

	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.Visitor::wait() [0 time(s)]

	---> behavioral.visitor.Visitor::setName(java.lang.String) [0 time(s)]

	---> behavioral.visitor.Visitor::setPrice(double) [0 time(s)]

	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.Visitor::getPrice() [0 time(s)]

	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.Visitor::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::getName() [0 time(s)]

	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.Visitor::wait() [0 time(s)]

	---> behavioral.visitor.Visitor::setName(java.lang.String) [0 time(s)]

	---> behavioral.visitor.Visitor::setPrice(double) [0 time(s)]

	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.Visitor::getPrice() [0 time(s)]

	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.Visitor::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.Visitor::wait() [0 time(s)]

	---> behavioral.visitor.Visitor::getComputedTax() [0 time(s)]

	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.Visitor::notify() [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::getTaxRate() [0 time(s)]

	---> behavioral.visitor.Product::hashCode() [0 time(s)]

	---> behavioral.visitor.Product::finalize() [0 time(s)]

	---> behavioral.visitor.Product::toString() [0 time(s)]

	---> behavioral.visitor.Product::clone() [0 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [0 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::getComputedTax() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::getTaxRate() [0 time(s)]

	---> behavioral.visitor.Product::hashCode() [0 time(s)]

	---> behavioral.visitor.Product::finalize() [0 time(s)]

	---> behavioral.visitor.Product::toString() [0 time(s)]

	---> behavioral.visitor.Product::clone() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::hashCode() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::finalize() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::toString() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::clone() [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.TaxVisitor::getName() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::setName(java.lang.String) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::setPrice(double) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::getPrice() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Visitable:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

behavioral.visitor.Visitor:
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Liquor) [0 time(s)]

	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Necessity) [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.Visitor::wait() [0 time(s)]

	---> behavioral.visitor.Visitor::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.Visitor::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.Shape:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

	---> creational.abstract_factory.Shape::notify() [0 time(s)]

	---> creational.abstract_factory.Shape::hashCode() [0 time(s)]

	---> creational.abstract_factory.Shape::finalize() [0 time(s)]

	---> creational.abstract_factory.Shape::toString() [0 time(s)]

	---> creational.abstract_factory.Shape::clone() [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::getClass() [0 time(s)]

	---> creational.abstract_factory.Shape::wait(long) [0 time(s)]

	---> creational.abstract_factory.Shape::wait(long,int) [0 time(s)]

	---> creational.abstract_factory.Shape::wait() [0 time(s)]

	---> creational.abstract_factory.Shape::notifyAll() [0 time(s)]

	---> creational.abstract_factory.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

	---> creational.abstract_factory.Shape::draw() [0 time(s)]

	---> creational.abstract_factory.Shape::notify() [0 time(s)]

	---> creational.abstract_factory.Shape::hashCode() [0 time(s)]

	---> creational.abstract_factory.Shape::finalize() [0 time(s)]

	---> creational.abstract_factory.Shape::toString() [0 time(s)]

	---> creational.abstract_factory.Shape::clone() [0 time(s)]

creational.builder.IRobot:
	---> creational.abstract_factory.Shape::setTorso(java.lang.String) [0 time(s)]

	---> creational.abstract_factory.Shape::setArms(java.lang.String) [0 time(s)]

	---> creational.abstract_factory.Shape::setLegs(java.lang.String) [0 time(s)]

	---> creational.abstract_factory.Shape::setHead(java.lang.String) [0 time(s)]

creational.builder.IRobotBuilder:
	---> creational.abstract_factory.Shape::buildArms() [0 time(s)]

	---> creational.abstract_factory.Shape::buildHead() [0 time(s)]

	---> creational.abstract_factory.Shape::getRobot() [0 time(s)]

	---> creational.abstract_factory.Shape::buildTorso() [0 time(s)]

	---> creational.abstract_factory.Shape::buildLegs() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.abstract_factory.Shape::getClass() [0 time(s)]

	---> creational.abstract_factory.Shape::wait(long) [0 time(s)]

	---> creational.abstract_factory.Shape::wait(long,int) [0 time(s)]

	---> creational.abstract_factory.Shape::wait() [0 time(s)]

	---> creational.abstract_factory.Shape::notifyAll() [0 time(s)]

	---> creational.abstract_factory.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

	---> creational.abstract_factory.Shape::getRobot() [0 time(s)]

	---> creational.abstract_factory.Shape::notify() [0 time(s)]

	---> creational.builder.Robot::buildLegs() [0 time(s)]

	---> creational.builder.Robot::buildArms() [0 time(s)]

	---> creational.builder.Robot::hashCode() [0 time(s)]

	---> creational.builder.Robot::buildHead() [0 time(s)]

	---> creational.builder.Robot::finalize() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::clone() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::getClass() [0 time(s)]

	---> creational.builder.Robot::wait(long) [0 time(s)]

	---> creational.builder.Robot::wait(long,int) [0 time(s)]

	---> creational.builder.Robot::wait() [0 time(s)]

	---> creational.builder.Robot::setLegs(java.lang.String) [0 time(s)]

	---> creational.builder.Robot::notifyAll() [0 time(s)]

	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.Robot::setHead(java.lang.String) [0 time(s)]

	---> creational.builder.Robot::registerNatives() [0 time(s)]

	---> creational.builder.Robot::getTorso() [0 time(s)]

	---> creational.builder.Robot::notify() [0 time(s)]

	---> creational.builder.Robot::setTorso(java.lang.String) [0 time(s)]

	---> creational.builder.Robot::hashCode() [0 time(s)]

	---> creational.builder.Robot::setArms(java.lang.String) [0 time(s)]

	---> creational.builder.Robot::getArms() [0 time(s)]

	---> creational.builder.Robot::getHead() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::finalize() [0 time(s)]

	---> creational.builder.Robot::clone() [0 time(s)]

	---> creational.builder.Robot::getLegs() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::getClass() [0 time(s)]

	---> creational.builder.Robot::wait(long) [0 time(s)]

	---> creational.builder.Robot::wait(long,int) [0 time(s)]

	---> creational.builder.Robot::wait() [0 time(s)]

	---> creational.builder.Robot::notifyAll() [0 time(s)]

	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.Robot::registerNatives() [0 time(s)]

	---> creational.builder.Robot::getRobot() [0 time(s)]

	---> creational.builder.Robot::notify() [0 time(s)]

	---> creational.builder.Robot::buildLegs() [0 time(s)]

	---> creational.builder.Robot::buildArms() [0 time(s)]

	---> creational.builder.Robot::hashCode() [0 time(s)]

	---> creational.builder.Robot::buildHead() [0 time(s)]

	---> creational.builder.Robot::finalize() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::clone() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.Robot::getClass() [0 time(s)]

	---> creational.builder.Robot::wait(long) [0 time(s)]

	---> creational.builder.Robot::wait(long,int) [0 time(s)]

	---> creational.builder.Robot::wait() [0 time(s)]

	---> creational.builder.Robot::notifyAll() [0 time(s)]

	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.Robot::registerNatives() [0 time(s)]

	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::notify() [0 time(s)]

	---> creational.builder.IRobotBuilder::hashCode() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::setRobotBuilder(creational.builder.IRobotBuilder) [0 time(s)]

	---> creational.builder.IRobotBuilder::finalize() [0 time(s)]

	---> creational.builder.IRobotBuilder::toString() [0 time(s)]

	---> creational.builder.IRobotBuilder::clone() [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.IRobotBuilder::getClass() [0 time(s)]

	---> creational.builder.IRobotBuilder::wait(long) [0 time(s)]

	---> creational.builder.IRobotBuilder::wait(long,int) [0 time(s)]

	---> creational.builder.IRobotBuilder::wait() [0 time(s)]

	---> creational.builder.IRobotBuilder::notifyAll() [0 time(s)]

	---> creational.builder.IRobotBuilder::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.IRobotBuilder::registerNatives() [0 time(s)]

	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::notify() [0 time(s)]

	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::hashCode() [0 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::finalize() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::clone() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.Robot::getClass() [0 time(s)]

	---> creational.builder.Robot::wait(long) [0 time(s)]

	---> creational.builder.Robot::wait(long,int) [0 time(s)]

	---> creational.builder.Robot::wait() [0 time(s)]

	---> creational.builder.Robot::notifyAll() [0 time(s)]

	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

	---> creational.builder.RobotEngineer::notify() [0 time(s)]

	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

	---> creational.builder.RobotEngineer::toString() [0 time(s)]

	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::getName() [0 time(s)]

	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

	---> creational.builder.RobotEngineer::wait() [0 time(s)]

	---> creational.builder.RobotEngineer::setName(java.lang.String) [0 time(s)]

	---> creational.builder.RobotEngineer::getAmtDamage() [0 time(s)]

	---> creational.builder.RobotEngineer::setAmtDamage(double) [0 time(s)]

	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

	---> creational.builder.RobotEngineer::notify() [0 time(s)]

	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

	---> creational.builder.RobotEngineer::toString() [0 time(s)]

	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::getName() [0 time(s)]

	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

	---> creational.builder.RobotEngineer::wait() [0 time(s)]

	---> creational.builder.RobotEngineer::setName(java.lang.String) [0 time(s)]

	---> creational.builder.RobotEngineer::getAmtDamage() [0 time(s)]

	---> creational.builder.RobotEngineer::setAmtDamage(double) [0 time(s)]

	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

	---> creational.builder.RobotEngineer::notify() [0 time(s)]

	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

	---> creational.builder.RobotEngineer::toString() [0 time(s)]

	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

	---> creational.builder.RobotEngineer::wait() [0 time(s)]

	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

	---> creational.builder.RobotEngineer::notify() [0 time(s)]

	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

	---> creational.builder.RobotEngineer::createEnemyShip(java.lang.String) [0 time(s)]

	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

	---> creational.builder.RobotEngineer::toString() [0 time(s)]

	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

	---> creational.builder.RobotEngineer::wait() [0 time(s)]

	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShipFactory::notify() [0 time(s)]

	---> creational.factory.EnemyShipFactory::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::finalize() [0 time(s)]

	---> creational.factory.EnemyShip::toString() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::getName() [0 time(s)]

	---> creational.factory.EnemyShip::getClass() [0 time(s)]

	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

	---> creational.factory.EnemyShip::wait() [0 time(s)]

	---> creational.factory.EnemyShip::setName(java.lang.String) [0 time(s)]

	---> creational.factory.EnemyShip::getAmtDamage() [0 time(s)]

	---> creational.factory.EnemyShip::setAmtDamage(double) [0 time(s)]

	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShip::notify() [0 time(s)]

	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

	---> creational.factory.EnemyShip::finalize() [0 time(s)]

	---> creational.factory.EnemyShip::toString() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::getClass() [0 time(s)]

	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

	---> creational.factory.EnemyShip::wait() [0 time(s)]

	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShipFactory::notify() [0 time(s)]

	---> creational.factory.EnemyShipFactory::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

	---> creational.factory.EnemyShip::finalize() [0 time(s)]

	---> creational.factory.EnemyShip::toString() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::getName() [0 time(s)]

	---> creational.factory.EnemyShip::getClass() [0 time(s)]

	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

	---> creational.factory.EnemyShip::wait() [0 time(s)]

	---> creational.factory.EnemyShip::setName(java.lang.String) [0 time(s)]

	---> creational.factory.EnemyShip::getAmtDamage() [0 time(s)]

	---> creational.factory.EnemyShip::setAmtDamage(double) [0 time(s)]

	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShip::notify() [0 time(s)]

	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

	---> creational.factory.EnemyShip::finalize() [0 time(s)]

	---> creational.factory.EnemyShip::toString() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::getClass() [0 time(s)]

	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

	---> creational.factory.EnemyShip::wait() [0 time(s)]

	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShip::getId() [0 time(s)]

	---> creational.factory.EnemyShip::setPosition(creational.prototype.Position) [0 time(s)]

	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShip::draw() [0 time(s)]

	---> creational.factory.EnemyShip::getPosition() [0 time(s)]

	---> creational.factory.EnemyShip::notify() [0 time(s)]

	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::getType() [0 time(s)]

	---> creational.factory.EnemyShip::setId(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::setX(double) [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::setY(double) [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::getX() [0 time(s)]

	---> creational.prototype.Shape::getY() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

	---> creational.prototype.Position::finalize() [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::getClass() [0 time(s)]

	---> creational.prototype.Position::wait(long) [0 time(s)]

	---> creational.prototype.Position::wait(long,int) [0 time(s)]

	---> creational.prototype.Position::wait() [0 time(s)]

	---> creational.prototype.Position::notifyAll() [0 time(s)]

	---> creational.prototype.Position::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Position::getId() [0 time(s)]

	---> creational.prototype.Position::setPosition(creational.prototype.Position) [0 time(s)]

	---> creational.prototype.Position::registerNatives() [0 time(s)]

	---> creational.prototype.Position::draw() [0 time(s)]

	---> creational.prototype.Position::getPosition() [0 time(s)]

	---> creational.prototype.Position::notify() [0 time(s)]

	---> creational.prototype.Position::hashCode() [0 time(s)]

	---> creational.prototype.Position::getType() [0 time(s)]

	---> creational.prototype.Position::setId(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::getId() [0 time(s)]

	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::draw() [0 time(s)]

	---> creational.prototype.Shape::getPosition() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::getType() [0 time(s)]

	---> creational.prototype.Shape::setId(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::getClass() [0 time(s)]

	---> creational.prototype.Rectangle::wait(long) [0 time(s)]

	---> creational.prototype.Rectangle::wait(long,int) [0 time(s)]

	---> creational.prototype.Rectangle::wait() [0 time(s)]

	---> creational.prototype.Rectangle::notifyAll() [0 time(s)]

	---> creational.prototype.Rectangle::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::getId() [0 time(s)]

	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::draw() [0 time(s)]

	---> creational.prototype.Shape::getPosition() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::getType() [0 time(s)]

	---> creational.prototype.Shape::setId(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

	---> creational.singleton.ExtendedSingleton2::registerNatives() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::notify() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::hashCode() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::finalize() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::toString() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::clone() [0 time(s)]

structural.adapter.EnemyAttacker:
	---> creational.singleton.ExtendedSingleton2::fireWeapon() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::driveForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::getClass() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait(long) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait(long,int) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::notifyAll() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::registerNatives() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::notify() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::hashCode() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::finalize() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::toString() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::clone() [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> creational.singleton.ExtendedSingleton2::getClass() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait(long) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait(long,int) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

	---> structural.adapter.EnemyRobot::registerNatives() [0 time(s)]

	---> structural.adapter.EnemyRobot::notify() [0 time(s)]

	---> structural.adapter.EnemyRobot::setRobot(structural.adapter.EnemyRobot) [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::hashCode() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

	---> structural.adapter.EnemyRobot::finalize() [0 time(s)]

	---> structural.adapter.EnemyRobot::toString() [0 time(s)]

	---> structural.adapter.EnemyRobot::clone() [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::getClass() [0 time(s)]

	---> structural.adapter.EnemyRobot::wait(long) [0 time(s)]

	---> structural.adapter.EnemyRobot::wait(long,int) [0 time(s)]

	---> structural.adapter.EnemyRobot::wait() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

	---> structural.adapter.EnemyRobot::registerNatives() [0 time(s)]

	---> structural.adapter.EnemyRobot::notify() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::hashCode() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

	---> structural.adapter.EnemyRobot::finalize() [0 time(s)]

	---> structural.adapter.EnemyRobot::toString() [0 time(s)]

	---> structural.adapter.EnemyRobot::clone() [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::getClass() [0 time(s)]

	---> structural.adapter.EnemyRobot::wait(long) [0 time(s)]

	---> structural.adapter.EnemyRobot::wait(long,int) [0 time(s)]

	---> structural.adapter.EnemyRobot::wait() [0 time(s)]

	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyAttacker::registerNatives() [0 time(s)]

	---> structural.adapter.EnemyAttacker::notify() [0 time(s)]

	---> structural.adapter.EnemyAttacker::hashCode() [0 time(s)]

	---> structural.adapter.EnemyAttacker::finalize() [0 time(s)]

	---> structural.adapter.EnemyAttacker::toString() [0 time(s)]

	---> structural.adapter.EnemyAttacker::clone() [0 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::getClass() [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait(long) [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait(long,int) [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait() [0 time(s)]

	---> structural.adapter.EnemyAttacker::notifyAll() [0 time(s)]

	---> structural.adapter.EnemyAttacker::equals(java.lang.Object) [0 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyAttacker::registerNatives() [0 time(s)]

	---> structural.adapter.EnemyAttacker::notify() [0 time(s)]

	---> structural.adapter.EnemyAttacker::hashCode() [0 time(s)]

	---> structural.adapter.EnemyAttacker::finalize() [0 time(s)]

	---> structural.adapter.EnemyAttacker::toString() [0 time(s)]

	---> structural.adapter.EnemyAttacker::clone() [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.adapter.EnemyAttacker::getClass() [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait(long) [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait(long,int) [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait() [0 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::getName() [0 time(s)]

	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::setChannel(int) [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::setVolume(int) [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::enable() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::getVolume() [0 time(s)]

	---> structural.bridge.Device::getChannel() [0 time(s)]

	---> structural.bridge.Device::disable() [0 time(s)]

	---> structural.bridge.Device::isEnabled() [0 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::getName() [0 time(s)]

	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::setChannel(int) [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::setVolume(int) [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::enable() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::getVolume() [0 time(s)]

	---> structural.bridge.Device::getChannel() [0 time(s)]

	---> structural.bridge.Device::disable() [0 time(s)]

	---> structural.bridge.Device::isEnabled() [0 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::getName() [0 time(s)]

	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::setChannel(int) [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::setVolume(int) [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::enable() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::getVolume() [0 time(s)]

	---> structural.bridge.Device::getChannel() [0 time(s)]

	---> structural.bridge.Device::disable() [0 time(s)]

	---> structural.bridge.Device::isEnabled() [0 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::finalize() [0 time(s)]

	---> structural.bridge.AdvancedRemote::toString() [0 time(s)]

	---> structural.bridge.AdvancedRemote::clone() [0 time(s)]

structural.composite.DiscJockey:
	---> structural.bridge.AdvancedRemote::getClass() [0 time(s)]

	---> structural.bridge.AdvancedRemote::wait(long) [0 time(s)]

	---> structural.bridge.AdvancedRemote::wait(long,int) [0 time(s)]

	---> structural.bridge.AdvancedRemote::wait() [0 time(s)]

	---> structural.bridge.AdvancedRemote::notifyAll() [0 time(s)]

	---> structural.bridge.AdvancedRemote::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.AdvancedRemote::registerNatives() [0 time(s)]

	---> structural.bridge.AdvancedRemote::notify() [0 time(s)]

	---> structural.bridge.AdvancedRemote::hashCode() [0 time(s)]

	---> structural.bridge.AdvancedRemote::getSongList() [0 time(s)]

	---> structural.composite.SongComponent::displaySongList() [0 time(s)]

	---> structural.composite.SongComponent::finalize() [0 time(s)]

	---> structural.composite.SongComponent::toString() [0 time(s)]

	---> structural.composite.SongComponent::clone() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

	---> structural.composite.SongComponent::wait(long) [0 time(s)]

	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

	---> structural.composite.SongComponent::wait() [0 time(s)]

	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::notifyAll() [0 time(s)]

	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.Song::registerNatives() [0 time(s)]

	---> structural.composite.Song::getSongName() [0 time(s)]

	---> structural.composite.Song::notify() [0 time(s)]

	---> structural.composite.Song::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.Song::hashCode() [0 time(s)]

	---> structural.composite.Song::getBandName() [0 time(s)]

	---> structural.composite.Song::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::finalize() [0 time(s)]

	---> structural.composite.SongComponent::toString() [0 time(s)]

	---> structural.composite.SongComponent::clone() [0 time(s)]

	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

	---> structural.composite.SongComponent::wait(long) [0 time(s)]

	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

	---> structural.composite.SongComponent::wait() [0 time(s)]

	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.SongComponent::registerNatives() [0 time(s)]

	---> structural.composite.SongComponent::getSongName() [0 time(s)]

	---> structural.composite.SongComponent::notify() [0 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::hashCode() [0 time(s)]

	---> structural.composite.SongComponent::getBandName() [0 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::finalize() [0 time(s)]

	---> structural.composite.SongComponent::toString() [0 time(s)]

	---> structural.composite.SongComponent::clone() [0 time(s)]

	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

	---> structural.composite.SongComponent::wait(long) [0 time(s)]

	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

	---> structural.composite.SongComponent::wait() [0 time(s)]

	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.SongComponent::registerNatives() [0 time(s)]

	---> structural.composite.SongComponent::getSongName() [0 time(s)]

	---> structural.composite.SongComponent::notify() [0 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getGroupName() [0 time(s)]

	---> structural.composite.SongComponent::hashCode() [0 time(s)]

	---> structural.composite.SongComponent::getBandName() [0 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::getGroupDescription() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::finalize() [0 time(s)]

	---> structural.composite.SongComponent::toString() [0 time(s)]

	---> structural.composite.SongComponent::clone() [0 time(s)]

	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

	---> structural.composite.SongComponent::wait(long) [0 time(s)]

	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

	---> structural.composite.SongComponent::wait() [0 time(s)]

	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

	---> structural.composite.DiscJockey::notify() [0 time(s)]

	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

	---> structural.composite.DiscJockey::finalize() [0 time(s)]

	---> structural.composite.DiscJockey::toString() [0 time(s)]

	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

	---> structural.composite.DiscJockey::wait() [0 time(s)]

	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

	---> structural.composite.DiscJockey::notify() [0 time(s)]

	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

	---> structural.composite.DiscJockey::finalize() [0 time(s)]

	---> structural.composite.DiscJockey::toString() [0 time(s)]

	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

	---> structural.composite.DiscJockey::wait() [0 time(s)]

	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

	---> structural.composite.DiscJockey::description() [0 time(s)]

	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

	---> structural.composite.DiscJockey::notify() [0 time(s)]

	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

	---> structural.composite.DiscJockey::price() [0 time(s)]

	---> structural.composite.DiscJockey::finalize() [0 time(s)]

	---> structural.composite.DiscJockey::toString() [0 time(s)]

	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

	---> structural.composite.DiscJockey::wait() [0 time(s)]

	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

	---> structural.composite.DiscJockey::description() [0 time(s)]

	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

	---> structural.composite.DiscJockey::notify() [0 time(s)]

	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

	---> structural.composite.DiscJockey::price() [0 time(s)]

	---> structural.composite.DiscJockey::finalize() [0 time(s)]

	---> structural.composite.DiscJockey::toString() [0 time(s)]

	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

	---> structural.composite.DiscJockey::wait() [0 time(s)]

	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.IBeverage:
	---> structural.decorator.Beverage::price() [0 time(s)]

	---> structural.decorator.Beverage::description() [0 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::setNumber(int) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::getNumber() [0 time(s)]

	---> structural.decorator.Beverage::setSecurityCode(int) [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::getBalance() [0 time(s)]

	---> structural.decorator.Beverage::getSecurityCode() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

	---> structural.decorator.Beverage::setBalance(double) [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.facade.BankAccount::canWithdraw(double) [0 time(s)]

	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [0 time(s)]

	---> structural.facade.BankAccount::notify() [0 time(s)]

	---> structural.facade.BankAccount::hashCode() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::finalize() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::toString() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::clone() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::getClass() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait(long) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::notify() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::hashCode() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::getSecurityCode() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::getAccountNumber() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::fetchBankAccount() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::finalize() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::toString() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::clone() [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountBalanceSystem::getClass() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait(long) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountNumberChecker::match(int) [0 time(s)]

	---> structural.facade.BankAccountNumberChecker::notify() [0 time(s)]

	---> structural.facade.BankAccountNumberChecker::hashCode() [0 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [0 time(s)]

	---> structural.facade.BankAccount::finalize() [0 time(s)]

	---> structural.facade.BankAccount::toString() [0 time(s)]

	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccount::getClass() [0 time(s)]

	---> structural.facade.BankAccount::wait(long) [0 time(s)]

	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccount::wait() [0 time(s)]

	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::notify() [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::hashCode() [0 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [0 time(s)]

	---> structural.facade.BankAccount::finalize() [0 time(s)]

	---> structural.facade.BankAccount::toString() [0 time(s)]

	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::getClass() [0 time(s)]

	---> structural.facade.BankAccount::wait(long) [0 time(s)]

	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccount::wait() [0 time(s)]

	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

	---> structural.facade.BankAccount::notify() [0 time(s)]

	---> structural.facade.BankAccount::hashCode() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::finalize() [0 time(s)]

	---> structural.facade.BankAccount::toString() [0 time(s)]

	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccount::getClass() [0 time(s)]

	---> structural.facade.BankAccount::wait(long) [0 time(s)]

	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccount::wait() [0 time(s)]

	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::getRadius() [0 time(s)]

	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

	---> structural.facade.BankAccountFacade::setRadius(int) [0 time(s)]

	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

	---> structural.facade.BankAccountFacade::setX(double) [0 time(s)]

	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountFacade::setY(double) [0 time(s)]

	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

	---> structural.facade.BankAccountFacade::getX() [0 time(s)]

	---> structural.facade.BankAccountFacade::getY() [0 time(s)]

	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Shape:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::registerNatives() [0 time(s)]

	---> structural.flyweight.Circle::notify() [0 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

	---> structural.flyweight.Circle::hashCode() [0 time(s)]

	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

	---> structural.flyweight.Circle::finalize() [0 time(s)]

	---> structural.flyweight.Circle::toString() [0 time(s)]

	---> structural.flyweight.Circle::clone() [0 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::getClass() [0 time(s)]

	---> structural.flyweight.Circle::wait(long) [0 time(s)]

	---> structural.flyweight.Circle::wait(long,int) [0 time(s)]

	---> structural.flyweight.Circle::wait() [0 time(s)]

	---> structural.flyweight.Circle::notifyAll() [0 time(s)]

	---> structural.flyweight.Circle::equals(java.lang.Object) [0 time(s)]

	---> structural.flyweight.Circle::registerNatives() [0 time(s)]

	---> structural.flyweight.Circle::notify() [0 time(s)]

	---> structural.flyweight.Circle::hashCode() [0 time(s)]

	---> structural.flyweight.Circle::finalize() [0 time(s)]

	---> structural.flyweight.Circle::toString() [0 time(s)]

	---> structural.flyweight.Circle::clone() [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::getClass() [0 time(s)]

	---> structural.proxy.Internet::wait(long) [0 time(s)]

	---> structural.proxy.Internet::wait(long,int) [0 time(s)]

	---> structural.proxy.Internet::wait() [0 time(s)]

	---> structural.proxy.Internet::notifyAll() [0 time(s)]

	---> structural.proxy.Internet::equals(java.lang.Object) [0 time(s)]

	---> structural.proxy.Internet::registerNatives() [0 time(s)]

	---> structural.proxy.Internet::notify() [0 time(s)]

	---> structural.proxy.Internet::hashCode() [0 time(s)]

	---> structural.proxy.Internet::finalize() [0 time(s)]

	---> structural.proxy.Internet::toString() [0 time(s)]

	---> structural.proxy.Internet::clone() [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::getClass() [0 time(s)]

	---> structural.proxy.Internet::wait(long) [0 time(s)]

	---> structural.proxy.Internet::wait(long,int) [0 time(s)]

	---> structural.proxy.Internet::wait() [0 time(s)]

	---> structural.proxy.Internet::notifyAll() [0 time(s)]

	---> structural.proxy.Internet::equals(java.lang.Object) [0 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]

	---> structural.proxy.Internet::registerNatives() [0 time(s)]

	---> structural.proxy.Internet::notify() [0 time(s)]

	---> structural.proxy.Internet::hashCode() [0 time(s)]

	---> structural.proxy.Internet::finalize() [0 time(s)]

	---> structural.proxy.Internet::toString() [0 time(s)]

	---> structural.proxy.Internet::clone() [0 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [0 time(s)]

	---> behavioral.command.TV::execute() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [0 time(s)]

	---> structural.composite.Song::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.mediator.User::get(int) [0 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [0 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [0 time(s)]

	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockObserver::update() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [0 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [0 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [0 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [0 time(s)]

	---> creational.builder.Robot::buildArms() [0 time(s)]

	---> creational.builder.Robot::buildHead() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [0 time(s)]

	---> creational.prototype.Position::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Triangle::loadCache() [3 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Rectangle::loadCache() [6 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [0 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::channelDown() [0 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [0 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [0 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [0 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [0 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [0 time(s)]

	---> structural.facade.BankAccount::deposit(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [0 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:getClass
behavioral.chain_of_responsibility.ConsoleLogger:wait
behavioral.chain_of_responsibility.ConsoleLogger:wait
behavioral.chain_of_responsibility.ConsoleLogger:wait
behavioral.chain_of_responsibility.ConsoleLogger:write
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

behavioral.chain_of_responsibility.ConsoleLogger:log
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

behavioral.chain_of_responsibility.ConsoleLogger:notifyAll
behavioral.chain_of_responsibility.ConsoleLogger:equals
behavioral.chain_of_responsibility.ConsoleLogger:registerNatives
behavioral.chain_of_responsibility.ConsoleLogger:notify
behavioral.chain_of_responsibility.ConsoleLogger:hashCode
behavioral.chain_of_responsibility.ConsoleLogger:setNextLogger
behavioral.chain_of_responsibility.ConsoleLogger:finalize
behavioral.chain_of_responsibility.ConsoleLogger:toString
behavioral.chain_of_responsibility.ConsoleLogger:clone
behavioral.chain_of_responsibility.ErrorLogger:getClass
behavioral.chain_of_responsibility.ErrorLogger:wait
behavioral.chain_of_responsibility.ErrorLogger:wait
behavioral.chain_of_responsibility.ErrorLogger:wait
behavioral.chain_of_responsibility.ErrorLogger:write
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:log
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:notifyAll
behavioral.chain_of_responsibility.ErrorLogger:equals
behavioral.chain_of_responsibility.ErrorLogger:registerNatives
behavioral.chain_of_responsibility.ErrorLogger:notify
behavioral.chain_of_responsibility.ErrorLogger:hashCode
behavioral.chain_of_responsibility.ErrorLogger:setNextLogger
behavioral.chain_of_responsibility.ErrorLogger:finalize
behavioral.chain_of_responsibility.ErrorLogger:toString
behavioral.chain_of_responsibility.ErrorLogger:clone
behavioral.chain_of_responsibility.FileLogger:getClass
behavioral.chain_of_responsibility.FileLogger:wait
behavioral.chain_of_responsibility.FileLogger:wait
behavioral.chain_of_responsibility.FileLogger:wait
behavioral.chain_of_responsibility.FileLogger:write
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

behavioral.chain_of_responsibility.FileLogger:log
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:notifyAll
behavioral.chain_of_responsibility.FileLogger:equals
behavioral.chain_of_responsibility.FileLogger:registerNatives
behavioral.chain_of_responsibility.FileLogger:notify
behavioral.chain_of_responsibility.FileLogger:hashCode
behavioral.chain_of_responsibility.FileLogger:setNextLogger
behavioral.chain_of_responsibility.FileLogger:getFilePath
behavioral.chain_of_responsibility.FileLogger:finalize
behavioral.chain_of_responsibility.FileLogger:toString
behavioral.chain_of_responsibility.FileLogger:clone
behavioral.chain_of_responsibility.FileLogger:setFilePath
behavioral.chain_of_responsibility.ILogger:log
behavioral.chain_of_responsibility.ILogger:setNextLogger
behavioral.chain_of_responsibility.LogRequest:getClass
behavioral.chain_of_responsibility.LogRequest:wait
behavioral.chain_of_responsibility.LogRequest:wait
behavioral.chain_of_responsibility.LogRequest:wait
behavioral.chain_of_responsibility.LogRequest:notifyAll
behavioral.chain_of_responsibility.LogRequest:equals
behavioral.chain_of_responsibility.LogRequest:registerNatives
behavioral.chain_of_responsibility.LogRequest:getMessage
behavioral.chain_of_responsibility.LogRequest:notify
behavioral.chain_of_responsibility.LogRequest:setLevel
behavioral.chain_of_responsibility.LogRequest:setMessage
behavioral.chain_of_responsibility.LogRequest:getLevel
behavioral.chain_of_responsibility.LogRequest:hashCode
behavioral.chain_of_responsibility.LogRequest:finalize
behavioral.chain_of_responsibility.LogRequest:toString
behavioral.chain_of_responsibility.LogRequest:clone
behavioral.chain_of_responsibility.LogRequestLevel:value
behavioral.chain_of_responsibility.Logger:getClass
behavioral.chain_of_responsibility.Logger:wait
behavioral.chain_of_responsibility.Logger:wait
behavioral.chain_of_responsibility.Logger:wait
behavioral.chain_of_responsibility.Logger:write
behavioral.chain_of_responsibility.Logger:log
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.Logger:notifyAll
behavioral.chain_of_responsibility.Logger:equals
behavioral.chain_of_responsibility.Logger:registerNatives
behavioral.chain_of_responsibility.Logger:notify
behavioral.chain_of_responsibility.Logger:hashCode
behavioral.chain_of_responsibility.Logger:setNextLogger
behavioral.chain_of_responsibility.Logger:finalize
behavioral.chain_of_responsibility.Logger:toString
behavioral.chain_of_responsibility.Logger:clone
behavioral.chain_of_responsibility.StandardLogRequestLevel:clone
behavioral.chain_of_responsibility.StandardLogRequestLevel:compareTo
behavioral.chain_of_responsibility.StandardLogRequestLevel:describeConstable
behavioral.chain_of_responsibility.StandardLogRequestLevel:equals
behavioral.chain_of_responsibility.StandardLogRequestLevel:finalize
behavioral.chain_of_responsibility.StandardLogRequestLevel:getDeclaringClass
behavioral.chain_of_responsibility.StandardLogRequestLevel:hashCode
behavioral.chain_of_responsibility.StandardLogRequestLevel:name
behavioral.chain_of_responsibility.StandardLogRequestLevel:ordinal
behavioral.chain_of_responsibility.StandardLogRequestLevel:readObject
behavioral.chain_of_responsibility.StandardLogRequestLevel:readObjectNoData
behavioral.chain_of_responsibility.StandardLogRequestLevel:toString
behavioral.chain_of_responsibility.StandardLogRequestLevel:value
behavioral.chain_of_responsibility.StandardLogRequestLevel:valueOf
behavioral.chain_of_responsibility.StandardLogRequestLevel:valueOf
behavioral.chain_of_responsibility.StandardLogRequestLevel:values
behavioral.chain_of_responsibility.Test:getClass
behavioral.chain_of_responsibility.Test:wait
behavioral.chain_of_responsibility.Test:wait
behavioral.chain_of_responsibility.Test:wait
behavioral.chain_of_responsibility.Test:notifyAll
behavioral.chain_of_responsibility.Test:equals
behavioral.chain_of_responsibility.Test:main
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

behavioral.chain_of_responsibility.Test:registerNatives
behavioral.chain_of_responsibility.Test:notify
behavioral.chain_of_responsibility.Test:hashCode
behavioral.chain_of_responsibility.Test:getChainOfLoggers
	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

behavioral.chain_of_responsibility.Test:finalize
behavioral.chain_of_responsibility.Test:toString
behavioral.chain_of_responsibility.Test:clone
behavioral.command.Command:getName
behavioral.command.Command:undo
behavioral.command.Command:execute
behavioral.command.CommandManager:getClass
behavioral.command.CommandManager:wait
behavioral.command.CommandManager:wait
behavioral.command.CommandManager:wait
behavioral.command.CommandManager:getRegistryKey
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

behavioral.command.CommandManager:notifyAll
behavioral.command.CommandManager:equals
behavioral.command.CommandManager:registerNatives
behavioral.command.CommandManager:history
	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

behavioral.command.CommandManager:redo
	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

behavioral.command.CommandManager:notify
behavioral.command.CommandManager:execute
	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

behavioral.command.CommandManager:hashCode
behavioral.command.CommandManager:undo
	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

behavioral.command.CommandManager:finalize
behavioral.command.CommandManager:toString
behavioral.command.CommandManager:clone
behavioral.command.CommandManager:getInstance
	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

behavioral.command.SwitchChannelCommand:getName
	---> behavioral.command.TV::getName() [0 time(s)]

behavioral.command.SwitchChannelCommand:getClass
behavioral.command.SwitchChannelCommand:wait
behavioral.command.SwitchChannelCommand:wait
behavioral.command.SwitchChannelCommand:wait
behavioral.command.SwitchChannelCommand:notifyAll
behavioral.command.SwitchChannelCommand:equals
behavioral.command.SwitchChannelCommand:registerNatives
behavioral.command.SwitchChannelCommand:notify
behavioral.command.SwitchChannelCommand:execute
	---> behavioral.command.TV::execute() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

behavioral.command.SwitchChannelCommand:hashCode
behavioral.command.SwitchChannelCommand:undo
	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchChannelCommand:finalize
behavioral.command.SwitchChannelCommand:toString
behavioral.command.SwitchChannelCommand:clone
behavioral.command.SwitchOffCommand:getName
	---> behavioral.command.TV::getName() [1 time(s)]

behavioral.command.SwitchOffCommand:getClass
behavioral.command.SwitchOffCommand:wait
behavioral.command.SwitchOffCommand:wait
behavioral.command.SwitchOffCommand:wait
behavioral.command.SwitchOffCommand:notifyAll
behavioral.command.SwitchOffCommand:equals
behavioral.command.SwitchOffCommand:registerNatives
behavioral.command.SwitchOffCommand:notify
behavioral.command.SwitchOffCommand:execute
	---> behavioral.command.TV::execute() [1 time(s)]

behavioral.command.SwitchOffCommand:hashCode
behavioral.command.SwitchOffCommand:undo
	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOffCommand:finalize
behavioral.command.SwitchOffCommand:toString
behavioral.command.SwitchOffCommand:clone
behavioral.command.SwitchOnCommand:getName
	---> behavioral.command.TV::getName() [1 time(s)]

behavioral.command.SwitchOnCommand:getClass
behavioral.command.SwitchOnCommand:wait
behavioral.command.SwitchOnCommand:wait
behavioral.command.SwitchOnCommand:wait
behavioral.command.SwitchOnCommand:notifyAll
behavioral.command.SwitchOnCommand:equals
behavioral.command.SwitchOnCommand:registerNatives
behavioral.command.SwitchOnCommand:notify
behavioral.command.SwitchOnCommand:execute
	---> behavioral.command.TV::execute() [1 time(s)]

behavioral.command.SwitchOnCommand:hashCode
behavioral.command.SwitchOnCommand:undo
	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:finalize
behavioral.command.SwitchOnCommand:toString
behavioral.command.SwitchOnCommand:clone
behavioral.command.TV:getClass
behavioral.command.TV:wait
behavioral.command.TV:wait
behavioral.command.TV:wait
behavioral.command.TV:notifyAll
behavioral.command.TV:equals
behavioral.command.TV:switchChannel
behavioral.command.TV:registerNatives
behavioral.command.TV:notify
behavioral.command.TV:switchOff
behavioral.command.TV:hashCode
behavioral.command.TV:getChannel
behavioral.command.TV:isOn
behavioral.command.TV:finalize
behavioral.command.TV:toString
behavioral.command.TV:clone
behavioral.command.TV:switchOn
behavioral.command.Test:getClass
behavioral.command.Test:wait
behavioral.command.Test:wait
behavioral.command.Test:wait
behavioral.command.Test:notifyAll
behavioral.command.Test:equals
behavioral.command.Test:main
	---> behavioral.command.TV::main(java.lang.String[]) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

behavioral.command.Test:registerNatives
behavioral.command.Test:notify
behavioral.command.Test:hashCode
behavioral.command.Test:finalize
behavioral.command.Test:toString
behavioral.command.Test:clone
behavioral.interpreter.AndExpression:getClass
behavioral.interpreter.AndExpression:wait
behavioral.interpreter.AndExpression:wait
behavioral.interpreter.AndExpression:wait
behavioral.interpreter.AndExpression:notifyAll
behavioral.interpreter.AndExpression:equals
behavioral.interpreter.AndExpression:registerNatives
behavioral.interpreter.AndExpression:notify
behavioral.interpreter.AndExpression:hashCode
behavioral.interpreter.AndExpression:interpret
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.AndExpression:finalize
behavioral.interpreter.AndExpression:toString
behavioral.interpreter.AndExpression:clone
behavioral.interpreter.BinaryExpression:getClass
behavioral.interpreter.BinaryExpression:wait
behavioral.interpreter.BinaryExpression:wait
behavioral.interpreter.BinaryExpression:wait
behavioral.interpreter.BinaryExpression:notifyAll
behavioral.interpreter.BinaryExpression:equals
behavioral.interpreter.BinaryExpression:registerNatives
behavioral.interpreter.BinaryExpression:notify
behavioral.interpreter.BinaryExpression:hashCode
behavioral.interpreter.BinaryExpression:interpret
behavioral.interpreter.BinaryExpression:finalize
behavioral.interpreter.BinaryExpression:toString
behavioral.interpreter.BinaryExpression:clone
behavioral.interpreter.Expression:interpret
behavioral.interpreter.OrExpression:getClass
behavioral.interpreter.OrExpression:wait
behavioral.interpreter.OrExpression:wait
behavioral.interpreter.OrExpression:wait
behavioral.interpreter.OrExpression:notifyAll
behavioral.interpreter.OrExpression:equals
behavioral.interpreter.OrExpression:registerNatives
behavioral.interpreter.OrExpression:notify
behavioral.interpreter.OrExpression:hashCode
behavioral.interpreter.OrExpression:interpret
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.OrExpression:finalize
behavioral.interpreter.OrExpression:toString
behavioral.interpreter.OrExpression:clone
behavioral.interpreter.TerminalExpression:getClass
behavioral.interpreter.TerminalExpression:wait
behavioral.interpreter.TerminalExpression:wait
behavioral.interpreter.TerminalExpression:wait
behavioral.interpreter.TerminalExpression:notifyAll
behavioral.interpreter.TerminalExpression:equals
behavioral.interpreter.TerminalExpression:registerNatives
behavioral.interpreter.TerminalExpression:notify
behavioral.interpreter.TerminalExpression:hashCode
behavioral.interpreter.TerminalExpression:interpret
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.TerminalExpression:finalize
behavioral.interpreter.TerminalExpression:toString
behavioral.interpreter.TerminalExpression:clone
behavioral.interpreter.Test:getClass
behavioral.interpreter.Test:wait
behavioral.interpreter.Test:wait
behavioral.interpreter.Test:wait
behavioral.interpreter.Test:notifyAll
behavioral.interpreter.Test:getIsFemaleExpression
behavioral.interpreter.Test:equals
behavioral.interpreter.Test:main
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

behavioral.interpreter.Test:registerNatives
behavioral.interpreter.Test:notify
behavioral.interpreter.Test:hashCode
behavioral.interpreter.Test:getIsMarriedWomanExpression
	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

behavioral.interpreter.Test:finalize
behavioral.interpreter.Test:toString
behavioral.interpreter.Test:clone
behavioral.iterator.DiscJockey:getClass
behavioral.iterator.DiscJockey:wait
behavioral.iterator.DiscJockey:wait
behavioral.iterator.DiscJockey:wait
behavioral.iterator.DiscJockey:displaySongs
	---> structural.composite.Song::displaySongs() [0 time(s)]

behavioral.iterator.DiscJockey:notifyAll
behavioral.iterator.DiscJockey:equals
behavioral.iterator.DiscJockey:registerNatives
behavioral.iterator.DiscJockey:notify
behavioral.iterator.DiscJockey:hashCode
behavioral.iterator.DiscJockey:finalize
behavioral.iterator.DiscJockey:toString
behavioral.iterator.DiscJockey:clone
behavioral.iterator.Song:getClass
behavioral.iterator.Song:wait
behavioral.iterator.Song:wait
behavioral.iterator.Song:wait
behavioral.iterator.Song:notifyAll
behavioral.iterator.Song:equals
behavioral.iterator.Song:registerNatives
behavioral.iterator.Song:getSongName
behavioral.iterator.Song:notify
behavioral.iterator.Song:hashCode
behavioral.iterator.Song:getBandName
behavioral.iterator.Song:toString
	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

behavioral.iterator.Song:finalize
behavioral.iterator.Song:clone
behavioral.iterator.Song:getYearReleased
behavioral.iterator.SongAggregate:iterator
behavioral.iterator.SongAggregate:spliterator
behavioral.iterator.SongAggregate:forEach
behavioral.iterator.SongAggregate:addSong
behavioral.iterator.SongArray:getClass
behavioral.iterator.SongArray:wait
behavioral.iterator.SongArray:wait
behavioral.iterator.SongArray:wait
behavioral.iterator.SongArray:spliterator
behavioral.iterator.SongArray:notifyAll
behavioral.iterator.SongArray:forEach
behavioral.iterator.SongArray:equals
behavioral.iterator.SongArray:length
behavioral.iterator.SongArray:registerNatives
behavioral.iterator.SongArray:notify
behavioral.iterator.SongArray:hashCode
behavioral.iterator.SongArray:iterator
	---> structural.composite.Song::iterator() [0 time(s)]

	---> structural.composite.Song::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

behavioral.iterator.SongArray:getFilledArray
	---> behavioral.iterator.SongArray::getFilledArray() [0 time(s)]

behavioral.iterator.SongArray:finalize
behavioral.iterator.SongArray:toString
behavioral.iterator.SongArray:clone
behavioral.iterator.SongArray:addSong
behavioral.iterator.SongHashtable:getClass
behavioral.iterator.SongHashtable:wait
behavioral.iterator.SongHashtable:wait
behavioral.iterator.SongHashtable:wait
behavioral.iterator.SongHashtable:spliterator
behavioral.iterator.SongHashtable:notifyAll
behavioral.iterator.SongHashtable:forEach
behavioral.iterator.SongHashtable:equals
behavioral.iterator.SongHashtable:registerNatives
behavioral.iterator.SongHashtable:notify
behavioral.iterator.SongHashtable:hashCode
behavioral.iterator.SongHashtable:iterator
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

behavioral.iterator.SongHashtable:finalize
behavioral.iterator.SongHashtable:toString
behavioral.iterator.SongHashtable:clone
behavioral.iterator.SongHashtable:addSong
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:getClass
behavioral.iterator.SongList:wait
behavioral.iterator.SongList:wait
behavioral.iterator.SongList:wait
behavioral.iterator.SongList:spliterator
behavioral.iterator.SongList:notifyAll
behavioral.iterator.SongList:forEach
behavioral.iterator.SongList:equals
behavioral.iterator.SongList:registerNatives
behavioral.iterator.SongList:notify
behavioral.iterator.SongList:hashCode
behavioral.iterator.SongList:iterator
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

behavioral.iterator.SongList:finalize
behavioral.iterator.SongList:toString
behavioral.iterator.SongList:clone
behavioral.iterator.SongList:addSong
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:getClass
behavioral.iterator.Test:wait
behavioral.iterator.Test:wait
behavioral.iterator.Test:wait
behavioral.iterator.Test:notifyAll
behavioral.iterator.Test:equals
behavioral.iterator.Test:main
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

behavioral.iterator.Test:registerNatives
behavioral.iterator.Test:notify
behavioral.iterator.Test:hashCode
behavioral.iterator.Test:finalize
behavioral.iterator.Test:toString
behavioral.iterator.Test:clone
behavioral.mediator.ChatRoom:getClass
behavioral.mediator.ChatRoom:wait
behavioral.mediator.ChatRoom:wait
behavioral.mediator.ChatRoom:wait
behavioral.mediator.ChatRoom:notifyAll
behavioral.mediator.ChatRoom:addUser
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [0 time(s)]

behavioral.mediator.ChatRoom:equals
behavioral.mediator.ChatRoom:registerNatives
behavioral.mediator.ChatRoom:notify
behavioral.mediator.ChatRoom:hashCode
behavioral.mediator.ChatRoom:sendMessage
	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

behavioral.mediator.ChatRoom:finalize
behavioral.mediator.ChatRoom:toString
behavioral.mediator.ChatRoom:clone
behavioral.mediator.ChatUser:getName
behavioral.mediator.ChatUser:getClass
behavioral.mediator.ChatUser:wait
behavioral.mediator.ChatUser:wait
behavioral.mediator.ChatUser:wait
behavioral.mediator.ChatUser:receive
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [0 time(s)]

behavioral.mediator.ChatUser:notifyAll
behavioral.mediator.ChatUser:equals
behavioral.mediator.ChatUser:getId
behavioral.mediator.ChatUser:registerNatives
behavioral.mediator.ChatUser:notify
behavioral.mediator.ChatUser:hashCode
behavioral.mediator.ChatUser:getRoom
behavioral.mediator.ChatUser:finalize
behavioral.mediator.ChatUser:toString
behavioral.mediator.ChatUser:clone
behavioral.mediator.ChatUser:send
	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

behavioral.mediator.IChatRoom:sendMessage
behavioral.mediator.IChatRoom:addUser
behavioral.mediator.Test:getClass
behavioral.mediator.Test:wait
behavioral.mediator.Test:wait
behavioral.mediator.Test:wait
behavioral.mediator.Test:notifyAll
behavioral.mediator.Test:equals
behavioral.mediator.Test:main
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.Test:registerNatives
behavioral.mediator.Test:notify
behavioral.mediator.Test:hashCode
behavioral.mediator.Test:finalize
behavioral.mediator.Test:toString
behavioral.mediator.Test:clone
behavioral.mediator.User:getName
behavioral.mediator.User:getClass
behavioral.mediator.User:wait
behavioral.mediator.User:wait
behavioral.mediator.User:wait
behavioral.mediator.User:receive
behavioral.mediator.User:notifyAll
behavioral.mediator.User:equals
behavioral.mediator.User:getId
behavioral.mediator.User:registerNatives
behavioral.mediator.User:notify
behavioral.mediator.User:hashCode
behavioral.mediator.User:getRoom
behavioral.mediator.User:finalize
behavioral.mediator.User:toString
behavioral.mediator.User:clone
behavioral.mediator.User:send
behavioral.memento.CareTaker:getClass
behavioral.memento.CareTaker:wait
behavioral.memento.CareTaker:wait
behavioral.memento.CareTaker:wait
behavioral.memento.CareTaker:notifyAll
behavioral.memento.CareTaker:equals
behavioral.memento.CareTaker:registerNatives
behavioral.memento.CareTaker:notify
behavioral.memento.CareTaker:hashCode
behavioral.memento.CareTaker:addMemento
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

behavioral.memento.CareTaker:get
	---> behavioral.mediator.User::get(int) [0 time(s)]

behavioral.memento.CareTaker:finalize
behavioral.memento.CareTaker:toString
behavioral.memento.CareTaker:clone
behavioral.memento.Memento:getClass
behavioral.memento.Memento:wait
behavioral.memento.Memento:wait
behavioral.memento.Memento:wait
behavioral.memento.Memento:notifyAll
behavioral.memento.Memento:equals
behavioral.memento.Memento:registerNatives
behavioral.memento.Memento:notify
behavioral.memento.Memento:hashCode
behavioral.memento.Memento:getState
behavioral.memento.Memento:finalize
behavioral.memento.Memento:toString
behavioral.memento.Memento:clone
behavioral.memento.Originator:getClass
behavioral.memento.Originator:wait
behavioral.memento.Originator:wait
behavioral.memento.Originator:wait
behavioral.memento.Originator:restoreState
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

behavioral.memento.Originator:setState
behavioral.memento.Originator:notifyAll
behavioral.memento.Originator:equals
behavioral.memento.Originator:registerNatives
behavioral.memento.Originator:notify
behavioral.memento.Originator:hashCode
behavioral.memento.Originator:getState
behavioral.memento.Originator:externalizeState
behavioral.memento.Originator:finalize
behavioral.memento.Originator:toString
behavioral.memento.Originator:clone
behavioral.memento.Test:getClass
behavioral.memento.Test:wait
behavioral.memento.Test:wait
behavioral.memento.Test:wait
behavioral.memento.Test:notifyAll
behavioral.memento.Test:equals
behavioral.memento.Test:main
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

behavioral.memento.Test:registerNatives
behavioral.memento.Test:notify
behavioral.memento.Test:hashCode
behavioral.memento.Test:finalize
behavioral.memento.Test:toString
behavioral.memento.Test:clone
behavioral.observer.Observer:update
behavioral.observer.StockGrabber:getClass
behavioral.observer.StockGrabber:wait
behavioral.observer.StockGrabber:wait
behavioral.observer.StockGrabber:wait
behavioral.observer.StockGrabber:setGoogleStock
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [0 time(s)]

behavioral.observer.StockGrabber:notifyObserver
	---> behavioral.observer.Observer::notifyObserver() [0 time(s)]

behavioral.observer.StockGrabber:notifyAll
behavioral.observer.StockGrabber:getIBMStock
behavioral.observer.StockGrabber:equals
behavioral.observer.StockGrabber:unregister
	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.StockGrabber:registerNatives
behavioral.observer.StockGrabber:notify
behavioral.observer.StockGrabber:setAppleStock
	---> behavioral.observer.StockGrabber::setAppleStock(double) [0 time(s)]

behavioral.observer.StockGrabber:getGoogleStock
behavioral.observer.StockGrabber:hashCode
behavioral.observer.StockGrabber:setIBMStock
	---> behavioral.observer.StockGrabber::setIBMStock(double) [0 time(s)]

behavioral.observer.StockGrabber:getAppleStock
behavioral.observer.StockGrabber:register
	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.StockGrabber:finalize
behavioral.observer.StockGrabber:toString
behavioral.observer.StockGrabber:clone
behavioral.observer.StockObserver:getClass
behavioral.observer.StockObserver:wait
behavioral.observer.StockObserver:wait
behavioral.observer.StockObserver:wait
behavioral.observer.StockObserver:notifyAll
behavioral.observer.StockObserver:equals
behavioral.observer.StockObserver:registerNatives
behavioral.observer.StockObserver:update
	---> behavioral.observer.StockGrabber::update() [0 time(s)]

	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockObserver::update() [3 time(s)]

behavioral.observer.StockObserver:displayPrices
	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

behavioral.observer.StockObserver:notify
behavioral.observer.StockObserver:hashCode
behavioral.observer.StockObserver:finalize
behavioral.observer.StockObserver:toString
behavioral.observer.StockObserver:clone
behavioral.observer.Subject:notifyObserver
behavioral.observer.Subject:register
behavioral.observer.Subject:unregister
behavioral.observer.Test:getClass
behavioral.observer.Test:wait
behavioral.observer.Test:wait
behavioral.observer.Test:wait
behavioral.observer.Test:notifyAll
behavioral.observer.Test:equals
behavioral.observer.Test:main
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.observer.Test:registerNatives
behavioral.observer.Test:notify
behavioral.observer.Test:hashCode
behavioral.observer.Test:finalize
behavioral.observer.Test:toString
behavioral.observer.Test:clone
behavioral.state.ATMMachine:getClass
behavioral.state.ATMMachine:getCashInMachine
behavioral.state.ATMMachine:wait
behavioral.state.ATMMachine:wait
behavioral.state.ATMMachine:wait
behavioral.state.ATMMachine:insertCard
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

behavioral.state.ATMMachine:ejectCard
	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

behavioral.state.ATMMachine:requestCash
	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

behavioral.state.ATMMachine:notifyAll
behavioral.state.ATMMachine:setATMState
behavioral.state.ATMMachine:insertPin
	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

behavioral.state.ATMMachine:equals
behavioral.state.ATMMachine:registerNatives
behavioral.state.ATMMachine:getATMState
behavioral.state.ATMMachine:getNoCardState
behavioral.state.ATMMachine:notify
behavioral.state.ATMMachine:getHasCardState
behavioral.state.ATMMachine:hashCode
behavioral.state.ATMMachine:getNoCashState
behavioral.state.ATMMachine:getCorrectPinState
behavioral.state.ATMMachine:finalize
behavioral.state.ATMMachine:toString
behavioral.state.ATMMachine:clone
behavioral.state.ATMMachine:setCashInMachine
behavioral.state.ATMState:getClass
behavioral.state.ATMState:wait
behavioral.state.ATMState:wait
behavioral.state.ATMState:wait
behavioral.state.ATMState:insertCard
behavioral.state.ATMState:ejectCard
behavioral.state.ATMState:requestCash
behavioral.state.ATMState:notifyAll
behavioral.state.ATMState:insertPin
behavioral.state.ATMState:equals
behavioral.state.ATMState:registerNatives
behavioral.state.ATMState:notify
behavioral.state.ATMState:hashCode
behavioral.state.ATMState:finalize
behavioral.state.ATMState:toString
behavioral.state.ATMState:clone
behavioral.state.CorrectPin:getClass
behavioral.state.CorrectPin:wait
behavioral.state.CorrectPin:wait
behavioral.state.CorrectPin:wait
behavioral.state.CorrectPin:insertCard
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

behavioral.state.CorrectPin:ejectCard
	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

behavioral.state.CorrectPin:requestCash
	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

behavioral.state.CorrectPin:notifyAll
behavioral.state.CorrectPin:insertPin
	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

behavioral.state.CorrectPin:equals
behavioral.state.CorrectPin:registerNatives
behavioral.state.CorrectPin:notify
behavioral.state.CorrectPin:hashCode
behavioral.state.CorrectPin:finalize
behavioral.state.CorrectPin:toString
behavioral.state.CorrectPin:clone
behavioral.state.HasCard:getClass
behavioral.state.HasCard:wait
behavioral.state.HasCard:wait
behavioral.state.HasCard:wait
behavioral.state.HasCard:insertCard
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

behavioral.state.HasCard:ejectCard
	---> behavioral.state.ATMMachine::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

behavioral.state.HasCard:requestCash
	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

behavioral.state.HasCard:notifyAll
behavioral.state.HasCard:insertPin
	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

behavioral.state.HasCard:equals
behavioral.state.HasCard:registerNatives
behavioral.state.HasCard:notify
behavioral.state.HasCard:hashCode
behavioral.state.HasCard:finalize
behavioral.state.HasCard:toString
behavioral.state.HasCard:clone
behavioral.state.IATMState:insertCard
behavioral.state.IATMState:ejectCard
behavioral.state.IATMState:requestCash
behavioral.state.IATMState:insertPin
behavioral.state.NoCard:getClass
behavioral.state.NoCard:wait
behavioral.state.NoCard:wait
behavioral.state.NoCard:wait
behavioral.state.NoCard:insertCard
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

behavioral.state.NoCard:ejectCard
	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

behavioral.state.NoCard:requestCash
	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

behavioral.state.NoCard:notifyAll
behavioral.state.NoCard:insertPin
	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

behavioral.state.NoCard:equals
behavioral.state.NoCard:registerNatives
behavioral.state.NoCard:notify
behavioral.state.NoCard:hashCode
behavioral.state.NoCard:defaultMessage
	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

behavioral.state.NoCard:finalize
behavioral.state.NoCard:toString
behavioral.state.NoCard:clone
behavioral.state.NoCash:getClass
behavioral.state.NoCash:wait
behavioral.state.NoCash:wait
behavioral.state.NoCash:wait
behavioral.state.NoCash:insertCard
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

behavioral.state.NoCash:ejectCard
	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

behavioral.state.NoCash:requestCash
	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

behavioral.state.NoCash:notifyAll
behavioral.state.NoCash:insertPin
	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

behavioral.state.NoCash:equals
behavioral.state.NoCash:registerNatives
behavioral.state.NoCash:notify
behavioral.state.NoCash:hashCode
behavioral.state.NoCash:defaultMessage
	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

behavioral.state.NoCash:finalize
behavioral.state.NoCash:toString
behavioral.state.NoCash:clone
behavioral.state.Test:getClass
behavioral.state.Test:wait
behavioral.state.Test:wait
behavioral.state.Test:wait
behavioral.state.Test:notifyAll
behavioral.state.Test:equals
behavioral.state.Test:main
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.state.Test:registerNatives
behavioral.state.Test:notify
behavioral.state.Test:hashCode
behavioral.state.Test:finalize
behavioral.state.Test:toString
behavioral.state.Test:clone
behavioral.strategy.Add:getClass
behavioral.strategy.Add:wait
behavioral.strategy.Add:wait
behavioral.strategy.Add:wait
behavioral.strategy.Add:notifyAll
behavioral.strategy.Add:equals
behavioral.strategy.Add:registerNatives
behavioral.strategy.Add:notify
behavioral.strategy.Add:execute
behavioral.strategy.Add:hashCode
behavioral.strategy.Add:finalize
behavioral.strategy.Add:toString
behavioral.strategy.Add:clone
behavioral.strategy.ArithmeticOperation:execute
behavioral.strategy.Calculator:getClass
behavioral.strategy.Calculator:wait
behavioral.strategy.Calculator:wait
behavioral.strategy.Calculator:wait
behavioral.strategy.Calculator:reset
behavioral.strategy.Calculator:notifyAll
behavioral.strategy.Calculator:equals
behavioral.strategy.Calculator:registerNatives
behavioral.strategy.Calculator:notify
behavioral.strategy.Calculator:getResult
behavioral.strategy.Calculator:hashCode
behavioral.strategy.Calculator:computeOperation
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [0 time(s)]

behavioral.strategy.Calculator:setOperation
behavioral.strategy.Calculator:finalize
behavioral.strategy.Calculator:toString
behavioral.strategy.Calculator:clone
behavioral.strategy.Divide:getClass
behavioral.strategy.Divide:wait
behavioral.strategy.Divide:wait
behavioral.strategy.Divide:wait
behavioral.strategy.Divide:notifyAll
behavioral.strategy.Divide:equals
behavioral.strategy.Divide:registerNatives
behavioral.strategy.Divide:notify
behavioral.strategy.Divide:execute
behavioral.strategy.Divide:hashCode
behavioral.strategy.Divide:finalize
behavioral.strategy.Divide:toString
behavioral.strategy.Divide:clone
behavioral.strategy.Modulo:getClass
behavioral.strategy.Modulo:wait
behavioral.strategy.Modulo:wait
behavioral.strategy.Modulo:wait
behavioral.strategy.Modulo:notifyAll
behavioral.strategy.Modulo:equals
behavioral.strategy.Modulo:registerNatives
behavioral.strategy.Modulo:notify
behavioral.strategy.Modulo:execute
behavioral.strategy.Modulo:hashCode
behavioral.strategy.Modulo:finalize
behavioral.strategy.Modulo:toString
behavioral.strategy.Modulo:clone
behavioral.strategy.Multiply:getClass
behavioral.strategy.Multiply:wait
behavioral.strategy.Multiply:wait
behavioral.strategy.Multiply:wait
behavioral.strategy.Multiply:notifyAll
behavioral.strategy.Multiply:equals
behavioral.strategy.Multiply:registerNatives
behavioral.strategy.Multiply:notify
behavioral.strategy.Multiply:execute
behavioral.strategy.Multiply:hashCode
behavioral.strategy.Multiply:finalize
behavioral.strategy.Multiply:toString
behavioral.strategy.Multiply:clone
behavioral.strategy.Subtract:getClass
behavioral.strategy.Subtract:wait
behavioral.strategy.Subtract:wait
behavioral.strategy.Subtract:wait
behavioral.strategy.Subtract:notifyAll
behavioral.strategy.Subtract:equals
behavioral.strategy.Subtract:registerNatives
behavioral.strategy.Subtract:notify
behavioral.strategy.Subtract:execute
behavioral.strategy.Subtract:hashCode
behavioral.strategy.Subtract:finalize
behavioral.strategy.Subtract:toString
behavioral.strategy.Subtract:clone
behavioral.strategy.Test:getClass
behavioral.strategy.Test:wait
behavioral.strategy.Test:wait
behavioral.strategy.Test:wait
behavioral.strategy.Test:computeAndDisplay
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

behavioral.strategy.Test:notifyAll
behavioral.strategy.Test:equals
behavioral.strategy.Test:main
	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

behavioral.strategy.Test:registerNatives
behavioral.strategy.Test:notify
behavioral.strategy.Test:hashCode
behavioral.strategy.Test:finalize
behavioral.strategy.Test:toString
behavioral.strategy.Test:clone
behavioral.template_method.Basketball:getClass
behavioral.template_method.Basketball:play
	---> behavioral.template_method.Game::play() [0 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

behavioral.template_method.Basketball:wait
behavioral.template_method.Basketball:wait
behavioral.template_method.Basketball:wait
behavioral.template_method.Basketball:notifyAll
behavioral.template_method.Basketball:equals
behavioral.template_method.Basketball:start
	---> behavioral.template_method.Game::start() [0 time(s)]

behavioral.template_method.Basketball:registerNatives
behavioral.template_method.Basketball:notify
behavioral.template_method.Basketball:hashCode
behavioral.template_method.Basketball:initialize
	---> behavioral.template_method.Game::initialize() [0 time(s)]

behavioral.template_method.Basketball:finalize
behavioral.template_method.Basketball:toString
behavioral.template_method.Basketball:clone
behavioral.template_method.Basketball:end
	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:getClass
behavioral.template_method.Football:play
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Football:wait
behavioral.template_method.Football:wait
behavioral.template_method.Football:wait
behavioral.template_method.Football:notifyAll
behavioral.template_method.Football:equals
behavioral.template_method.Football:start
	---> behavioral.template_method.Game::start() [0 time(s)]

behavioral.template_method.Football:registerNatives
behavioral.template_method.Football:notify
behavioral.template_method.Football:hashCode
behavioral.template_method.Football:initialize
	---> behavioral.template_method.Game::initialize() [0 time(s)]

behavioral.template_method.Football:finalize
behavioral.template_method.Football:toString
behavioral.template_method.Football:clone
behavioral.template_method.Football:end
	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:getClass
behavioral.template_method.Game:play
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Game:wait
behavioral.template_method.Game:wait
behavioral.template_method.Game:wait
behavioral.template_method.Game:notifyAll
behavioral.template_method.Game:equals
behavioral.template_method.Game:start
behavioral.template_method.Game:registerNatives
behavioral.template_method.Game:notify
behavioral.template_method.Game:hashCode
behavioral.template_method.Game:initialize
behavioral.template_method.Game:finalize
behavioral.template_method.Game:toString
behavioral.template_method.Game:clone
behavioral.template_method.Game:end
behavioral.template_method.Test:getClass
behavioral.template_method.Test:wait
behavioral.template_method.Test:wait
behavioral.template_method.Test:wait
behavioral.template_method.Test:notifyAll
behavioral.template_method.Test:equals
behavioral.template_method.Test:main
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

behavioral.template_method.Test:registerNatives
behavioral.template_method.Test:notify
behavioral.template_method.Test:hashCode
behavioral.template_method.Test:finalize
behavioral.template_method.Test:toString
behavioral.template_method.Test:clone
behavioral.visitor.Liquor:getName
behavioral.visitor.Liquor:getClass
behavioral.visitor.Liquor:wait
behavioral.visitor.Liquor:wait
behavioral.visitor.Liquor:wait
behavioral.visitor.Liquor:setName
behavioral.visitor.Liquor:setPrice
behavioral.visitor.Liquor:notifyAll
behavioral.visitor.Liquor:equals
behavioral.visitor.Liquor:getPrice
behavioral.visitor.Liquor:registerNatives
behavioral.visitor.Liquor:notify
behavioral.visitor.Liquor:accept
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

behavioral.visitor.Liquor:hashCode
behavioral.visitor.Liquor:finalize
behavioral.visitor.Liquor:toString
behavioral.visitor.Liquor:clone
behavioral.visitor.Necessity:getName
behavioral.visitor.Necessity:getClass
behavioral.visitor.Necessity:wait
behavioral.visitor.Necessity:wait
behavioral.visitor.Necessity:wait
behavioral.visitor.Necessity:setName
behavioral.visitor.Necessity:setPrice
behavioral.visitor.Necessity:notifyAll
behavioral.visitor.Necessity:equals
behavioral.visitor.Necessity:getPrice
behavioral.visitor.Necessity:registerNatives
behavioral.visitor.Necessity:notify
behavioral.visitor.Necessity:accept
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Necessity:hashCode
behavioral.visitor.Necessity:finalize
behavioral.visitor.Necessity:toString
behavioral.visitor.Necessity:clone
behavioral.visitor.Product:getName
behavioral.visitor.Product:getClass
behavioral.visitor.Product:wait
behavioral.visitor.Product:wait
behavioral.visitor.Product:wait
behavioral.visitor.Product:setName
behavioral.visitor.Product:setPrice
behavioral.visitor.Product:notifyAll
behavioral.visitor.Product:equals
behavioral.visitor.Product:getPrice
behavioral.visitor.Product:registerNatives
behavioral.visitor.Product:notify
behavioral.visitor.Product:accept
behavioral.visitor.Product:hashCode
behavioral.visitor.Product:finalize
behavioral.visitor.Product:toString
behavioral.visitor.Product:clone
behavioral.visitor.TaxHolidayVisitor:getClass
behavioral.visitor.TaxHolidayVisitor:wait
behavioral.visitor.TaxHolidayVisitor:wait
behavioral.visitor.TaxHolidayVisitor:wait
behavioral.visitor.TaxHolidayVisitor:getComputedTax
behavioral.visitor.TaxHolidayVisitor:notifyAll
behavioral.visitor.TaxHolidayVisitor:equals
behavioral.visitor.TaxHolidayVisitor:registerNatives
behavioral.visitor.TaxHolidayVisitor:notify
behavioral.visitor.TaxHolidayVisitor:computeTax
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

behavioral.visitor.TaxHolidayVisitor:getTaxRate
behavioral.visitor.TaxHolidayVisitor:hashCode
behavioral.visitor.TaxHolidayVisitor:finalize
behavioral.visitor.TaxHolidayVisitor:toString
behavioral.visitor.TaxHolidayVisitor:clone
behavioral.visitor.TaxHolidayVisitor:visit
	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:visit
	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:visit
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [0 time(s)]

behavioral.visitor.TaxVisitor:getClass
behavioral.visitor.TaxVisitor:wait
behavioral.visitor.TaxVisitor:wait
behavioral.visitor.TaxVisitor:wait
behavioral.visitor.TaxVisitor:getComputedTax
behavioral.visitor.TaxVisitor:notifyAll
behavioral.visitor.TaxVisitor:equals
behavioral.visitor.TaxVisitor:registerNatives
behavioral.visitor.TaxVisitor:notify
behavioral.visitor.TaxVisitor:computeTax
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

behavioral.visitor.TaxVisitor:getTaxRate
behavioral.visitor.TaxVisitor:hashCode
behavioral.visitor.TaxVisitor:finalize
behavioral.visitor.TaxVisitor:toString
behavioral.visitor.TaxVisitor:clone
behavioral.visitor.TaxVisitor:visit
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

behavioral.visitor.TaxVisitor:visit
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

behavioral.visitor.TaxVisitor:visit
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:getClass
behavioral.visitor.Test:wait
behavioral.visitor.Test:wait
behavioral.visitor.Test:wait
behavioral.visitor.Test:notifyAll
behavioral.visitor.Test:equals
behavioral.visitor.Test:main
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

behavioral.visitor.Test:registerNatives
behavioral.visitor.Test:notify
behavioral.visitor.Test:hashCode
behavioral.visitor.Test:computeTaxForProducts
	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

behavioral.visitor.Test:finalize
behavioral.visitor.Test:toString
behavioral.visitor.Test:clone
behavioral.visitor.Tobacco:getName
behavioral.visitor.Tobacco:getClass
behavioral.visitor.Tobacco:wait
behavioral.visitor.Tobacco:wait
behavioral.visitor.Tobacco:wait
behavioral.visitor.Tobacco:setName
behavioral.visitor.Tobacco:setPrice
behavioral.visitor.Tobacco:notifyAll
behavioral.visitor.Tobacco:equals
behavioral.visitor.Tobacco:getPrice
behavioral.visitor.Tobacco:registerNatives
behavioral.visitor.Tobacco:notify
behavioral.visitor.Tobacco:accept
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Tobacco:hashCode
behavioral.visitor.Tobacco:finalize
behavioral.visitor.Tobacco:toString
behavioral.visitor.Tobacco:clone
behavioral.visitor.Visitable:accept
behavioral.visitor.Visitor:visit
behavioral.visitor.Visitor:visit
behavioral.visitor.Visitor:visit
creational.abstract_factory.AbstractShapeFactory:getClass
creational.abstract_factory.AbstractShapeFactory:wait
creational.abstract_factory.AbstractShapeFactory:wait
creational.abstract_factory.AbstractShapeFactory:wait
creational.abstract_factory.AbstractShapeFactory:createShape
creational.abstract_factory.AbstractShapeFactory:getRegistryKey
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:notifyAll
creational.abstract_factory.AbstractShapeFactory:equals
creational.abstract_factory.AbstractShapeFactory:registerNatives
creational.abstract_factory.AbstractShapeFactory:notify
creational.abstract_factory.AbstractShapeFactory:hashCode
creational.abstract_factory.AbstractShapeFactory:finalize
creational.abstract_factory.AbstractShapeFactory:toString
creational.abstract_factory.AbstractShapeFactory:clone
creational.abstract_factory.AbstractShapeFactory:getInstance
	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.Rectangle:getClass
creational.abstract_factory.Rectangle:wait
creational.abstract_factory.Rectangle:wait
creational.abstract_factory.Rectangle:wait
creational.abstract_factory.Rectangle:notifyAll
creational.abstract_factory.Rectangle:equals
creational.abstract_factory.Rectangle:registerNatives
creational.abstract_factory.Rectangle:draw
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.Rectangle:notify
creational.abstract_factory.Rectangle:hashCode
creational.abstract_factory.Rectangle:finalize
creational.abstract_factory.Rectangle:toString
creational.abstract_factory.Rectangle:clone
creational.abstract_factory.RoundedRectangle:getClass
creational.abstract_factory.RoundedRectangle:wait
creational.abstract_factory.RoundedRectangle:wait
creational.abstract_factory.RoundedRectangle:wait
creational.abstract_factory.RoundedRectangle:notifyAll
creational.abstract_factory.RoundedRectangle:equals
creational.abstract_factory.RoundedRectangle:registerNatives
creational.abstract_factory.RoundedRectangle:draw
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedRectangle:notify
creational.abstract_factory.RoundedRectangle:hashCode
creational.abstract_factory.RoundedRectangle:finalize
creational.abstract_factory.RoundedRectangle:toString
creational.abstract_factory.RoundedRectangle:clone
creational.abstract_factory.RoundedShapeFactory:getClass
creational.abstract_factory.RoundedShapeFactory:wait
creational.abstract_factory.RoundedShapeFactory:wait
creational.abstract_factory.RoundedShapeFactory:wait
creational.abstract_factory.RoundedShapeFactory:createShape
creational.abstract_factory.RoundedShapeFactory:getRegistryKey
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:notifyAll
creational.abstract_factory.RoundedShapeFactory:equals
creational.abstract_factory.RoundedShapeFactory:registerNatives
creational.abstract_factory.RoundedShapeFactory:notify
creational.abstract_factory.RoundedShapeFactory:hashCode
creational.abstract_factory.RoundedShapeFactory:finalize
creational.abstract_factory.RoundedShapeFactory:toString
creational.abstract_factory.RoundedShapeFactory:clone
creational.abstract_factory.RoundedShapeFactory:getInstance
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.RoundedShapeType:clone
creational.abstract_factory.RoundedShapeType:compareTo
creational.abstract_factory.RoundedShapeType:describeConstable
creational.abstract_factory.RoundedShapeType:equals
creational.abstract_factory.RoundedShapeType:finalize
creational.abstract_factory.RoundedShapeType:getDeclaringClass
creational.abstract_factory.RoundedShapeType:hashCode
creational.abstract_factory.RoundedShapeType:name
creational.abstract_factory.RoundedShapeType:ordinal
creational.abstract_factory.RoundedShapeType:readObject
creational.abstract_factory.RoundedShapeType:readObjectNoData
creational.abstract_factory.RoundedShapeType:toString
creational.abstract_factory.RoundedShapeType:valueOf
creational.abstract_factory.RoundedShapeType:valueOf
creational.abstract_factory.RoundedShapeType:values
creational.abstract_factory.RoundedTriangle:getClass
creational.abstract_factory.RoundedTriangle:wait
creational.abstract_factory.RoundedTriangle:wait
creational.abstract_factory.RoundedTriangle:wait
creational.abstract_factory.RoundedTriangle:notifyAll
creational.abstract_factory.RoundedTriangle:equals
creational.abstract_factory.RoundedTriangle:registerNatives
creational.abstract_factory.RoundedTriangle:draw
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedTriangle:notify
creational.abstract_factory.RoundedTriangle:hashCode
creational.abstract_factory.RoundedTriangle:finalize
creational.abstract_factory.RoundedTriangle:toString
creational.abstract_factory.RoundedTriangle:clone
creational.abstract_factory.Shape:draw
creational.abstract_factory.ShapeFactoryType:clone
creational.abstract_factory.ShapeFactoryType:compareTo
creational.abstract_factory.ShapeFactoryType:describeConstable
creational.abstract_factory.ShapeFactoryType:equals
creational.abstract_factory.ShapeFactoryType:finalize
creational.abstract_factory.ShapeFactoryType:getDeclaringClass
creational.abstract_factory.ShapeFactoryType:hashCode
creational.abstract_factory.ShapeFactoryType:name
creational.abstract_factory.ShapeFactoryType:ordinal
creational.abstract_factory.ShapeFactoryType:readObject
creational.abstract_factory.ShapeFactoryType:readObjectNoData
creational.abstract_factory.ShapeFactoryType:toString
creational.abstract_factory.ShapeFactoryType:valueOf
creational.abstract_factory.ShapeFactoryType:valueOf
creational.abstract_factory.ShapeFactoryType:values
creational.abstract_factory.ShapeProducer:getClass
creational.abstract_factory.ShapeProducer:wait
creational.abstract_factory.ShapeProducer:wait
creational.abstract_factory.ShapeProducer:wait
creational.abstract_factory.ShapeProducer:notifyAll
creational.abstract_factory.ShapeProducer:equals
creational.abstract_factory.ShapeProducer:registerNatives
creational.abstract_factory.ShapeProducer:notify
creational.abstract_factory.ShapeProducer:hashCode
creational.abstract_factory.ShapeProducer:finalize
creational.abstract_factory.ShapeProducer:toString
creational.abstract_factory.ShapeProducer:clone
creational.abstract_factory.ShapeProducer:createFactory
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.StandardShapeFactory:getClass
creational.abstract_factory.StandardShapeFactory:wait
creational.abstract_factory.StandardShapeFactory:wait
creational.abstract_factory.StandardShapeFactory:wait
creational.abstract_factory.StandardShapeFactory:createShape
creational.abstract_factory.StandardShapeFactory:getRegistryKey
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

creational.abstract_factory.StandardShapeFactory:notifyAll
creational.abstract_factory.StandardShapeFactory:equals
creational.abstract_factory.StandardShapeFactory:registerNatives
creational.abstract_factory.StandardShapeFactory:notify
creational.abstract_factory.StandardShapeFactory:hashCode
creational.abstract_factory.StandardShapeFactory:finalize
creational.abstract_factory.StandardShapeFactory:toString
creational.abstract_factory.StandardShapeFactory:clone
creational.abstract_factory.StandardShapeFactory:getInstance
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.StandardShapeType:clone
creational.abstract_factory.StandardShapeType:compareTo
creational.abstract_factory.StandardShapeType:describeConstable
creational.abstract_factory.StandardShapeType:equals
creational.abstract_factory.StandardShapeType:finalize
creational.abstract_factory.StandardShapeType:getDeclaringClass
creational.abstract_factory.StandardShapeType:hashCode
creational.abstract_factory.StandardShapeType:name
creational.abstract_factory.StandardShapeType:ordinal
creational.abstract_factory.StandardShapeType:readObject
creational.abstract_factory.StandardShapeType:readObjectNoData
creational.abstract_factory.StandardShapeType:toString
creational.abstract_factory.StandardShapeType:valueOf
creational.abstract_factory.StandardShapeType:valueOf
creational.abstract_factory.StandardShapeType:values
creational.abstract_factory.Test:getClass
creational.abstract_factory.Test:wait
creational.abstract_factory.Test:wait
creational.abstract_factory.Test:wait
creational.abstract_factory.Test:notifyAll
creational.abstract_factory.Test:equals
creational.abstract_factory.Test:main
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

creational.abstract_factory.Test:registerNatives
creational.abstract_factory.Test:notify
creational.abstract_factory.Test:hashCode
creational.abstract_factory.Test:finalize
creational.abstract_factory.Test:toString
creational.abstract_factory.Test:clone
creational.abstract_factory.Triangle:getClass
creational.abstract_factory.Triangle:wait
creational.abstract_factory.Triangle:wait
creational.abstract_factory.Triangle:wait
creational.abstract_factory.Triangle:notifyAll
creational.abstract_factory.Triangle:equals
creational.abstract_factory.Triangle:registerNatives
creational.abstract_factory.Triangle:draw
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

creational.abstract_factory.Triangle:notify
creational.abstract_factory.Triangle:hashCode
creational.abstract_factory.Triangle:finalize
creational.abstract_factory.Triangle:toString
creational.abstract_factory.Triangle:clone
creational.builder.IRobot:setTorso
creational.builder.IRobot:setArms
creational.builder.IRobot:setLegs
creational.builder.IRobot:setHead
creational.builder.IRobotBuilder:buildArms
creational.builder.IRobotBuilder:buildHead
creational.builder.IRobotBuilder:getRobot
creational.builder.IRobotBuilder:buildTorso
creational.builder.IRobotBuilder:buildLegs
creational.builder.OldRobotBuilder:getClass
creational.builder.OldRobotBuilder:wait
creational.builder.OldRobotBuilder:wait
creational.builder.OldRobotBuilder:wait
creational.builder.OldRobotBuilder:notifyAll
creational.builder.OldRobotBuilder:equals
creational.builder.OldRobotBuilder:registerNatives
creational.builder.OldRobotBuilder:getRobot
creational.builder.OldRobotBuilder:notify
creational.builder.OldRobotBuilder:buildLegs
	---> creational.builder.Robot::buildLegs() [0 time(s)]

creational.builder.OldRobotBuilder:buildArms
	---> creational.builder.Robot::buildArms() [0 time(s)]

creational.builder.OldRobotBuilder:hashCode
creational.builder.OldRobotBuilder:buildHead
	---> creational.builder.Robot::buildHead() [0 time(s)]

creational.builder.OldRobotBuilder:finalize
creational.builder.OldRobotBuilder:toString
creational.builder.OldRobotBuilder:clone
creational.builder.OldRobotBuilder:buildTorso
	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.Robot:getClass
creational.builder.Robot:wait
creational.builder.Robot:wait
creational.builder.Robot:wait
creational.builder.Robot:setLegs
creational.builder.Robot:notifyAll
creational.builder.Robot:equals
creational.builder.Robot:setHead
creational.builder.Robot:registerNatives
creational.builder.Robot:getTorso
creational.builder.Robot:notify
creational.builder.Robot:setTorso
creational.builder.Robot:hashCode
creational.builder.Robot:setArms
creational.builder.Robot:getArms
creational.builder.Robot:getHead
creational.builder.Robot:toString
	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

creational.builder.Robot:finalize
creational.builder.Robot:clone
creational.builder.Robot:getLegs
creational.builder.RobotBuilder:getClass
creational.builder.RobotBuilder:wait
creational.builder.RobotBuilder:wait
creational.builder.RobotBuilder:wait
creational.builder.RobotBuilder:notifyAll
creational.builder.RobotBuilder:equals
creational.builder.RobotBuilder:registerNatives
creational.builder.RobotBuilder:getRobot
creational.builder.RobotBuilder:notify
creational.builder.RobotBuilder:buildLegs
creational.builder.RobotBuilder:buildArms
creational.builder.RobotBuilder:hashCode
creational.builder.RobotBuilder:buildHead
creational.builder.RobotBuilder:finalize
creational.builder.RobotBuilder:toString
creational.builder.RobotBuilder:clone
creational.builder.RobotBuilder:buildTorso
creational.builder.RobotEngineer:getClass
creational.builder.RobotEngineer:wait
creational.builder.RobotEngineer:wait
creational.builder.RobotEngineer:wait
creational.builder.RobotEngineer:notifyAll
creational.builder.RobotEngineer:equals
creational.builder.RobotEngineer:registerNatives
creational.builder.RobotEngineer:getRobot
	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

creational.builder.RobotEngineer:notify
creational.builder.RobotEngineer:hashCode
creational.builder.RobotEngineer:constructRobot
	---> creational.builder.IRobotBuilder::constructRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

creational.builder.RobotEngineer:setRobotBuilder
creational.builder.RobotEngineer:finalize
creational.builder.RobotEngineer:toString
creational.builder.RobotEngineer:clone
creational.builder.SophisticatedRobotBuilder:getClass
creational.builder.SophisticatedRobotBuilder:wait
creational.builder.SophisticatedRobotBuilder:wait
creational.builder.SophisticatedRobotBuilder:wait
creational.builder.SophisticatedRobotBuilder:notifyAll
creational.builder.SophisticatedRobotBuilder:equals
creational.builder.SophisticatedRobotBuilder:registerNatives
creational.builder.SophisticatedRobotBuilder:getRobot
creational.builder.SophisticatedRobotBuilder:notify
creational.builder.SophisticatedRobotBuilder:buildLegs
	---> creational.builder.Robot::buildLegs() [1 time(s)]

creational.builder.SophisticatedRobotBuilder:buildArms
	---> creational.builder.Robot::buildArms() [1 time(s)]

creational.builder.SophisticatedRobotBuilder:hashCode
creational.builder.SophisticatedRobotBuilder:buildHead
	---> creational.builder.Robot::buildHead() [1 time(s)]

creational.builder.SophisticatedRobotBuilder:finalize
creational.builder.SophisticatedRobotBuilder:toString
creational.builder.SophisticatedRobotBuilder:clone
creational.builder.SophisticatedRobotBuilder:buildTorso
	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:getClass
creational.builder.Test:wait
creational.builder.Test:wait
creational.builder.Test:wait
creational.builder.Test:notifyAll
creational.builder.Test:equals
creational.builder.Test:main
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

creational.builder.Test:registerNatives
creational.builder.Test:notify
creational.builder.Test:hashCode
creational.builder.Test:finalize
creational.builder.Test:toString
creational.builder.Test:clone
creational.factory.BigUFOEnemyShip:getName
creational.factory.BigUFOEnemyShip:getClass
creational.factory.BigUFOEnemyShip:wait
creational.factory.BigUFOEnemyShip:wait
creational.factory.BigUFOEnemyShip:wait
creational.factory.BigUFOEnemyShip:setName
creational.factory.BigUFOEnemyShip:getAmtDamage
creational.factory.BigUFOEnemyShip:setAmtDamage
creational.factory.BigUFOEnemyShip:notifyAll
creational.factory.BigUFOEnemyShip:equals
creational.factory.BigUFOEnemyShip:registerNatives
creational.factory.BigUFOEnemyShip:notify
creational.factory.BigUFOEnemyShip:followHeroShip
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

creational.factory.BigUFOEnemyShip:hashCode
creational.factory.BigUFOEnemyShip:enemyShipShoots
	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

creational.factory.BigUFOEnemyShip:displayEnemyShip
	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.BigUFOEnemyShip:finalize
creational.factory.BigUFOEnemyShip:toString
creational.factory.BigUFOEnemyShip:clone
creational.factory.EnemyShip:getName
creational.factory.EnemyShip:getClass
creational.factory.EnemyShip:wait
creational.factory.EnemyShip:wait
creational.factory.EnemyShip:wait
creational.factory.EnemyShip:setName
creational.factory.EnemyShip:getAmtDamage
creational.factory.EnemyShip:setAmtDamage
creational.factory.EnemyShip:notifyAll
creational.factory.EnemyShip:equals
creational.factory.EnemyShip:registerNatives
creational.factory.EnemyShip:notify
creational.factory.EnemyShip:followHeroShip
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

creational.factory.EnemyShip:hashCode
creational.factory.EnemyShip:enemyShipShoots
	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

creational.factory.EnemyShip:displayEnemyShip
	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShip:finalize
creational.factory.EnemyShip:toString
creational.factory.EnemyShip:clone
creational.factory.EnemyShipFactory:getClass
creational.factory.EnemyShipFactory:wait
creational.factory.EnemyShipFactory:wait
creational.factory.EnemyShipFactory:wait
creational.factory.EnemyShipFactory:notifyAll
creational.factory.EnemyShipFactory:equals
creational.factory.EnemyShipFactory:registerNatives
creational.factory.EnemyShipFactory:notify
creational.factory.EnemyShipFactory:hashCode
creational.factory.EnemyShipFactory:createEnemyShip
creational.factory.EnemyShipFactory:finalize
creational.factory.EnemyShipFactory:toString
creational.factory.EnemyShipFactory:clone
creational.factory.EnemyShipTesting:getClass
creational.factory.EnemyShipTesting:wait
creational.factory.EnemyShipTesting:wait
creational.factory.EnemyShipTesting:wait
creational.factory.EnemyShipTesting:notifyAll
creational.factory.EnemyShipTesting:equals
creational.factory.EnemyShipTesting:main
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

creational.factory.EnemyShipTesting:registerNatives
creational.factory.EnemyShipTesting:notify
creational.factory.EnemyShipTesting:hashCode
creational.factory.EnemyShipTesting:doStuffEnemy
	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

creational.factory.EnemyShipTesting:finalize
creational.factory.EnemyShipTesting:toString
creational.factory.EnemyShipTesting:clone
creational.factory.RocketEnemyShip:getName
creational.factory.RocketEnemyShip:getClass
creational.factory.RocketEnemyShip:wait
creational.factory.RocketEnemyShip:wait
creational.factory.RocketEnemyShip:wait
creational.factory.RocketEnemyShip:setName
creational.factory.RocketEnemyShip:getAmtDamage
creational.factory.RocketEnemyShip:setAmtDamage
creational.factory.RocketEnemyShip:notifyAll
creational.factory.RocketEnemyShip:equals
creational.factory.RocketEnemyShip:registerNatives
creational.factory.RocketEnemyShip:notify
creational.factory.RocketEnemyShip:followHeroShip
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

creational.factory.RocketEnemyShip:hashCode
creational.factory.RocketEnemyShip:enemyShipShoots
	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

creational.factory.RocketEnemyShip:displayEnemyShip
	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.factory.RocketEnemyShip:finalize
creational.factory.RocketEnemyShip:toString
creational.factory.RocketEnemyShip:clone
creational.factory.Test:getClass
creational.factory.Test:wait
creational.factory.Test:wait
creational.factory.Test:wait
creational.factory.Test:notifyAll
creational.factory.Test:equals
creational.factory.Test:main
	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

creational.factory.Test:registerNatives
creational.factory.Test:notify
creational.factory.Test:hashCode
creational.factory.Test:doStuffEnemy
	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.Test:finalize
creational.factory.Test:toString
creational.factory.Test:clone
creational.factory.UFOEnemyShip:getName
creational.factory.UFOEnemyShip:getClass
creational.factory.UFOEnemyShip:wait
creational.factory.UFOEnemyShip:wait
creational.factory.UFOEnemyShip:wait
creational.factory.UFOEnemyShip:setName
creational.factory.UFOEnemyShip:getAmtDamage
creational.factory.UFOEnemyShip:setAmtDamage
creational.factory.UFOEnemyShip:notifyAll
creational.factory.UFOEnemyShip:equals
creational.factory.UFOEnemyShip:registerNatives
creational.factory.UFOEnemyShip:notify
creational.factory.UFOEnemyShip:followHeroShip
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

creational.factory.UFOEnemyShip:hashCode
creational.factory.UFOEnemyShip:enemyShipShoots
	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

creational.factory.UFOEnemyShip:displayEnemyShip
	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.factory.UFOEnemyShip:finalize
creational.factory.UFOEnemyShip:toString
creational.factory.UFOEnemyShip:clone
creational.prototype.Circle:getClass
creational.prototype.Circle:wait
creational.prototype.Circle:wait
creational.prototype.Circle:wait
creational.prototype.Circle:notifyAll
creational.prototype.Circle:equals
creational.prototype.Circle:getId
creational.prototype.Circle:setPosition
creational.prototype.Circle:registerNatives
creational.prototype.Circle:draw
	---> creational.factory.EnemyShip::draw() [0 time(s)]

creational.prototype.Circle:getPosition
creational.prototype.Circle:notify
creational.prototype.Circle:hashCode
creational.prototype.Circle:getType
creational.prototype.Circle:setId
creational.prototype.Circle:clone
	---> creational.factory.EnemyShip::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

creational.prototype.Circle:toString
	---> creational.prototype.Shape::toString() [0 time(s)]

creational.prototype.Circle:finalize
creational.prototype.Position:getClass
creational.prototype.Position:wait
creational.prototype.Position:wait
creational.prototype.Position:wait
creational.prototype.Position:setX
creational.prototype.Position:notifyAll
creational.prototype.Position:equals
creational.prototype.Position:registerNatives
creational.prototype.Position:setY
creational.prototype.Position:notify
creational.prototype.Position:hashCode
creational.prototype.Position:getX
creational.prototype.Position:getY
creational.prototype.Position:clone
	---> creational.prototype.Shape::clone() [0 time(s)]

creational.prototype.Position:toString
	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Position:finalize
creational.prototype.Rectangle:getClass
creational.prototype.Rectangle:wait
creational.prototype.Rectangle:wait
creational.prototype.Rectangle:wait
creational.prototype.Rectangle:notifyAll
creational.prototype.Rectangle:equals
creational.prototype.Rectangle:getId
creational.prototype.Rectangle:setPosition
creational.prototype.Rectangle:registerNatives
creational.prototype.Rectangle:draw
	---> creational.prototype.Position::draw() [0 time(s)]

creational.prototype.Rectangle:getPosition
creational.prototype.Rectangle:notify
creational.prototype.Rectangle:hashCode
creational.prototype.Rectangle:getType
creational.prototype.Rectangle:setId
creational.prototype.Rectangle:clone
	---> creational.prototype.Position::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

creational.prototype.Rectangle:toString
	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Rectangle:finalize
creational.prototype.Shape:getClass
creational.prototype.Shape:wait
creational.prototype.Shape:wait
creational.prototype.Shape:wait
creational.prototype.Shape:notifyAll
creational.prototype.Shape:equals
creational.prototype.Shape:getId
creational.prototype.Shape:setPosition
creational.prototype.Shape:registerNatives
creational.prototype.Shape:draw
creational.prototype.Shape:getPosition
creational.prototype.Shape:notify
creational.prototype.Shape:hashCode
creational.prototype.Shape:getType
creational.prototype.Shape:setId
creational.prototype.Shape:clone
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

creational.prototype.Shape:toString
	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:finalize
creational.prototype.ShapeCache:getClass
creational.prototype.ShapeCache:wait
creational.prototype.ShapeCache:wait
creational.prototype.ShapeCache:wait
creational.prototype.ShapeCache:notifyAll
creational.prototype.ShapeCache:equals
creational.prototype.ShapeCache:registerNatives
creational.prototype.ShapeCache:notify
creational.prototype.ShapeCache:getShape
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

creational.prototype.ShapeCache:hashCode
creational.prototype.ShapeCache:displayCacheContent
	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

creational.prototype.ShapeCache:finalize
creational.prototype.ShapeCache:toString
creational.prototype.ShapeCache:clone
creational.prototype.ShapeCache:loadCache
	---> creational.prototype.Circle::loadCache() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Triangle::loadCache() [3 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Rectangle::loadCache() [6 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

creational.prototype.Test:getClass
creational.prototype.Test:wait
creational.prototype.Test:wait
creational.prototype.Test:wait
creational.prototype.Test:notifyAll
creational.prototype.Test:equals
creational.prototype.Test:main
	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

creational.prototype.Test:registerNatives
creational.prototype.Test:notify
creational.prototype.Test:hashCode
creational.prototype.Test:finalize
creational.prototype.Test:toString
creational.prototype.Test:clone
creational.prototype.Triangle:getClass
creational.prototype.Triangle:wait
creational.prototype.Triangle:wait
creational.prototype.Triangle:wait
creational.prototype.Triangle:notifyAll
creational.prototype.Triangle:equals
creational.prototype.Triangle:getId
creational.prototype.Triangle:setPosition
creational.prototype.Triangle:registerNatives
creational.prototype.Triangle:draw
	---> creational.prototype.Shape::draw() [0 time(s)]

creational.prototype.Triangle:getPosition
creational.prototype.Triangle:notify
creational.prototype.Triangle:hashCode
creational.prototype.Triangle:getType
creational.prototype.Triangle:setId
creational.prototype.Triangle:clone
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

creational.prototype.Triangle:toString
	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Triangle:finalize
creational.singleton.ExtendedSingleton:getClass
creational.singleton.ExtendedSingleton:wait
creational.singleton.ExtendedSingleton:wait
creational.singleton.ExtendedSingleton:wait
creational.singleton.ExtendedSingleton:getRegistryKey
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

creational.singleton.ExtendedSingleton:notifyAll
creational.singleton.ExtendedSingleton:equals
creational.singleton.ExtendedSingleton:registerNatives
creational.singleton.ExtendedSingleton:notify
creational.singleton.ExtendedSingleton:hashCode
creational.singleton.ExtendedSingleton:finalize
creational.singleton.ExtendedSingleton:toString
creational.singleton.ExtendedSingleton:clone
creational.singleton.ExtendedSingleton:getInstance
	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.ExtendedSingleton2:getClass
creational.singleton.ExtendedSingleton2:wait
creational.singleton.ExtendedSingleton2:wait
creational.singleton.ExtendedSingleton2:wait
creational.singleton.ExtendedSingleton2:getRegistryKey
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

creational.singleton.ExtendedSingleton2:notifyAll
creational.singleton.ExtendedSingleton2:equals
creational.singleton.ExtendedSingleton2:registerNatives
creational.singleton.ExtendedSingleton2:notify
creational.singleton.ExtendedSingleton2:hashCode
creational.singleton.ExtendedSingleton2:finalize
creational.singleton.ExtendedSingleton2:toString
creational.singleton.ExtendedSingleton2:clone
creational.singleton.ExtendedSingleton2:getInstance
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.Singleton:getClass
creational.singleton.Singleton:wait
creational.singleton.Singleton:wait
creational.singleton.Singleton:wait
creational.singleton.Singleton:getRegistryKey
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

creational.singleton.Singleton:notifyAll
creational.singleton.Singleton:equals
creational.singleton.Singleton:registerNatives
creational.singleton.Singleton:notify
creational.singleton.Singleton:hashCode
creational.singleton.Singleton:finalize
creational.singleton.Singleton:toString
creational.singleton.Singleton:clone
creational.singleton.Singleton:getInstance
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.SingletonRegistry:lookup
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

creational.singleton.SingletonRegistry:getClass
creational.singleton.SingletonRegistry:wait
creational.singleton.SingletonRegistry:wait
creational.singleton.SingletonRegistry:wait
creational.singleton.SingletonRegistry:notifyAll
creational.singleton.SingletonRegistry:equals
creational.singleton.SingletonRegistry:registerNatives
creational.singleton.SingletonRegistry:notify
creational.singleton.SingletonRegistry:hashCode
creational.singleton.SingletonRegistry:register
	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

creational.singleton.SingletonRegistry:finalize
creational.singleton.SingletonRegistry:toString
creational.singleton.SingletonRegistry:clone
creational.singleton.Test:getClass
creational.singleton.Test:wait
creational.singleton.Test:wait
creational.singleton.Test:wait
creational.singleton.Test:notifyAll
creational.singleton.Test:equals
creational.singleton.Test:main
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

creational.singleton.Test:registerNatives
creational.singleton.Test:notify
creational.singleton.Test:hashCode
creational.singleton.Test:finalize
creational.singleton.Test:toString
creational.singleton.Test:clone
structural.adapter.EnemyAttacker:fireWeapon
structural.adapter.EnemyAttacker:driveForward
structural.adapter.EnemyAttacker:assignDriver
structural.adapter.EnemyRobot:getClass
structural.adapter.EnemyRobot:wait
structural.adapter.EnemyRobot:wait
structural.adapter.EnemyRobot:wait
structural.adapter.EnemyRobot:smashwithHands
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

structural.adapter.EnemyRobot:walkForward
	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

structural.adapter.EnemyRobot:notifyAll
structural.adapter.EnemyRobot:equals
structural.adapter.EnemyRobot:registerNatives
structural.adapter.EnemyRobot:notify
structural.adapter.EnemyRobot:hashCode
structural.adapter.EnemyRobot:reactToHuman
	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobot:finalize
structural.adapter.EnemyRobot:toString
structural.adapter.EnemyRobot:clone
structural.adapter.EnemyRobotAdapter:getClass
structural.adapter.EnemyRobotAdapter:wait
structural.adapter.EnemyRobotAdapter:wait
structural.adapter.EnemyRobotAdapter:wait
structural.adapter.EnemyRobotAdapter:driveForward
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

structural.adapter.EnemyRobotAdapter:notifyAll
structural.adapter.EnemyRobotAdapter:equals
structural.adapter.EnemyRobotAdapter:registerNatives
structural.adapter.EnemyRobotAdapter:notify
structural.adapter.EnemyRobotAdapter:setRobot
structural.adapter.EnemyRobotAdapter:fireWeapon
	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

structural.adapter.EnemyRobotAdapter:hashCode
structural.adapter.EnemyRobotAdapter:assignDriver
	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobotAdapter:finalize
structural.adapter.EnemyRobotAdapter:toString
structural.adapter.EnemyRobotAdapter:clone
structural.adapter.EnemyTank:getClass
structural.adapter.EnemyTank:wait
structural.adapter.EnemyTank:wait
structural.adapter.EnemyTank:wait
structural.adapter.EnemyTank:driveForward
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

structural.adapter.EnemyTank:notifyAll
structural.adapter.EnemyTank:equals
structural.adapter.EnemyTank:registerNatives
structural.adapter.EnemyTank:notify
structural.adapter.EnemyTank:fireWeapon
	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

structural.adapter.EnemyTank:hashCode
structural.adapter.EnemyTank:assignDriver
	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyTank:finalize
structural.adapter.EnemyTank:toString
structural.adapter.EnemyTank:clone
structural.adapter.Test:getClass
structural.adapter.Test:wait
structural.adapter.Test:wait
structural.adapter.Test:wait
structural.adapter.Test:notifyAll
structural.adapter.Test:equals
structural.adapter.Test:main
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.adapter.Test:registerNatives
structural.adapter.Test:notify
structural.adapter.Test:hashCode
structural.adapter.Test:finalize
structural.adapter.Test:toString
structural.adapter.Test:clone
structural.adapter.TestEnemyAttackers:getClass
structural.adapter.TestEnemyAttackers:wait
structural.adapter.TestEnemyAttackers:wait
structural.adapter.TestEnemyAttackers:wait
structural.adapter.TestEnemyAttackers:notifyAll
structural.adapter.TestEnemyAttackers:equals
structural.adapter.TestEnemyAttackers:main
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.adapter.TestEnemyAttackers:registerNatives
structural.adapter.TestEnemyAttackers:notify
structural.adapter.TestEnemyAttackers:hashCode
structural.adapter.TestEnemyAttackers:finalize
structural.adapter.TestEnemyAttackers:toString
structural.adapter.TestEnemyAttackers:clone
structural.bridge.AdvancedRemote:getClass
structural.bridge.AdvancedRemote:wait
structural.bridge.AdvancedRemote:wait
structural.bridge.AdvancedRemote:wait
structural.bridge.AdvancedRemote:togglePower
	---> structural.bridge.Device::togglePower() [0 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

structural.bridge.AdvancedRemote:notifyAll
structural.bridge.AdvancedRemote:equals
structural.bridge.AdvancedRemote:mute
	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

structural.bridge.AdvancedRemote:channelDown
	---> structural.bridge.Device::channelDown() [0 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

structural.bridge.AdvancedRemote:registerNatives
structural.bridge.AdvancedRemote:notify
structural.bridge.AdvancedRemote:hashCode
structural.bridge.AdvancedRemote:volumeDown
	---> structural.bridge.Device::volumeDown() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

structural.bridge.AdvancedRemote:volumeUp
	---> structural.bridge.Device::volumeUp() [0 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

structural.bridge.AdvancedRemote:finalize
structural.bridge.AdvancedRemote:toString
structural.bridge.AdvancedRemote:clone
structural.bridge.AdvancedRemote:channelUp
	---> structural.bridge.Device::channelUp() [0 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

structural.bridge.Device:getName
structural.bridge.Device:getClass
structural.bridge.Device:wait
structural.bridge.Device:wait
structural.bridge.Device:wait
structural.bridge.Device:notifyAll
structural.bridge.Device:setChannel
structural.bridge.Device:equals
structural.bridge.Device:registerNatives
structural.bridge.Device:setVolume
structural.bridge.Device:notify
structural.bridge.Device:enable
structural.bridge.Device:hashCode
structural.bridge.Device:getVolume
structural.bridge.Device:getChannel
structural.bridge.Device:disable
structural.bridge.Device:isEnabled
structural.bridge.Device:finalize
structural.bridge.Device:toString
structural.bridge.Device:clone
structural.bridge.Radio:getName
structural.bridge.Radio:getClass
structural.bridge.Radio:wait
structural.bridge.Radio:wait
structural.bridge.Radio:wait
structural.bridge.Radio:notifyAll
structural.bridge.Radio:setChannel
structural.bridge.Radio:equals
structural.bridge.Radio:registerNatives
structural.bridge.Radio:setVolume
structural.bridge.Radio:notify
structural.bridge.Radio:enable
structural.bridge.Radio:hashCode
structural.bridge.Radio:getVolume
structural.bridge.Radio:getChannel
structural.bridge.Radio:disable
structural.bridge.Radio:isEnabled
structural.bridge.Radio:finalize
structural.bridge.Radio:toString
structural.bridge.Radio:clone
structural.bridge.Remote:getClass
structural.bridge.Remote:wait
structural.bridge.Remote:wait
structural.bridge.Remote:wait
structural.bridge.Remote:togglePower
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

structural.bridge.Remote:notifyAll
structural.bridge.Remote:equals
structural.bridge.Remote:channelDown
	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

structural.bridge.Remote:registerNatives
structural.bridge.Remote:notify
structural.bridge.Remote:hashCode
structural.bridge.Remote:volumeDown
	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

structural.bridge.Remote:volumeUp
	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

structural.bridge.Remote:finalize
structural.bridge.Remote:toString
structural.bridge.Remote:clone
structural.bridge.Remote:channelUp
	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV:getName
structural.bridge.TV:getClass
structural.bridge.TV:wait
structural.bridge.TV:wait
structural.bridge.TV:wait
structural.bridge.TV:notifyAll
structural.bridge.TV:setChannel
structural.bridge.TV:equals
structural.bridge.TV:registerNatives
structural.bridge.TV:setVolume
structural.bridge.TV:notify
structural.bridge.TV:enable
structural.bridge.TV:hashCode
structural.bridge.TV:getVolume
structural.bridge.TV:getChannel
structural.bridge.TV:disable
structural.bridge.TV:isEnabled
structural.bridge.TV:finalize
structural.bridge.TV:toString
structural.bridge.TV:clone
structural.bridge.Test:getClass
structural.bridge.Test:wait
structural.bridge.Test:wait
structural.bridge.Test:wait
structural.bridge.Test:notifyAll
structural.bridge.Test:equals
structural.bridge.Test:main
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

structural.bridge.Test:registerNatives
structural.bridge.Test:notify
structural.bridge.Test:hashCode
structural.bridge.Test:ordinaryRemoteTest
	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

structural.bridge.Test:advancedRemoteTest
	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [0 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

structural.bridge.Test:finalize
structural.bridge.Test:toString
structural.bridge.Test:clone
structural.composite.DiscJockey:getClass
structural.composite.DiscJockey:wait
structural.composite.DiscJockey:wait
structural.composite.DiscJockey:wait
structural.composite.DiscJockey:notifyAll
structural.composite.DiscJockey:equals
structural.composite.DiscJockey:registerNatives
structural.composite.DiscJockey:notify
structural.composite.DiscJockey:hashCode
structural.composite.DiscJockey:getSongList
structural.composite.DiscJockey:displaySongList
	---> structural.composite.SongComponent::displaySongList() [0 time(s)]

structural.composite.DiscJockey:finalize
structural.composite.DiscJockey:toString
structural.composite.DiscJockey:clone
structural.composite.Song:getClass
structural.composite.Song:wait
structural.composite.Song:wait
structural.composite.Song:wait
structural.composite.Song:add
structural.composite.Song:getInfo
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

structural.composite.Song:notifyAll
structural.composite.Song:equals
structural.composite.Song:registerNatives
structural.composite.Song:getSongName
structural.composite.Song:notify
structural.composite.Song:remove
structural.composite.Song:hashCode
structural.composite.Song:getBandName
structural.composite.Song:getComponent
structural.composite.Song:displayInfo
	---> structural.composite.Song::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

structural.composite.Song:finalize
structural.composite.Song:toString
structural.composite.Song:clone
structural.composite.Song:getReleaseYear
structural.composite.SongComponent:getClass
structural.composite.SongComponent:wait
structural.composite.SongComponent:wait
structural.composite.SongComponent:wait
structural.composite.SongComponent:add
structural.composite.SongComponent:getInfo
structural.composite.SongComponent:notifyAll
structural.composite.SongComponent:equals
structural.composite.SongComponent:registerNatives
structural.composite.SongComponent:getSongName
structural.composite.SongComponent:notify
structural.composite.SongComponent:remove
structural.composite.SongComponent:hashCode
structural.composite.SongComponent:getBandName
structural.composite.SongComponent:getComponent
structural.composite.SongComponent:displayInfo
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongComponent:finalize
structural.composite.SongComponent:toString
structural.composite.SongComponent:clone
structural.composite.SongComponent:getReleaseYear
structural.composite.SongGroup:getClass
structural.composite.SongGroup:wait
structural.composite.SongGroup:wait
structural.composite.SongGroup:wait
structural.composite.SongGroup:add
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

structural.composite.SongGroup:getInfo
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

structural.composite.SongGroup:notifyAll
structural.composite.SongGroup:equals
structural.composite.SongGroup:registerNatives
structural.composite.SongGroup:getSongName
structural.composite.SongGroup:notify
structural.composite.SongGroup:remove
	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

structural.composite.SongGroup:getGroupName
structural.composite.SongGroup:hashCode
structural.composite.SongGroup:getBandName
structural.composite.SongGroup:getComponent
	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

structural.composite.SongGroup:getGroupDescription
structural.composite.SongGroup:displayInfo
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongGroup:finalize
structural.composite.SongGroup:toString
structural.composite.SongGroup:clone
structural.composite.SongGroup:getReleaseYear
structural.composite.SongListGenerator:getClass
structural.composite.SongListGenerator:wait
structural.composite.SongListGenerator:wait
structural.composite.SongListGenerator:wait
structural.composite.SongListGenerator:notifyAll
structural.composite.SongListGenerator:equals
structural.composite.SongListGenerator:main
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.SongListGenerator:registerNatives
structural.composite.SongListGenerator:notify
structural.composite.SongListGenerator:hashCode
structural.composite.SongListGenerator:finalize
structural.composite.SongListGenerator:toString
structural.composite.SongListGenerator:clone
structural.composite.Test:getClass
structural.composite.Test:wait
structural.composite.Test:wait
structural.composite.Test:wait
structural.composite.Test:notifyAll
structural.composite.Test:equals
structural.composite.Test:main
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:registerNatives
structural.composite.Test:notify
structural.composite.Test:hashCode
structural.composite.Test:finalize
structural.composite.Test:toString
structural.composite.Test:clone
structural.decorator.Beverage:getClass
structural.decorator.Beverage:wait
structural.decorator.Beverage:wait
structural.decorator.Beverage:wait
structural.decorator.Beverage:notifyAll
structural.decorator.Beverage:description
structural.decorator.Beverage:equals
structural.decorator.Beverage:registerNatives
structural.decorator.Beverage:notify
structural.decorator.Beverage:hashCode
structural.decorator.Beverage:price
structural.decorator.Beverage:finalize
structural.decorator.Beverage:toString
structural.decorator.Beverage:clone
structural.decorator.BeverageDecorator:getClass
structural.decorator.BeverageDecorator:wait
structural.decorator.BeverageDecorator:wait
structural.decorator.BeverageDecorator:wait
structural.decorator.BeverageDecorator:notifyAll
structural.decorator.BeverageDecorator:description
structural.decorator.BeverageDecorator:equals
structural.decorator.BeverageDecorator:registerNatives
structural.decorator.BeverageDecorator:notify
structural.decorator.BeverageDecorator:hashCode
structural.decorator.BeverageDecorator:price
structural.decorator.BeverageDecorator:finalize
structural.decorator.BeverageDecorator:toString
structural.decorator.BeverageDecorator:clone
structural.decorator.CaramelDecorator:getClass
structural.decorator.CaramelDecorator:wait
structural.decorator.CaramelDecorator:wait
structural.decorator.CaramelDecorator:wait
structural.decorator.CaramelDecorator:notifyAll
structural.decorator.CaramelDecorator:description
	---> structural.decorator.Beverage::description() [0 time(s)]

structural.decorator.CaramelDecorator:equals
structural.decorator.CaramelDecorator:registerNatives
structural.decorator.CaramelDecorator:notify
structural.decorator.CaramelDecorator:hashCode
structural.decorator.CaramelDecorator:price
	---> structural.decorator.Beverage::price() [0 time(s)]

structural.decorator.CaramelDecorator:finalize
structural.decorator.CaramelDecorator:toString
structural.decorator.CaramelDecorator:clone
structural.decorator.Espresso:getClass
structural.decorator.Espresso:wait
structural.decorator.Espresso:wait
structural.decorator.Espresso:wait
structural.decorator.Espresso:notifyAll
structural.decorator.Espresso:description
structural.decorator.Espresso:equals
structural.decorator.Espresso:registerNatives
structural.decorator.Espresso:notify
structural.decorator.Espresso:hashCode
structural.decorator.Espresso:price
structural.decorator.Espresso:finalize
structural.decorator.Espresso:toString
structural.decorator.Espresso:clone
structural.decorator.IBeverage:price
structural.decorator.IBeverage:description
structural.decorator.SugarDecorator:getClass
structural.decorator.SugarDecorator:wait
structural.decorator.SugarDecorator:wait
structural.decorator.SugarDecorator:wait
structural.decorator.SugarDecorator:notifyAll
structural.decorator.SugarDecorator:description
	---> structural.decorator.Beverage::description() [1 time(s)]

structural.decorator.SugarDecorator:equals
structural.decorator.SugarDecorator:registerNatives
structural.decorator.SugarDecorator:notify
structural.decorator.SugarDecorator:hashCode
structural.decorator.SugarDecorator:price
	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.SugarDecorator:finalize
structural.decorator.SugarDecorator:toString
structural.decorator.SugarDecorator:clone
structural.decorator.Tea:getClass
structural.decorator.Tea:wait
structural.decorator.Tea:wait
structural.decorator.Tea:wait
structural.decorator.Tea:notifyAll
structural.decorator.Tea:description
structural.decorator.Tea:equals
structural.decorator.Tea:registerNatives
structural.decorator.Tea:notify
structural.decorator.Tea:hashCode
structural.decorator.Tea:price
structural.decorator.Tea:finalize
structural.decorator.Tea:toString
structural.decorator.Tea:clone
structural.decorator.Test:getClass
structural.decorator.Test:wait
structural.decorator.Test:wait
structural.decorator.Test:wait
structural.decorator.Test:notifyAll
structural.decorator.Test:equals
structural.decorator.Test:main
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

structural.decorator.Test:displayOrder
	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

structural.decorator.Test:registerNatives
structural.decorator.Test:notify
structural.decorator.Test:hashCode
structural.decorator.Test:beveragesMenu
	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

structural.decorator.Test:selectBeverage
	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

structural.decorator.Test:selectAdditionalIngredients
	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

structural.decorator.Test:orderBeverage
	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

structural.decorator.Test:finalize
structural.decorator.Test:toString
structural.decorator.Test:clone
structural.decorator.Test:additionalIngredientsMenu
	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:getClass
structural.facade.BankAccount:wait
structural.facade.BankAccount:wait
structural.facade.BankAccount:wait
structural.facade.BankAccount:notifyAll
structural.facade.BankAccount:equals
structural.facade.BankAccount:setNumber
structural.facade.BankAccount:registerNatives
structural.facade.BankAccount:notify
structural.facade.BankAccount:getNumber
structural.facade.BankAccount:setSecurityCode
structural.facade.BankAccount:hashCode
structural.facade.BankAccount:getBalance
structural.facade.BankAccount:getSecurityCode
structural.facade.BankAccount:finalize
structural.facade.BankAccount:toString
structural.facade.BankAccount:clone
structural.facade.BankAccount:setBalance
structural.facade.BankAccountBalanceSystem:getClass
structural.facade.BankAccountBalanceSystem:wait
structural.facade.BankAccountBalanceSystem:wait
structural.facade.BankAccountBalanceSystem:wait
structural.facade.BankAccountBalanceSystem:notifyAll
structural.facade.BankAccountBalanceSystem:canWithdraw
	---> structural.facade.BankAccount::canWithdraw(double) [0 time(s)]

structural.facade.BankAccountBalanceSystem:equals
structural.facade.BankAccountBalanceSystem:registerNatives
structural.facade.BankAccountBalanceSystem:getAccountBalance
	---> structural.facade.BankAccount::getAccountBalance() [0 time(s)]

structural.facade.BankAccountBalanceSystem:notify
structural.facade.BankAccountBalanceSystem:hashCode
structural.facade.BankAccountBalanceSystem:deposit
	---> structural.facade.BankAccount::deposit(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

structural.facade.BankAccountBalanceSystem:finalize
structural.facade.BankAccountBalanceSystem:toString
structural.facade.BankAccountBalanceSystem:clone
structural.facade.BankAccountBalanceSystem:withdraw
	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

structural.facade.BankAccountFacade:getClass
structural.facade.BankAccountFacade:wait
structural.facade.BankAccountFacade:wait
structural.facade.BankAccountFacade:wait
structural.facade.BankAccountFacade:notifyAll
structural.facade.BankAccountFacade:equals
structural.facade.BankAccountFacade:registerNatives
structural.facade.BankAccountFacade:depositCash
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

structural.facade.BankAccountFacade:notify
structural.facade.BankAccountFacade:hashCode
structural.facade.BankAccountFacade:getSecurityCode
structural.facade.BankAccountFacade:getAccountNumber
structural.facade.BankAccountFacade:fetchBankAccount
structural.facade.BankAccountFacade:withdrawCash
	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

structural.facade.BankAccountFacade:finalize
structural.facade.BankAccountFacade:toString
structural.facade.BankAccountFacade:clone
structural.facade.BankAccountNumberChecker:getClass
structural.facade.BankAccountNumberChecker:wait
structural.facade.BankAccountNumberChecker:wait
structural.facade.BankAccountNumberChecker:wait
structural.facade.BankAccountNumberChecker:notifyAll
structural.facade.BankAccountNumberChecker:equals
structural.facade.BankAccountNumberChecker:registerNatives
structural.facade.BankAccountNumberChecker:match
	---> structural.facade.BankAccountNumberChecker::match(int) [0 time(s)]

structural.facade.BankAccountNumberChecker:notify
structural.facade.BankAccountNumberChecker:hashCode
structural.facade.BankAccountNumberChecker:getAccountNumber
	---> structural.facade.BankAccount::getAccountNumber() [0 time(s)]

structural.facade.BankAccountNumberChecker:finalize
structural.facade.BankAccountNumberChecker:toString
structural.facade.BankAccountNumberChecker:clone
structural.facade.BankAccountSecurityCodeChecker:getClass
structural.facade.BankAccountSecurityCodeChecker:wait
structural.facade.BankAccountSecurityCodeChecker:wait
structural.facade.BankAccountSecurityCodeChecker:wait
structural.facade.BankAccountSecurityCodeChecker:notifyAll
structural.facade.BankAccountSecurityCodeChecker:equals
structural.facade.BankAccountSecurityCodeChecker:registerNatives
structural.facade.BankAccountSecurityCodeChecker:match
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker:notify
structural.facade.BankAccountSecurityCodeChecker:hashCode
structural.facade.BankAccountSecurityCodeChecker:getAccountSecurityCode
	---> structural.facade.BankAccount::getAccountSecurityCode() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:finalize
structural.facade.BankAccountSecurityCodeChecker:toString
structural.facade.BankAccountSecurityCodeChecker:clone
structural.facade.BankAccountWelcomeWindow:getClass
structural.facade.BankAccountWelcomeWindow:wait
structural.facade.BankAccountWelcomeWindow:wait
structural.facade.BankAccountWelcomeWindow:wait
structural.facade.BankAccountWelcomeWindow:notifyAll
structural.facade.BankAccountWelcomeWindow:equals
structural.facade.BankAccountWelcomeWindow:registerNatives
structural.facade.BankAccountWelcomeWindow:notify
structural.facade.BankAccountWelcomeWindow:hashCode
structural.facade.BankAccountWelcomeWindow:setWelcomeMessage
	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

structural.facade.BankAccountWelcomeWindow:finalize
structural.facade.BankAccountWelcomeWindow:toString
structural.facade.BankAccountWelcomeWindow:clone
structural.facade.Test:getClass
structural.facade.Test:wait
structural.facade.Test:wait
structural.facade.Test:wait
structural.facade.Test:notifyAll
structural.facade.Test:equals
structural.facade.Test:main
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.facade.Test:registerNatives
structural.facade.Test:notify
structural.facade.Test:hashCode
structural.facade.Test:finalize
structural.facade.Test:toString
structural.facade.Test:clone
structural.flyweight.Circle:getClass
structural.flyweight.Circle:wait
structural.flyweight.Circle:wait
structural.flyweight.Circle:wait
structural.flyweight.Circle:notifyAll
structural.flyweight.Circle:equals
structural.flyweight.Circle:registerNatives
structural.flyweight.Circle:draw
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.Circle:getRadius
structural.flyweight.Circle:notify
structural.flyweight.Circle:setRadius
structural.flyweight.Circle:hashCode
structural.flyweight.Circle:finalize
structural.flyweight.Circle:toString
structural.flyweight.Circle:clone
structural.flyweight.Position:getClass
structural.flyweight.Position:wait
structural.flyweight.Position:wait
structural.flyweight.Position:wait
structural.flyweight.Position:setX
structural.flyweight.Position:notifyAll
structural.flyweight.Position:equals
structural.flyweight.Position:registerNatives
structural.flyweight.Position:setY
structural.flyweight.Position:notify
structural.flyweight.Position:hashCode
structural.flyweight.Position:getX
structural.flyweight.Position:getY
structural.flyweight.Position:toString
structural.flyweight.Position:finalize
structural.flyweight.Position:clone
structural.flyweight.Shape:draw
structural.flyweight.ShapeFactory:getClass
structural.flyweight.ShapeFactory:wait
structural.flyweight.ShapeFactory:wait
structural.flyweight.ShapeFactory:wait
structural.flyweight.ShapeFactory:getCircle
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

structural.flyweight.ShapeFactory:notifyAll
structural.flyweight.ShapeFactory:equals
structural.flyweight.ShapeFactory:registerNatives
structural.flyweight.ShapeFactory:notify
structural.flyweight.ShapeFactory:hashCode
structural.flyweight.ShapeFactory:finalize
structural.flyweight.ShapeFactory:toString
structural.flyweight.ShapeFactory:clone
structural.flyweight.Test:getClass
structural.flyweight.Test:wait
structural.flyweight.Test:wait
structural.flyweight.Test:wait
structural.flyweight.Test:notifyAll
structural.flyweight.Test:equals
structural.flyweight.Test:main
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

structural.flyweight.Test:registerNatives
structural.flyweight.Test:notify
structural.flyweight.Test:getRandomRadius
	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

structural.flyweight.Test:hashCode
structural.flyweight.Test:getRandomX
	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

structural.flyweight.Test:getRandomY
	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

structural.flyweight.Test:finalize
structural.flyweight.Test:toString
structural.flyweight.Test:clone
structural.flyweight.Test:getRandomColor
	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:connectTo
structural.proxy.ProxyInternet:getClass
structural.proxy.ProxyInternet:wait
structural.proxy.ProxyInternet:wait
structural.proxy.ProxyInternet:wait
structural.proxy.ProxyInternet:notifyAll
structural.proxy.ProxyInternet:equals
structural.proxy.ProxyInternet:registerNatives
structural.proxy.ProxyInternet:notify
structural.proxy.ProxyInternet:hashCode
structural.proxy.ProxyInternet:finalize
structural.proxy.ProxyInternet:toString
structural.proxy.ProxyInternet:clone
structural.proxy.ProxyInternet:connectTo
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.RealInternet:getClass
structural.proxy.RealInternet:wait
structural.proxy.RealInternet:wait
structural.proxy.RealInternet:wait
structural.proxy.RealInternet:notifyAll
structural.proxy.RealInternet:equals
structural.proxy.RealInternet:registerNatives
structural.proxy.RealInternet:notify
structural.proxy.RealInternet:hashCode
structural.proxy.RealInternet:finalize
structural.proxy.RealInternet:toString
structural.proxy.RealInternet:clone
structural.proxy.RealInternet:connectTo
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:getClass
structural.proxy.Test:wait
structural.proxy.Test:wait
structural.proxy.Test:wait
structural.proxy.Test:notifyAll
structural.proxy.Test:equals
structural.proxy.Test:main
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]

structural.proxy.Test:registerNatives
structural.proxy.Test:notify
structural.proxy.Test:hashCode
structural.proxy.Test:finalize
structural.proxy.Test:toString
structural.proxy.Test:clone

Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [0 time(s)]

	---> behavioral.command.TV::execute() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [0 time(s)]

	---> structural.composite.Song::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.mediator.User::get(int) [0 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [0 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [0 time(s)]

	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockObserver::update() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [0 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [0 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [0 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [0 time(s)]

	---> creational.builder.Robot::buildArms() [0 time(s)]

	---> creational.builder.Robot::buildHead() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [0 time(s)]

	---> creational.prototype.Position::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Triangle::loadCache() [3 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Rectangle::loadCache() [6 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [0 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::channelDown() [0 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [0 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [0 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [0 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [0 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [0 time(s)]

	---> structural.facade.BankAccount::deposit(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [0 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::getClass() [0 time(s)]

	---> ::wait(long) [0 time(s)]

	---> ::wait(long,int) [0 time(s)]

	---> ::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getFilePath() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setFilePath(java.lang.String) [0 time(s)]

behavioral.chain_of_responsibility.ILogger:
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getMessage() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setLevel(behavioral.chain_of_responsibility.LogRequestLevel) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setMessage(java.lang.String) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getLevel() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.LogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::value() [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::compareTo(java.lang.Enum) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::describeConstable() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getDeclaringClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::name() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::ordinal() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::readObject(java.io.ObjectInputStream) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::readObjectNoData() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::value() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::valueOf(java.lang.String) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::values() [0 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.command.Command:
	---> behavioral.chain_of_responsibility.ILogger::getName() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::undo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::execute() [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::notify() [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::hashCode() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::finalize() [0 time(s)]

	---> behavioral.command.Command::toString() [0 time(s)]

	---> behavioral.command.Command::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [0 time(s)]

	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.TV::registerNatives() [0 time(s)]

	---> behavioral.command.TV::notify() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::hashCode() [0 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

	---> behavioral.command.TV::finalize() [0 time(s)]

	---> behavioral.command.TV::toString() [0 time(s)]

	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.TV::registerNatives() [0 time(s)]

	---> behavioral.command.TV::notify() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::hashCode() [0 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::finalize() [0 time(s)]

	---> behavioral.command.TV::toString() [0 time(s)]

	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.TV::registerNatives() [0 time(s)]

	---> behavioral.command.TV::notify() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::hashCode() [0 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::finalize() [0 time(s)]

	---> behavioral.command.TV::toString() [0 time(s)]

	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.TV::switchChannel(int) [0 time(s)]

	---> behavioral.command.TV::registerNatives() [0 time(s)]

	---> behavioral.command.TV::notify() [0 time(s)]

	---> behavioral.command.TV::switchOff() [0 time(s)]

	---> behavioral.command.TV::hashCode() [0 time(s)]

	---> behavioral.command.TV::getChannel() [0 time(s)]

	---> behavioral.command.TV::isOn() [0 time(s)]

	---> behavioral.command.TV::finalize() [0 time(s)]

	---> behavioral.command.TV::toString() [0 time(s)]

	---> behavioral.command.TV::clone() [0 time(s)]

	---> behavioral.command.TV::switchOn() [0 time(s)]

behavioral.command.Test:
	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

	---> behavioral.command.CommandManager::registerNatives() [0 time(s)]

	---> behavioral.command.CommandManager::notify() [0 time(s)]

	---> behavioral.command.CommandManager::hashCode() [0 time(s)]

	---> behavioral.command.CommandManager::finalize() [0 time(s)]

	---> behavioral.command.CommandManager::toString() [0 time(s)]

	---> behavioral.command.CommandManager::clone() [0 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.command.CommandManager::getClass() [0 time(s)]

	---> behavioral.command.CommandManager::wait(long) [0 time(s)]

	---> behavioral.command.CommandManager::wait(long,int) [0 time(s)]

	---> behavioral.command.CommandManager::wait() [0 time(s)]

	---> behavioral.command.CommandManager::notifyAll() [0 time(s)]

	---> behavioral.command.CommandManager::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.CommandManager::registerNatives() [0 time(s)]

	---> behavioral.command.CommandManager::notify() [0 time(s)]

	---> behavioral.command.CommandManager::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

	---> behavioral.interpreter.Expression::notify() [0 time(s)]

	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.Expression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

	---> behavioral.interpreter.Expression::notify() [0 time(s)]

	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

	---> behavioral.interpreter.Expression::notify() [0 time(s)]

	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

	---> behavioral.interpreter.Expression::getIsFemaleExpression() [0 time(s)]

	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

	---> behavioral.interpreter.Expression::notify() [0 time(s)]

	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> structural.composite.Song::displaySongs() [0 time(s)]

	---> structural.composite.Song::notifyAll() [0 time(s)]

	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.Song::registerNatives() [0 time(s)]

	---> structural.composite.Song::notify() [0 time(s)]

	---> structural.composite.Song::hashCode() [0 time(s)]

	---> structural.composite.Song::finalize() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::clone() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::getClass() [0 time(s)]

	---> structural.composite.Song::wait(long) [0 time(s)]

	---> structural.composite.Song::wait(long,int) [0 time(s)]

	---> structural.composite.Song::wait() [0 time(s)]

	---> structural.composite.Song::notifyAll() [0 time(s)]

	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.Song::registerNatives() [0 time(s)]

	---> structural.composite.Song::getSongName() [0 time(s)]

	---> structural.composite.Song::notify() [0 time(s)]

	---> structural.composite.Song::hashCode() [0 time(s)]

	---> structural.composite.Song::getBandName() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::finalize() [0 time(s)]

	---> structural.composite.Song::clone() [0 time(s)]

	---> structural.composite.Song::getYearReleased() [0 time(s)]

behavioral.iterator.SongAggregate:
	---> structural.composite.Song::iterator() [0 time(s)]

	---> structural.composite.Song::spliterator() [0 time(s)]

	---> structural.composite.Song::forEach(java.util.function.Consumer) [0 time(s)]

	---> structural.composite.Song::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongArray:
	---> structural.composite.Song::getClass() [0 time(s)]

	---> structural.composite.Song::wait(long) [0 time(s)]

	---> structural.composite.Song::wait(long,int) [0 time(s)]

	---> structural.composite.Song::wait() [0 time(s)]

	---> structural.composite.Song::spliterator() [0 time(s)]

	---> structural.composite.Song::notifyAll() [0 time(s)]

	---> structural.composite.Song::forEach(java.util.function.Consumer) [0 time(s)]

	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.Song::length() [0 time(s)]

	---> structural.composite.Song::registerNatives() [0 time(s)]

	---> structural.composite.Song::notify() [0 time(s)]

	---> structural.composite.Song::hashCode() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [0 time(s)]

	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

	---> behavioral.iterator.SongArray::toString() [0 time(s)]

	---> behavioral.iterator.SongArray::clone() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

	---> behavioral.iterator.SongArray::wait() [0 time(s)]

	---> behavioral.iterator.SongArray::spliterator() [0 time(s)]

	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

	---> behavioral.iterator.SongArray::forEach(java.util.function.Consumer) [0 time(s)]

	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

	---> behavioral.iterator.SongArray::registerNatives() [0 time(s)]

	---> behavioral.iterator.SongArray::notify() [0 time(s)]

	---> behavioral.iterator.SongArray::hashCode() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

	---> behavioral.iterator.SongArray::toString() [0 time(s)]

	---> behavioral.iterator.SongArray::clone() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

	---> behavioral.iterator.SongArray::wait() [0 time(s)]

	---> behavioral.iterator.SongArray::spliterator() [0 time(s)]

	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

	---> behavioral.iterator.SongArray::forEach(java.util.function.Consumer) [0 time(s)]

	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

	---> behavioral.iterator.SongArray::registerNatives() [0 time(s)]

	---> behavioral.iterator.SongArray::notify() [0 time(s)]

	---> behavioral.iterator.SongArray::hashCode() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

	---> behavioral.iterator.SongArray::toString() [0 time(s)]

	---> behavioral.iterator.SongArray::clone() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

	---> behavioral.iterator.SongArray::wait() [0 time(s)]

	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.DiscJockey::registerNatives() [0 time(s)]

	---> behavioral.iterator.DiscJockey::notify() [0 time(s)]

	---> behavioral.iterator.DiscJockey::hashCode() [0 time(s)]

	---> behavioral.iterator.DiscJockey::finalize() [0 time(s)]

	---> behavioral.iterator.DiscJockey::toString() [0 time(s)]

	---> behavioral.iterator.DiscJockey::clone() [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::getClass() [0 time(s)]

	---> behavioral.iterator.DiscJockey::wait(long) [0 time(s)]

	---> behavioral.iterator.DiscJockey::wait(long,int) [0 time(s)]

	---> behavioral.iterator.DiscJockey::wait() [0 time(s)]

	---> behavioral.iterator.DiscJockey::notifyAll() [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::getName() [0 time(s)]

	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::notifyAll() [0 time(s)]

	---> behavioral.mediator.ChatUser::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.ChatUser::getId() [0 time(s)]

	---> behavioral.mediator.ChatUser::registerNatives() [0 time(s)]

	---> behavioral.mediator.ChatUser::notify() [0 time(s)]

	---> behavioral.mediator.ChatUser::hashCode() [0 time(s)]

	---> behavioral.mediator.ChatUser::getRoom() [0 time(s)]

	---> behavioral.mediator.ChatUser::finalize() [0 time(s)]

	---> behavioral.mediator.ChatUser::toString() [0 time(s)]

	---> behavioral.mediator.ChatUser::clone() [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

behavioral.mediator.IChatRoom:
	---> behavioral.mediator.ChatUser::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::addUser(behavioral.mediator.User) [0 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.ChatUser::getClass() [0 time(s)]

	---> behavioral.mediator.ChatUser::wait(long) [0 time(s)]

	---> behavioral.mediator.ChatUser::wait(long,int) [0 time(s)]

	---> behavioral.mediator.ChatUser::wait() [0 time(s)]

	---> behavioral.mediator.ChatUser::notifyAll() [0 time(s)]

	---> behavioral.mediator.ChatUser::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::getName() [0 time(s)]

	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::notifyAll() [0 time(s)]

	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::getId() [0 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::getRoom() [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

	---> behavioral.mediator.User::send(java.lang.String,java.lang.String) [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.mediator.User::notifyAll() [0 time(s)]

	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.mediator.User::get(int) [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.mediator.User::notifyAll() [0 time(s)]

	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::getState() [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::setState(java.lang.String) [0 time(s)]

	---> behavioral.memento.Memento::notifyAll() [0 time(s)]

	---> behavioral.memento.Memento::equals(java.lang.Object) [0 time(s)]

	---> behavioral.memento.Memento::registerNatives() [0 time(s)]

	---> behavioral.memento.Memento::notify() [0 time(s)]

	---> behavioral.memento.Memento::hashCode() [0 time(s)]

	---> behavioral.memento.Memento::getState() [0 time(s)]

	---> behavioral.memento.Memento::externalizeState() [0 time(s)]

	---> behavioral.memento.Memento::finalize() [0 time(s)]

	---> behavioral.memento.Memento::toString() [0 time(s)]

	---> behavioral.memento.Memento::clone() [0 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Memento::getClass() [0 time(s)]

	---> behavioral.memento.Memento::wait(long) [0 time(s)]

	---> behavioral.memento.Memento::wait(long,int) [0 time(s)]

	---> behavioral.memento.Memento::wait() [0 time(s)]

	---> behavioral.memento.Memento::notifyAll() [0 time(s)]

	---> behavioral.memento.Memento::equals(java.lang.Object) [0 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

	---> behavioral.memento.Originator::registerNatives() [0 time(s)]

	---> behavioral.memento.Originator::notify() [0 time(s)]

	---> behavioral.memento.Originator::hashCode() [0 time(s)]

	---> behavioral.memento.Originator::finalize() [0 time(s)]

	---> behavioral.memento.Originator::toString() [0 time(s)]

	---> behavioral.memento.Originator::clone() [0 time(s)]

behavioral.observer.Observer:
	---> behavioral.memento.Originator::update() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.memento.Originator::getClass() [0 time(s)]

	---> behavioral.memento.Originator::wait(long) [0 time(s)]

	---> behavioral.memento.Originator::wait(long,int) [0 time(s)]

	---> behavioral.memento.Originator::wait() [0 time(s)]

	---> behavioral.observer.StockGrabber::setGoogleStock(double) [0 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [0 time(s)]

	---> behavioral.observer.Observer::notifyAll() [0 time(s)]

	---> behavioral.observer.Observer::getIBMStock() [0 time(s)]

	---> behavioral.observer.Observer::equals(java.lang.Object) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::registerNatives() [0 time(s)]

	---> behavioral.observer.Observer::notify() [0 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::getGoogleStock() [0 time(s)]

	---> behavioral.observer.StockGrabber::hashCode() [0 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::getAppleStock() [0 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockGrabber::finalize() [0 time(s)]

	---> behavioral.observer.StockGrabber::toString() [0 time(s)]

	---> behavioral.observer.StockGrabber::clone() [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::getClass() [0 time(s)]

	---> behavioral.observer.StockGrabber::wait(long) [0 time(s)]

	---> behavioral.observer.StockGrabber::wait(long,int) [0 time(s)]

	---> behavioral.observer.StockGrabber::wait() [0 time(s)]

	---> behavioral.observer.StockGrabber::notifyAll() [0 time(s)]

	---> behavioral.observer.StockGrabber::equals(java.lang.Object) [0 time(s)]

	---> behavioral.observer.StockGrabber::registerNatives() [0 time(s)]

	---> behavioral.observer.StockObserver::update() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::notify() [0 time(s)]

	---> behavioral.observer.StockObserver::hashCode() [0 time(s)]

	---> behavioral.observer.StockObserver::finalize() [0 time(s)]

	---> behavioral.observer.StockObserver::toString() [0 time(s)]

	---> behavioral.observer.StockObserver::clone() [0 time(s)]

behavioral.observer.Subject:
	---> behavioral.observer.StockObserver::notifyObserver() [0 time(s)]

	---> behavioral.observer.StockObserver::register(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockObserver::unregister(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.Test:
	---> behavioral.observer.StockObserver::getClass() [0 time(s)]

	---> behavioral.observer.StockObserver::wait(long) [0 time(s)]

	---> behavioral.observer.StockObserver::wait(long,int) [0 time(s)]

	---> behavioral.observer.StockObserver::wait() [0 time(s)]

	---> behavioral.observer.StockObserver::notifyAll() [0 time(s)]

	---> behavioral.observer.StockObserver::equals(java.lang.Object) [0 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

	---> behavioral.observer.StockGrabber::registerNatives() [0 time(s)]

	---> behavioral.observer.StockGrabber::notify() [0 time(s)]

	---> behavioral.observer.StockGrabber::hashCode() [0 time(s)]

	---> behavioral.observer.StockGrabber::finalize() [0 time(s)]

	---> behavioral.observer.StockGrabber::toString() [0 time(s)]

	---> behavioral.observer.StockGrabber::clone() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.observer.StockGrabber::getClass() [0 time(s)]

	---> behavioral.observer.StockGrabber::getCashInMachine() [0 time(s)]

	---> behavioral.observer.StockGrabber::wait(long) [0 time(s)]

	---> behavioral.observer.StockGrabber::wait(long,int) [0 time(s)]

	---> behavioral.observer.StockGrabber::wait() [0 time(s)]

	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMState::notifyAll() [0 time(s)]

	---> behavioral.state.ATMState::setATMState(behavioral.state.ATMState) [0 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMState::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMState::registerNatives() [0 time(s)]

	---> behavioral.state.ATMState::getATMState() [0 time(s)]

	---> behavioral.state.ATMState::getNoCardState() [0 time(s)]

	---> behavioral.state.ATMState::notify() [0 time(s)]

	---> behavioral.state.ATMState::getHasCardState() [0 time(s)]

	---> behavioral.state.ATMState::hashCode() [0 time(s)]

	---> behavioral.state.ATMState::getNoCashState() [0 time(s)]

	---> behavioral.state.ATMState::getCorrectPinState() [0 time(s)]

	---> behavioral.state.ATMState::finalize() [0 time(s)]

	---> behavioral.state.ATMState::toString() [0 time(s)]

	---> behavioral.state.ATMState::clone() [0 time(s)]

	---> behavioral.state.ATMState::setCashInMachine(int) [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::getClass() [0 time(s)]

	---> behavioral.state.ATMState::wait(long) [0 time(s)]

	---> behavioral.state.ATMState::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMState::wait() [0 time(s)]

	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMState::notifyAll() [0 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMState::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMState::registerNatives() [0 time(s)]

	---> behavioral.state.ATMState::notify() [0 time(s)]

	---> behavioral.state.ATMState::hashCode() [0 time(s)]

	---> behavioral.state.ATMState::finalize() [0 time(s)]

	---> behavioral.state.ATMState::toString() [0 time(s)]

	---> behavioral.state.ATMState::clone() [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::getClass() [0 time(s)]

	---> behavioral.state.ATMState::wait(long) [0 time(s)]

	---> behavioral.state.ATMState::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMState::wait() [0 time(s)]

	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

	---> behavioral.state.ATMMachine::notify() [0 time(s)]

	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

	---> behavioral.state.ATMMachine::toString() [0 time(s)]

	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMMachine::wait() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

	---> behavioral.state.HasCard::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.HasCard::registerNatives() [0 time(s)]

	---> behavioral.state.HasCard::notify() [0 time(s)]

	---> behavioral.state.HasCard::hashCode() [0 time(s)]

	---> behavioral.state.HasCard::finalize() [0 time(s)]

	---> behavioral.state.HasCard::toString() [0 time(s)]

	---> behavioral.state.HasCard::clone() [0 time(s)]

behavioral.state.IATMState:
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.HasCard::ejectCard() [0 time(s)]

	---> behavioral.state.HasCard::requestCash(int) [0 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.HasCard::getClass() [0 time(s)]

	---> behavioral.state.HasCard::wait(long) [0 time(s)]

	---> behavioral.state.HasCard::wait(long,int) [0 time(s)]

	---> behavioral.state.HasCard::wait() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::notifyAll() [0 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.NoCard::registerNatives() [0 time(s)]

	---> behavioral.state.NoCard::notify() [0 time(s)]

	---> behavioral.state.NoCard::hashCode() [0 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

	---> behavioral.state.NoCard::finalize() [0 time(s)]

	---> behavioral.state.NoCard::toString() [0 time(s)]

	---> behavioral.state.NoCard::clone() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCard::getClass() [0 time(s)]

	---> behavioral.state.NoCard::wait(long) [0 time(s)]

	---> behavioral.state.NoCard::wait(long,int) [0 time(s)]

	---> behavioral.state.NoCard::wait() [0 time(s)]

	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::notifyAll() [0 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.NoCash::registerNatives() [0 time(s)]

	---> behavioral.state.NoCash::notify() [0 time(s)]

	---> behavioral.state.NoCash::hashCode() [0 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

	---> behavioral.state.NoCash::finalize() [0 time(s)]

	---> behavioral.state.NoCash::toString() [0 time(s)]

	---> behavioral.state.NoCash::clone() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.NoCash::getClass() [0 time(s)]

	---> behavioral.state.NoCash::wait(long) [0 time(s)]

	---> behavioral.state.NoCash::wait(long,int) [0 time(s)]

	---> behavioral.state.NoCash::wait() [0 time(s)]

	---> behavioral.state.NoCash::notifyAll() [0 time(s)]

	---> behavioral.state.NoCash::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

	---> behavioral.state.ATMMachine::notify() [0 time(s)]

	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

	---> behavioral.state.ATMMachine::toString() [0 time(s)]

	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMMachine::wait() [0 time(s)]

	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

	---> behavioral.state.ATMMachine::notify() [0 time(s)]

	---> behavioral.state.ATMMachine::execute(int,int) [0 time(s)]

	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

	---> behavioral.state.ATMMachine::toString() [0 time(s)]

	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.strategy.ArithmeticOperation:
	---> behavioral.state.ATMMachine::execute(int,int) [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMMachine::wait() [0 time(s)]

	---> behavioral.state.ATMMachine::reset() [0 time(s)]

	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

	---> behavioral.state.ATMMachine::notify() [0 time(s)]

	---> behavioral.state.ATMMachine::getResult() [0 time(s)]

	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::setOperation(behavioral.strategy.ArithmeticOperation) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.template_method.Game::hashCode() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::finalize() [0 time(s)]

	---> behavioral.template_method.Game::toString() [0 time(s)]

	---> behavioral.template_method.Game::clone() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::getClass() [0 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.template_method.Game::hashCode() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::finalize() [0 time(s)]

	---> behavioral.template_method.Game::toString() [0 time(s)]

	---> behavioral.template_method.Game::clone() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::getClass() [0 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.template_method.Game::hashCode() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::finalize() [0 time(s)]

	---> behavioral.template_method.Game::toString() [0 time(s)]

	---> behavioral.template_method.Game::clone() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::getClass() [0 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.template_method.Game::hashCode() [0 time(s)]

	---> behavioral.template_method.Game::finalize() [0 time(s)]

	---> behavioral.template_method.Game::toString() [0 time(s)]

	---> behavioral.template_method.Game::clone() [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.template_method.Game::getName() [0 time(s)]

	---> behavioral.template_method.Game::getClass() [0 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::setName(java.lang.String) [0 time(s)]

	---> behavioral.template_method.Game::setPrice(double) [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::getPrice() [0 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::getName() [0 time(s)]

	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.Visitor::wait() [0 time(s)]

	---> behavioral.visitor.Visitor::setName(java.lang.String) [0 time(s)]

	---> behavioral.visitor.Visitor::setPrice(double) [0 time(s)]

	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.Visitor::getPrice() [0 time(s)]

	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.Visitor::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::getName() [0 time(s)]

	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.Visitor::wait() [0 time(s)]

	---> behavioral.visitor.Visitor::setName(java.lang.String) [0 time(s)]

	---> behavioral.visitor.Visitor::setPrice(double) [0 time(s)]

	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.Visitor::getPrice() [0 time(s)]

	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.Visitor::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.Visitor::wait() [0 time(s)]

	---> behavioral.visitor.Visitor::getComputedTax() [0 time(s)]

	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.Visitor::notify() [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::getTaxRate() [0 time(s)]

	---> behavioral.visitor.Product::hashCode() [0 time(s)]

	---> behavioral.visitor.Product::finalize() [0 time(s)]

	---> behavioral.visitor.Product::toString() [0 time(s)]

	---> behavioral.visitor.Product::clone() [0 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [0 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::getComputedTax() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::getTaxRate() [0 time(s)]

	---> behavioral.visitor.Product::hashCode() [0 time(s)]

	---> behavioral.visitor.Product::finalize() [0 time(s)]

	---> behavioral.visitor.Product::toString() [0 time(s)]

	---> behavioral.visitor.Product::clone() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::hashCode() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::finalize() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::toString() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::clone() [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.TaxVisitor::getName() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::setName(java.lang.String) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::setPrice(double) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::getPrice() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Visitable:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

behavioral.visitor.Visitor:
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Liquor) [0 time(s)]

	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Necessity) [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.Visitor::wait() [0 time(s)]

	---> behavioral.visitor.Visitor::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.Visitor::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.Shape:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

	---> creational.abstract_factory.Shape::notify() [0 time(s)]

	---> creational.abstract_factory.Shape::hashCode() [0 time(s)]

	---> creational.abstract_factory.Shape::finalize() [0 time(s)]

	---> creational.abstract_factory.Shape::toString() [0 time(s)]

	---> creational.abstract_factory.Shape::clone() [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::getClass() [0 time(s)]

	---> creational.abstract_factory.Shape::wait(long) [0 time(s)]

	---> creational.abstract_factory.Shape::wait(long,int) [0 time(s)]

	---> creational.abstract_factory.Shape::wait() [0 time(s)]

	---> creational.abstract_factory.Shape::notifyAll() [0 time(s)]

	---> creational.abstract_factory.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

	---> creational.abstract_factory.Shape::draw() [0 time(s)]

	---> creational.abstract_factory.Shape::notify() [0 time(s)]

	---> creational.abstract_factory.Shape::hashCode() [0 time(s)]

	---> creational.abstract_factory.Shape::finalize() [0 time(s)]

	---> creational.abstract_factory.Shape::toString() [0 time(s)]

	---> creational.abstract_factory.Shape::clone() [0 time(s)]

creational.builder.IRobot:
	---> creational.abstract_factory.Shape::setTorso(java.lang.String) [0 time(s)]

	---> creational.abstract_factory.Shape::setArms(java.lang.String) [0 time(s)]

	---> creational.abstract_factory.Shape::setLegs(java.lang.String) [0 time(s)]

	---> creational.abstract_factory.Shape::setHead(java.lang.String) [0 time(s)]

creational.builder.IRobotBuilder:
	---> creational.abstract_factory.Shape::buildArms() [0 time(s)]

	---> creational.abstract_factory.Shape::buildHead() [0 time(s)]

	---> creational.abstract_factory.Shape::getRobot() [0 time(s)]

	---> creational.abstract_factory.Shape::buildTorso() [0 time(s)]

	---> creational.abstract_factory.Shape::buildLegs() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.abstract_factory.Shape::getClass() [0 time(s)]

	---> creational.abstract_factory.Shape::wait(long) [0 time(s)]

	---> creational.abstract_factory.Shape::wait(long,int) [0 time(s)]

	---> creational.abstract_factory.Shape::wait() [0 time(s)]

	---> creational.abstract_factory.Shape::notifyAll() [0 time(s)]

	---> creational.abstract_factory.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

	---> creational.abstract_factory.Shape::getRobot() [0 time(s)]

	---> creational.abstract_factory.Shape::notify() [0 time(s)]

	---> creational.builder.Robot::buildLegs() [0 time(s)]

	---> creational.builder.Robot::buildArms() [0 time(s)]

	---> creational.builder.Robot::hashCode() [0 time(s)]

	---> creational.builder.Robot::buildHead() [0 time(s)]

	---> creational.builder.Robot::finalize() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::clone() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::getClass() [0 time(s)]

	---> creational.builder.Robot::wait(long) [0 time(s)]

	---> creational.builder.Robot::wait(long,int) [0 time(s)]

	---> creational.builder.Robot::wait() [0 time(s)]

	---> creational.builder.Robot::setLegs(java.lang.String) [0 time(s)]

	---> creational.builder.Robot::notifyAll() [0 time(s)]

	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.Robot::setHead(java.lang.String) [0 time(s)]

	---> creational.builder.Robot::registerNatives() [0 time(s)]

	---> creational.builder.Robot::getTorso() [0 time(s)]

	---> creational.builder.Robot::notify() [0 time(s)]

	---> creational.builder.Robot::setTorso(java.lang.String) [0 time(s)]

	---> creational.builder.Robot::hashCode() [0 time(s)]

	---> creational.builder.Robot::setArms(java.lang.String) [0 time(s)]

	---> creational.builder.Robot::getArms() [0 time(s)]

	---> creational.builder.Robot::getHead() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::finalize() [0 time(s)]

	---> creational.builder.Robot::clone() [0 time(s)]

	---> creational.builder.Robot::getLegs() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::getClass() [0 time(s)]

	---> creational.builder.Robot::wait(long) [0 time(s)]

	---> creational.builder.Robot::wait(long,int) [0 time(s)]

	---> creational.builder.Robot::wait() [0 time(s)]

	---> creational.builder.Robot::notifyAll() [0 time(s)]

	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.Robot::registerNatives() [0 time(s)]

	---> creational.builder.Robot::getRobot() [0 time(s)]

	---> creational.builder.Robot::notify() [0 time(s)]

	---> creational.builder.Robot::buildLegs() [0 time(s)]

	---> creational.builder.Robot::buildArms() [0 time(s)]

	---> creational.builder.Robot::hashCode() [0 time(s)]

	---> creational.builder.Robot::buildHead() [0 time(s)]

	---> creational.builder.Robot::finalize() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::clone() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.Robot::getClass() [0 time(s)]

	---> creational.builder.Robot::wait(long) [0 time(s)]

	---> creational.builder.Robot::wait(long,int) [0 time(s)]

	---> creational.builder.Robot::wait() [0 time(s)]

	---> creational.builder.Robot::notifyAll() [0 time(s)]

	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.Robot::registerNatives() [0 time(s)]

	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::notify() [0 time(s)]

	---> creational.builder.IRobotBuilder::hashCode() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::setRobotBuilder(creational.builder.IRobotBuilder) [0 time(s)]

	---> creational.builder.IRobotBuilder::finalize() [0 time(s)]

	---> creational.builder.IRobotBuilder::toString() [0 time(s)]

	---> creational.builder.IRobotBuilder::clone() [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.IRobotBuilder::getClass() [0 time(s)]

	---> creational.builder.IRobotBuilder::wait(long) [0 time(s)]

	---> creational.builder.IRobotBuilder::wait(long,int) [0 time(s)]

	---> creational.builder.IRobotBuilder::wait() [0 time(s)]

	---> creational.builder.IRobotBuilder::notifyAll() [0 time(s)]

	---> creational.builder.IRobotBuilder::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.IRobotBuilder::registerNatives() [0 time(s)]

	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::notify() [0 time(s)]

	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::hashCode() [0 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::finalize() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::clone() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.Robot::getClass() [0 time(s)]

	---> creational.builder.Robot::wait(long) [0 time(s)]

	---> creational.builder.Robot::wait(long,int) [0 time(s)]

	---> creational.builder.Robot::wait() [0 time(s)]

	---> creational.builder.Robot::notifyAll() [0 time(s)]

	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

	---> creational.builder.RobotEngineer::notify() [0 time(s)]

	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

	---> creational.builder.RobotEngineer::toString() [0 time(s)]

	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::getName() [0 time(s)]

	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

	---> creational.builder.RobotEngineer::wait() [0 time(s)]

	---> creational.builder.RobotEngineer::setName(java.lang.String) [0 time(s)]

	---> creational.builder.RobotEngineer::getAmtDamage() [0 time(s)]

	---> creational.builder.RobotEngineer::setAmtDamage(double) [0 time(s)]

	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

	---> creational.builder.RobotEngineer::notify() [0 time(s)]

	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

	---> creational.builder.RobotEngineer::toString() [0 time(s)]

	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::getName() [0 time(s)]

	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

	---> creational.builder.RobotEngineer::wait() [0 time(s)]

	---> creational.builder.RobotEngineer::setName(java.lang.String) [0 time(s)]

	---> creational.builder.RobotEngineer::getAmtDamage() [0 time(s)]

	---> creational.builder.RobotEngineer::setAmtDamage(double) [0 time(s)]

	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

	---> creational.builder.RobotEngineer::notify() [0 time(s)]

	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

	---> creational.builder.RobotEngineer::toString() [0 time(s)]

	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

	---> creational.builder.RobotEngineer::wait() [0 time(s)]

	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

	---> creational.builder.RobotEngineer::notify() [0 time(s)]

	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

	---> creational.builder.RobotEngineer::createEnemyShip(java.lang.String) [0 time(s)]

	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

	---> creational.builder.RobotEngineer::toString() [0 time(s)]

	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

	---> creational.builder.RobotEngineer::wait() [0 time(s)]

	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShipFactory::notify() [0 time(s)]

	---> creational.factory.EnemyShipFactory::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::finalize() [0 time(s)]

	---> creational.factory.EnemyShip::toString() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::getName() [0 time(s)]

	---> creational.factory.EnemyShip::getClass() [0 time(s)]

	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

	---> creational.factory.EnemyShip::wait() [0 time(s)]

	---> creational.factory.EnemyShip::setName(java.lang.String) [0 time(s)]

	---> creational.factory.EnemyShip::getAmtDamage() [0 time(s)]

	---> creational.factory.EnemyShip::setAmtDamage(double) [0 time(s)]

	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShip::notify() [0 time(s)]

	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

	---> creational.factory.EnemyShip::finalize() [0 time(s)]

	---> creational.factory.EnemyShip::toString() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::getClass() [0 time(s)]

	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

	---> creational.factory.EnemyShip::wait() [0 time(s)]

	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShipFactory::notify() [0 time(s)]

	---> creational.factory.EnemyShipFactory::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

	---> creational.factory.EnemyShip::finalize() [0 time(s)]

	---> creational.factory.EnemyShip::toString() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::getName() [0 time(s)]

	---> creational.factory.EnemyShip::getClass() [0 time(s)]

	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

	---> creational.factory.EnemyShip::wait() [0 time(s)]

	---> creational.factory.EnemyShip::setName(java.lang.String) [0 time(s)]

	---> creational.factory.EnemyShip::getAmtDamage() [0 time(s)]

	---> creational.factory.EnemyShip::setAmtDamage(double) [0 time(s)]

	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShip::notify() [0 time(s)]

	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

	---> creational.factory.EnemyShip::finalize() [0 time(s)]

	---> creational.factory.EnemyShip::toString() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::getClass() [0 time(s)]

	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

	---> creational.factory.EnemyShip::wait() [0 time(s)]

	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShip::getId() [0 time(s)]

	---> creational.factory.EnemyShip::setPosition(creational.prototype.Position) [0 time(s)]

	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShip::draw() [0 time(s)]

	---> creational.factory.EnemyShip::getPosition() [0 time(s)]

	---> creational.factory.EnemyShip::notify() [0 time(s)]

	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::getType() [0 time(s)]

	---> creational.factory.EnemyShip::setId(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::setX(double) [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::setY(double) [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::getX() [0 time(s)]

	---> creational.prototype.Shape::getY() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

	---> creational.prototype.Position::finalize() [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::getClass() [0 time(s)]

	---> creational.prototype.Position::wait(long) [0 time(s)]

	---> creational.prototype.Position::wait(long,int) [0 time(s)]

	---> creational.prototype.Position::wait() [0 time(s)]

	---> creational.prototype.Position::notifyAll() [0 time(s)]

	---> creational.prototype.Position::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Position::getId() [0 time(s)]

	---> creational.prototype.Position::setPosition(creational.prototype.Position) [0 time(s)]

	---> creational.prototype.Position::registerNatives() [0 time(s)]

	---> creational.prototype.Position::draw() [0 time(s)]

	---> creational.prototype.Position::getPosition() [0 time(s)]

	---> creational.prototype.Position::notify() [0 time(s)]

	---> creational.prototype.Position::hashCode() [0 time(s)]

	---> creational.prototype.Position::getType() [0 time(s)]

	---> creational.prototype.Position::setId(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::getId() [0 time(s)]

	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::draw() [0 time(s)]

	---> creational.prototype.Shape::getPosition() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::getType() [0 time(s)]

	---> creational.prototype.Shape::setId(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::getClass() [0 time(s)]

	---> creational.prototype.Rectangle::wait(long) [0 time(s)]

	---> creational.prototype.Rectangle::wait(long,int) [0 time(s)]

	---> creational.prototype.Rectangle::wait() [0 time(s)]

	---> creational.prototype.Rectangle::notifyAll() [0 time(s)]

	---> creational.prototype.Rectangle::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::getId() [0 time(s)]

	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::draw() [0 time(s)]

	---> creational.prototype.Shape::getPosition() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::getType() [0 time(s)]

	---> creational.prototype.Shape::setId(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

	---> creational.singleton.ExtendedSingleton2::registerNatives() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::notify() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::hashCode() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::finalize() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::toString() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::clone() [0 time(s)]

structural.adapter.EnemyAttacker:
	---> creational.singleton.ExtendedSingleton2::fireWeapon() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::driveForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::getClass() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait(long) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait(long,int) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::notifyAll() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::registerNatives() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::notify() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::hashCode() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::finalize() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::toString() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::clone() [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> creational.singleton.ExtendedSingleton2::getClass() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait(long) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait(long,int) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

	---> structural.adapter.EnemyRobot::registerNatives() [0 time(s)]

	---> structural.adapter.EnemyRobot::notify() [0 time(s)]

	---> structural.adapter.EnemyRobot::setRobot(structural.adapter.EnemyRobot) [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::hashCode() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

	---> structural.adapter.EnemyRobot::finalize() [0 time(s)]

	---> structural.adapter.EnemyRobot::toString() [0 time(s)]

	---> structural.adapter.EnemyRobot::clone() [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::getClass() [0 time(s)]

	---> structural.adapter.EnemyRobot::wait(long) [0 time(s)]

	---> structural.adapter.EnemyRobot::wait(long,int) [0 time(s)]

	---> structural.adapter.EnemyRobot::wait() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

	---> structural.adapter.EnemyRobot::registerNatives() [0 time(s)]

	---> structural.adapter.EnemyRobot::notify() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::hashCode() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

	---> structural.adapter.EnemyRobot::finalize() [0 time(s)]

	---> structural.adapter.EnemyRobot::toString() [0 time(s)]

	---> structural.adapter.EnemyRobot::clone() [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::getClass() [0 time(s)]

	---> structural.adapter.EnemyRobot::wait(long) [0 time(s)]

	---> structural.adapter.EnemyRobot::wait(long,int) [0 time(s)]

	---> structural.adapter.EnemyRobot::wait() [0 time(s)]

	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyAttacker::registerNatives() [0 time(s)]

	---> structural.adapter.EnemyAttacker::notify() [0 time(s)]

	---> structural.adapter.EnemyAttacker::hashCode() [0 time(s)]

	---> structural.adapter.EnemyAttacker::finalize() [0 time(s)]

	---> structural.adapter.EnemyAttacker::toString() [0 time(s)]

	---> structural.adapter.EnemyAttacker::clone() [0 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::getClass() [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait(long) [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait(long,int) [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait() [0 time(s)]

	---> structural.adapter.EnemyAttacker::notifyAll() [0 time(s)]

	---> structural.adapter.EnemyAttacker::equals(java.lang.Object) [0 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyAttacker::registerNatives() [0 time(s)]

	---> structural.adapter.EnemyAttacker::notify() [0 time(s)]

	---> structural.adapter.EnemyAttacker::hashCode() [0 time(s)]

	---> structural.adapter.EnemyAttacker::finalize() [0 time(s)]

	---> structural.adapter.EnemyAttacker::toString() [0 time(s)]

	---> structural.adapter.EnemyAttacker::clone() [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.adapter.EnemyAttacker::getClass() [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait(long) [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait(long,int) [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait() [0 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::getName() [0 time(s)]

	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::setChannel(int) [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::setVolume(int) [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::enable() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::getVolume() [0 time(s)]

	---> structural.bridge.Device::getChannel() [0 time(s)]

	---> structural.bridge.Device::disable() [0 time(s)]

	---> structural.bridge.Device::isEnabled() [0 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::getName() [0 time(s)]

	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::setChannel(int) [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::setVolume(int) [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::enable() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::getVolume() [0 time(s)]

	---> structural.bridge.Device::getChannel() [0 time(s)]

	---> structural.bridge.Device::disable() [0 time(s)]

	---> structural.bridge.Device::isEnabled() [0 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::getName() [0 time(s)]

	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::setChannel(int) [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::setVolume(int) [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::enable() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::getVolume() [0 time(s)]

	---> structural.bridge.Device::getChannel() [0 time(s)]

	---> structural.bridge.Device::disable() [0 time(s)]

	---> structural.bridge.Device::isEnabled() [0 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::finalize() [0 time(s)]

	---> structural.bridge.AdvancedRemote::toString() [0 time(s)]

	---> structural.bridge.AdvancedRemote::clone() [0 time(s)]

structural.composite.DiscJockey:
	---> structural.bridge.AdvancedRemote::getClass() [0 time(s)]

	---> structural.bridge.AdvancedRemote::wait(long) [0 time(s)]

	---> structural.bridge.AdvancedRemote::wait(long,int) [0 time(s)]

	---> structural.bridge.AdvancedRemote::wait() [0 time(s)]

	---> structural.bridge.AdvancedRemote::notifyAll() [0 time(s)]

	---> structural.bridge.AdvancedRemote::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.AdvancedRemote::registerNatives() [0 time(s)]

	---> structural.bridge.AdvancedRemote::notify() [0 time(s)]

	---> structural.bridge.AdvancedRemote::hashCode() [0 time(s)]

	---> structural.bridge.AdvancedRemote::getSongList() [0 time(s)]

	---> structural.composite.SongComponent::displaySongList() [0 time(s)]

	---> structural.composite.SongComponent::finalize() [0 time(s)]

	---> structural.composite.SongComponent::toString() [0 time(s)]

	---> structural.composite.SongComponent::clone() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

	---> structural.composite.SongComponent::wait(long) [0 time(s)]

	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

	---> structural.composite.SongComponent::wait() [0 time(s)]

	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::notifyAll() [0 time(s)]

	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.Song::registerNatives() [0 time(s)]

	---> structural.composite.Song::getSongName() [0 time(s)]

	---> structural.composite.Song::notify() [0 time(s)]

	---> structural.composite.Song::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.Song::hashCode() [0 time(s)]

	---> structural.composite.Song::getBandName() [0 time(s)]

	---> structural.composite.Song::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::finalize() [0 time(s)]

	---> structural.composite.SongComponent::toString() [0 time(s)]

	---> structural.composite.SongComponent::clone() [0 time(s)]

	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

	---> structural.composite.SongComponent::wait(long) [0 time(s)]

	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

	---> structural.composite.SongComponent::wait() [0 time(s)]

	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.SongComponent::registerNatives() [0 time(s)]

	---> structural.composite.SongComponent::getSongName() [0 time(s)]

	---> structural.composite.SongComponent::notify() [0 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::hashCode() [0 time(s)]

	---> structural.composite.SongComponent::getBandName() [0 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::finalize() [0 time(s)]

	---> structural.composite.SongComponent::toString() [0 time(s)]

	---> structural.composite.SongComponent::clone() [0 time(s)]

	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

	---> structural.composite.SongComponent::wait(long) [0 time(s)]

	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

	---> structural.composite.SongComponent::wait() [0 time(s)]

	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.SongComponent::registerNatives() [0 time(s)]

	---> structural.composite.SongComponent::getSongName() [0 time(s)]

	---> structural.composite.SongComponent::notify() [0 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getGroupName() [0 time(s)]

	---> structural.composite.SongComponent::hashCode() [0 time(s)]

	---> structural.composite.SongComponent::getBandName() [0 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::getGroupDescription() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::finalize() [0 time(s)]

	---> structural.composite.SongComponent::toString() [0 time(s)]

	---> structural.composite.SongComponent::clone() [0 time(s)]

	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

	---> structural.composite.SongComponent::wait(long) [0 time(s)]

	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

	---> structural.composite.SongComponent::wait() [0 time(s)]

	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

	---> structural.composite.DiscJockey::notify() [0 time(s)]

	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

	---> structural.composite.DiscJockey::finalize() [0 time(s)]

	---> structural.composite.DiscJockey::toString() [0 time(s)]

	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

	---> structural.composite.DiscJockey::wait() [0 time(s)]

	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

	---> structural.composite.DiscJockey::notify() [0 time(s)]

	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

	---> structural.composite.DiscJockey::finalize() [0 time(s)]

	---> structural.composite.DiscJockey::toString() [0 time(s)]

	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

	---> structural.composite.DiscJockey::wait() [0 time(s)]

	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

	---> structural.composite.DiscJockey::description() [0 time(s)]

	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

	---> structural.composite.DiscJockey::notify() [0 time(s)]

	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

	---> structural.composite.DiscJockey::price() [0 time(s)]

	---> structural.composite.DiscJockey::finalize() [0 time(s)]

	---> structural.composite.DiscJockey::toString() [0 time(s)]

	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

	---> structural.composite.DiscJockey::wait() [0 time(s)]

	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

	---> structural.composite.DiscJockey::description() [0 time(s)]

	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

	---> structural.composite.DiscJockey::notify() [0 time(s)]

	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

	---> structural.composite.DiscJockey::price() [0 time(s)]

	---> structural.composite.DiscJockey::finalize() [0 time(s)]

	---> structural.composite.DiscJockey::toString() [0 time(s)]

	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

	---> structural.composite.DiscJockey::wait() [0 time(s)]

	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.IBeverage:
	---> structural.decorator.Beverage::price() [0 time(s)]

	---> structural.decorator.Beverage::description() [0 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::setNumber(int) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::getNumber() [0 time(s)]

	---> structural.decorator.Beverage::setSecurityCode(int) [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::getBalance() [0 time(s)]

	---> structural.decorator.Beverage::getSecurityCode() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

	---> structural.decorator.Beverage::setBalance(double) [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.facade.BankAccount::canWithdraw(double) [0 time(s)]

	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [0 time(s)]

	---> structural.facade.BankAccount::notify() [0 time(s)]

	---> structural.facade.BankAccount::hashCode() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::finalize() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::toString() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::clone() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::getClass() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait(long) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::notify() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::hashCode() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::getSecurityCode() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::getAccountNumber() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::fetchBankAccount() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::finalize() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::toString() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::clone() [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountBalanceSystem::getClass() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait(long) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountNumberChecker::match(int) [0 time(s)]

	---> structural.facade.BankAccountNumberChecker::notify() [0 time(s)]

	---> structural.facade.BankAccountNumberChecker::hashCode() [0 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [0 time(s)]

	---> structural.facade.BankAccount::finalize() [0 time(s)]

	---> structural.facade.BankAccount::toString() [0 time(s)]

	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccount::getClass() [0 time(s)]

	---> structural.facade.BankAccount::wait(long) [0 time(s)]

	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccount::wait() [0 time(s)]

	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::notify() [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::hashCode() [0 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [0 time(s)]

	---> structural.facade.BankAccount::finalize() [0 time(s)]

	---> structural.facade.BankAccount::toString() [0 time(s)]

	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::getClass() [0 time(s)]

	---> structural.facade.BankAccount::wait(long) [0 time(s)]

	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccount::wait() [0 time(s)]

	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

	---> structural.facade.BankAccount::notify() [0 time(s)]

	---> structural.facade.BankAccount::hashCode() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::finalize() [0 time(s)]

	---> structural.facade.BankAccount::toString() [0 time(s)]

	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccount::getClass() [0 time(s)]

	---> structural.facade.BankAccount::wait(long) [0 time(s)]

	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccount::wait() [0 time(s)]

	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::getRadius() [0 time(s)]

	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

	---> structural.facade.BankAccountFacade::setRadius(int) [0 time(s)]

	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

	---> structural.facade.BankAccountFacade::setX(double) [0 time(s)]

	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountFacade::setY(double) [0 time(s)]

	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

	---> structural.facade.BankAccountFacade::getX() [0 time(s)]

	---> structural.facade.BankAccountFacade::getY() [0 time(s)]

	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Shape:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::registerNatives() [0 time(s)]

	---> structural.flyweight.Circle::notify() [0 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

	---> structural.flyweight.Circle::hashCode() [0 time(s)]

	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

	---> structural.flyweight.Circle::finalize() [0 time(s)]

	---> structural.flyweight.Circle::toString() [0 time(s)]

	---> structural.flyweight.Circle::clone() [0 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::getClass() [0 time(s)]

	---> structural.flyweight.Circle::wait(long) [0 time(s)]

	---> structural.flyweight.Circle::wait(long,int) [0 time(s)]

	---> structural.flyweight.Circle::wait() [0 time(s)]

	---> structural.flyweight.Circle::notifyAll() [0 time(s)]

	---> structural.flyweight.Circle::equals(java.lang.Object) [0 time(s)]

	---> structural.flyweight.Circle::registerNatives() [0 time(s)]

	---> structural.flyweight.Circle::notify() [0 time(s)]

	---> structural.flyweight.Circle::hashCode() [0 time(s)]

	---> structural.flyweight.Circle::finalize() [0 time(s)]

	---> structural.flyweight.Circle::toString() [0 time(s)]

	---> structural.flyweight.Circle::clone() [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::getClass() [0 time(s)]

	---> structural.proxy.Internet::wait(long) [0 time(s)]

	---> structural.proxy.Internet::wait(long,int) [0 time(s)]

	---> structural.proxy.Internet::wait() [0 time(s)]

	---> structural.proxy.Internet::notifyAll() [0 time(s)]

	---> structural.proxy.Internet::equals(java.lang.Object) [0 time(s)]

	---> structural.proxy.Internet::registerNatives() [0 time(s)]

	---> structural.proxy.Internet::notify() [0 time(s)]

	---> structural.proxy.Internet::hashCode() [0 time(s)]

	---> structural.proxy.Internet::finalize() [0 time(s)]

	---> structural.proxy.Internet::toString() [0 time(s)]

	---> structural.proxy.Internet::clone() [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::getClass() [0 time(s)]

	---> structural.proxy.Internet::wait(long) [0 time(s)]

	---> structural.proxy.Internet::wait(long,int) [0 time(s)]

	---> structural.proxy.Internet::wait() [0 time(s)]

	---> structural.proxy.Internet::notifyAll() [0 time(s)]

	---> structural.proxy.Internet::equals(java.lang.Object) [0 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]

	---> structural.proxy.Internet::registerNatives() [0 time(s)]

	---> structural.proxy.Internet::notify() [0 time(s)]

	---> structural.proxy.Internet::hashCode() [0 time(s)]

	---> structural.proxy.Internet::finalize() [0 time(s)]

	---> structural.proxy.Internet::toString() [0 time(s)]

	---> structural.proxy.Internet::clone() [0 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger::getClass()
	---> ::getClass() [0 time(s)]

wait(long)
	---> ::wait(long) [0 time(s)]

wait(long,int)
	---> ::wait(long,int) [0 time(s)]

wait()
	---> ::wait() [0 time(s)]

write(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

notifyAll()
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

notify()
	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

hashCode()
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

setNextLogger(behavioral.chain_of_responsibility.ILogger)
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

finalize()
	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

toString()
	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

clone()
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger::getClass()
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

wait(long)
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

wait()
	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

write(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

notifyAll()
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

notify()
	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

hashCode()
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

setNextLogger(behavioral.chain_of_responsibility.ILogger)
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

finalize()
	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

toString()
	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

clone()
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.FileLogger::getClass()
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

wait(long)
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

wait()
	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

write(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

notifyAll()
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

notify()
	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

hashCode()
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

setNextLogger(behavioral.chain_of_responsibility.ILogger)
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

getFilePath()
	---> behavioral.chain_of_responsibility.ILogger::getFilePath() [0 time(s)]

finalize()
	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

toString()
	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

clone()
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

setFilePath(java.lang.String)
	---> behavioral.chain_of_responsibility.ILogger::setFilePath(java.lang.String) [0 time(s)]

behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

setNextLogger(behavioral.chain_of_responsibility.ILogger)
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

behavioral.chain_of_responsibility.LogRequest::getClass()
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

wait(long)
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

wait()
	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

notifyAll()
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

getMessage()
	---> behavioral.chain_of_responsibility.ILogger::getMessage() [0 time(s)]

notify()
	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

setLevel(behavioral.chain_of_responsibility.LogRequestLevel)
	---> behavioral.chain_of_responsibility.ILogger::setLevel(behavioral.chain_of_responsibility.LogRequestLevel) [0 time(s)]

setMessage(java.lang.String)
	---> behavioral.chain_of_responsibility.ILogger::setMessage(java.lang.String) [0 time(s)]

getLevel()
	---> behavioral.chain_of_responsibility.ILogger::getLevel() [0 time(s)]

hashCode()
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

finalize()
	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

toString()
	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

clone()
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.LogRequestLevel::value()
	---> behavioral.chain_of_responsibility.ILogger::value() [0 time(s)]

behavioral.chain_of_responsibility.Logger::getClass()
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

wait(long)
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

wait()
	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

write(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

notifyAll()
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

notify()
	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

hashCode()
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

setNextLogger(behavioral.chain_of_responsibility.ILogger)
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

finalize()
	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

toString()
	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

clone()
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel::clone()
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

compareTo(java.lang.Enum)
	---> behavioral.chain_of_responsibility.ILogger::compareTo(java.lang.Enum) [0 time(s)]

describeConstable()
	---> behavioral.chain_of_responsibility.ILogger::describeConstable() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

finalize()
	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

getDeclaringClass()
	---> behavioral.chain_of_responsibility.ILogger::getDeclaringClass() [0 time(s)]

hashCode()
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

name()
	---> behavioral.chain_of_responsibility.ILogger::name() [0 time(s)]

ordinal()
	---> behavioral.chain_of_responsibility.ILogger::ordinal() [0 time(s)]

readObject(java.io.ObjectInputStream)
	---> behavioral.chain_of_responsibility.ILogger::readObject(java.io.ObjectInputStream) [0 time(s)]

readObjectNoData()
	---> behavioral.chain_of_responsibility.ILogger::readObjectNoData() [0 time(s)]

toString()
	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

value()
	---> behavioral.chain_of_responsibility.ILogger::value() [0 time(s)]

valueOf(java.lang.Class,java.lang.String)
	---> behavioral.chain_of_responsibility.ILogger::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

valueOf(java.lang.String)
	---> behavioral.chain_of_responsibility.ILogger::valueOf(java.lang.String) [0 time(s)]

values()
	---> behavioral.chain_of_responsibility.ILogger::values() [0 time(s)]

behavioral.chain_of_responsibility.Test::getClass()
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

wait(long)
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

wait()
	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

notifyAll()
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

registerNatives()
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

notify()
	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

hashCode()
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

getChainOfLoggers()
	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

finalize()
	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

toString()
	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

clone()
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.command.Command::getName()
	---> behavioral.chain_of_responsibility.ILogger::getName() [0 time(s)]

undo()
	---> behavioral.chain_of_responsibility.ILogger::undo() [0 time(s)]

execute()
	---> behavioral.chain_of_responsibility.ILogger::execute() [0 time(s)]

behavioral.command.CommandManager::getClass()
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

wait(long)
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

wait()
	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

getRegistryKey(java.lang.Class)
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

history()
	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

redo()
	---> behavioral.command.Command::redo() [1 time(s)]

notify()
	---> behavioral.command.Command::notify() [0 time(s)]

execute(behavioral.command.Command)
	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

hashCode()
	---> behavioral.command.Command::hashCode() [0 time(s)]

undo()
	---> behavioral.command.Command::undo() [1 time(s)]

finalize()
	---> behavioral.command.Command::finalize() [0 time(s)]

toString()
	---> behavioral.command.Command::toString() [0 time(s)]

clone()
	---> behavioral.command.Command::clone() [0 time(s)]

getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

behavioral.command.SwitchChannelCommand::getName()
	---> behavioral.command.TV::getName() [0 time(s)]

getClass()
	---> behavioral.command.TV::getClass() [0 time(s)]

wait(long)
	---> behavioral.command.TV::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.command.TV::wait(long,int) [0 time(s)]

wait()
	---> behavioral.command.TV::wait() [0 time(s)]

notifyAll()
	---> behavioral.command.TV::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.command.TV::registerNatives() [0 time(s)]

notify()
	---> behavioral.command.TV::notify() [0 time(s)]

execute()
	---> behavioral.command.TV::execute() [1 time(s)]

hashCode()
	---> behavioral.command.TV::hashCode() [0 time(s)]

undo()
	---> behavioral.command.TV::undo() [2 time(s)]

finalize()
	---> behavioral.command.TV::finalize() [0 time(s)]

toString()
	---> behavioral.command.TV::toString() [0 time(s)]

clone()
	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.SwitchOffCommand::getName()
	---> behavioral.command.TV::getName() [1 time(s)]

getClass()
	---> behavioral.command.TV::getClass() [0 time(s)]

wait(long)
	---> behavioral.command.TV::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.command.TV::wait(long,int) [0 time(s)]

wait()
	---> behavioral.command.TV::wait() [0 time(s)]

notifyAll()
	---> behavioral.command.TV::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.command.TV::registerNatives() [0 time(s)]

notify()
	---> behavioral.command.TV::notify() [0 time(s)]

execute()
	---> behavioral.command.TV::execute() [1 time(s)]

hashCode()
	---> behavioral.command.TV::hashCode() [0 time(s)]

undo()
	---> behavioral.command.TV::undo() [1 time(s)]

finalize()
	---> behavioral.command.TV::finalize() [0 time(s)]

toString()
	---> behavioral.command.TV::toString() [0 time(s)]

clone()
	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.SwitchOnCommand::getName()
	---> behavioral.command.TV::getName() [1 time(s)]

getClass()
	---> behavioral.command.TV::getClass() [0 time(s)]

wait(long)
	---> behavioral.command.TV::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.command.TV::wait(long,int) [0 time(s)]

wait()
	---> behavioral.command.TV::wait() [0 time(s)]

notifyAll()
	---> behavioral.command.TV::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.command.TV::registerNatives() [0 time(s)]

notify()
	---> behavioral.command.TV::notify() [0 time(s)]

execute()
	---> behavioral.command.TV::execute() [1 time(s)]

hashCode()
	---> behavioral.command.TV::hashCode() [0 time(s)]

undo()
	---> behavioral.command.TV::undo() [1 time(s)]

finalize()
	---> behavioral.command.TV::finalize() [0 time(s)]

toString()
	---> behavioral.command.TV::toString() [0 time(s)]

clone()
	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.TV::getClass()
	---> behavioral.command.TV::getClass() [0 time(s)]

wait(long)
	---> behavioral.command.TV::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.command.TV::wait(long,int) [0 time(s)]

wait()
	---> behavioral.command.TV::wait() [0 time(s)]

notifyAll()
	---> behavioral.command.TV::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

switchChannel(int)
	---> behavioral.command.TV::switchChannel(int) [0 time(s)]

registerNatives()
	---> behavioral.command.TV::registerNatives() [0 time(s)]

notify()
	---> behavioral.command.TV::notify() [0 time(s)]

switchOff()
	---> behavioral.command.TV::switchOff() [0 time(s)]

hashCode()
	---> behavioral.command.TV::hashCode() [0 time(s)]

getChannel()
	---> behavioral.command.TV::getChannel() [0 time(s)]

isOn()
	---> behavioral.command.TV::isOn() [0 time(s)]

finalize()
	---> behavioral.command.TV::finalize() [0 time(s)]

toString()
	---> behavioral.command.TV::toString() [0 time(s)]

clone()
	---> behavioral.command.TV::clone() [0 time(s)]

switchOn()
	---> behavioral.command.TV::switchOn() [0 time(s)]

behavioral.command.Test::getClass()
	---> behavioral.command.TV::getClass() [0 time(s)]

wait(long)
	---> behavioral.command.TV::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.command.TV::wait(long,int) [0 time(s)]

wait()
	---> behavioral.command.TV::wait() [0 time(s)]

notifyAll()
	---> behavioral.command.TV::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

registerNatives()
	---> behavioral.command.CommandManager::registerNatives() [0 time(s)]

notify()
	---> behavioral.command.CommandManager::notify() [0 time(s)]

hashCode()
	---> behavioral.command.CommandManager::hashCode() [0 time(s)]

finalize()
	---> behavioral.command.CommandManager::finalize() [0 time(s)]

toString()
	---> behavioral.command.CommandManager::toString() [0 time(s)]

clone()
	---> behavioral.command.CommandManager::clone() [0 time(s)]

behavioral.interpreter.AndExpression::getClass()
	---> behavioral.command.CommandManager::getClass() [0 time(s)]

wait(long)
	---> behavioral.command.CommandManager::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.command.CommandManager::wait(long,int) [0 time(s)]

wait()
	---> behavioral.command.CommandManager::wait() [0 time(s)]

notifyAll()
	---> behavioral.command.CommandManager::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.command.CommandManager::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.command.CommandManager::registerNatives() [0 time(s)]

notify()
	---> behavioral.command.CommandManager::notify() [0 time(s)]

hashCode()
	---> behavioral.command.CommandManager::hashCode() [0 time(s)]

interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

finalize()
	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

toString()
	---> behavioral.interpreter.Expression::toString() [0 time(s)]

clone()
	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.BinaryExpression::getClass()
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

wait(long)
	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

wait()
	---> behavioral.interpreter.Expression::wait() [0 time(s)]

notifyAll()
	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

notify()
	---> behavioral.interpreter.Expression::notify() [0 time(s)]

hashCode()
	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

finalize()
	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

toString()
	---> behavioral.interpreter.Expression::toString() [0 time(s)]

clone()
	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.Expression::interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.OrExpression::getClass()
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

wait(long)
	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

wait()
	---> behavioral.interpreter.Expression::wait() [0 time(s)]

notifyAll()
	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

notify()
	---> behavioral.interpreter.Expression::notify() [0 time(s)]

hashCode()
	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

finalize()
	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

toString()
	---> behavioral.interpreter.Expression::toString() [0 time(s)]

clone()
	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.TerminalExpression::getClass()
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

wait(long)
	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

wait()
	---> behavioral.interpreter.Expression::wait() [0 time(s)]

notifyAll()
	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

notify()
	---> behavioral.interpreter.Expression::notify() [0 time(s)]

hashCode()
	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

finalize()
	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

toString()
	---> behavioral.interpreter.Expression::toString() [0 time(s)]

clone()
	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.Test::getClass()
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

wait(long)
	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

wait()
	---> behavioral.interpreter.Expression::wait() [0 time(s)]

notifyAll()
	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

getIsFemaleExpression()
	---> behavioral.interpreter.Expression::getIsFemaleExpression() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

registerNatives()
	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

notify()
	---> behavioral.interpreter.Expression::notify() [0 time(s)]

hashCode()
	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

getIsMarriedWomanExpression()
	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

finalize()
	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

toString()
	---> behavioral.interpreter.Expression::toString() [0 time(s)]

clone()
	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.iterator.DiscJockey::getClass()
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

wait(long)
	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

wait()
	---> behavioral.interpreter.Expression::wait() [0 time(s)]

displaySongs()
	---> structural.composite.Song::displaySongs() [0 time(s)]

notifyAll()
	---> structural.composite.Song::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.composite.Song::registerNatives() [0 time(s)]

notify()
	---> structural.composite.Song::notify() [0 time(s)]

hashCode()
	---> structural.composite.Song::hashCode() [0 time(s)]

finalize()
	---> structural.composite.Song::finalize() [0 time(s)]

toString()
	---> structural.composite.Song::toString() [0 time(s)]

clone()
	---> structural.composite.Song::clone() [0 time(s)]

behavioral.iterator.Song::getClass()
	---> structural.composite.Song::getClass() [0 time(s)]

wait(long)
	---> structural.composite.Song::wait(long) [0 time(s)]

wait(long,int)
	---> structural.composite.Song::wait(long,int) [0 time(s)]

wait()
	---> structural.composite.Song::wait() [0 time(s)]

notifyAll()
	---> structural.composite.Song::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.composite.Song::registerNatives() [0 time(s)]

getSongName()
	---> structural.composite.Song::getSongName() [0 time(s)]

notify()
	---> structural.composite.Song::notify() [0 time(s)]

hashCode()
	---> structural.composite.Song::hashCode() [0 time(s)]

getBandName()
	---> structural.composite.Song::getBandName() [0 time(s)]

toString()
	---> structural.composite.Song::toString() [0 time(s)]

finalize()
	---> structural.composite.Song::finalize() [0 time(s)]

clone()
	---> structural.composite.Song::clone() [0 time(s)]

getYearReleased()
	---> structural.composite.Song::getYearReleased() [0 time(s)]

behavioral.iterator.SongAggregate::iterator()
	---> structural.composite.Song::iterator() [0 time(s)]

spliterator()
	---> structural.composite.Song::spliterator() [0 time(s)]

forEach(java.util.function.Consumer)
	---> structural.composite.Song::forEach(java.util.function.Consumer) [0 time(s)]

addSong(java.lang.String,java.lang.String,int)
	---> structural.composite.Song::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongArray::getClass()
	---> structural.composite.Song::getClass() [0 time(s)]

wait(long)
	---> structural.composite.Song::wait(long) [0 time(s)]

wait(long,int)
	---> structural.composite.Song::wait(long,int) [0 time(s)]

wait()
	---> structural.composite.Song::wait() [0 time(s)]

spliterator()
	---> structural.composite.Song::spliterator() [0 time(s)]

notifyAll()
	---> structural.composite.Song::notifyAll() [0 time(s)]

forEach(java.util.function.Consumer)
	---> structural.composite.Song::forEach(java.util.function.Consumer) [0 time(s)]

equals(java.lang.Object)
	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

length()
	---> structural.composite.Song::length() [0 time(s)]

registerNatives()
	---> structural.composite.Song::registerNatives() [0 time(s)]

notify()
	---> structural.composite.Song::notify() [0 time(s)]

hashCode()
	---> structural.composite.Song::hashCode() [0 time(s)]

iterator()
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

getFilledArray()
	---> behavioral.iterator.SongArray::getFilledArray() [0 time(s)]

finalize()
	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

toString()
	---> behavioral.iterator.SongArray::toString() [0 time(s)]

clone()
	---> behavioral.iterator.SongArray::clone() [0 time(s)]

addSong(java.lang.String,java.lang.String,int)
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongHashtable::getClass()
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

wait(long)
	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

wait()
	---> behavioral.iterator.SongArray::wait() [0 time(s)]

spliterator()
	---> behavioral.iterator.SongArray::spliterator() [0 time(s)]

notifyAll()
	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

forEach(java.util.function.Consumer)
	---> behavioral.iterator.SongArray::forEach(java.util.function.Consumer) [0 time(s)]

equals(java.lang.Object)
	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.iterator.SongArray::registerNatives() [0 time(s)]

notify()
	---> behavioral.iterator.SongArray::notify() [0 time(s)]

hashCode()
	---> behavioral.iterator.SongArray::hashCode() [0 time(s)]

iterator()
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

finalize()
	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

toString()
	---> behavioral.iterator.SongArray::toString() [0 time(s)]

clone()
	---> behavioral.iterator.SongArray::clone() [0 time(s)]

addSong(java.lang.String,java.lang.String,int)
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList::getClass()
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

wait(long)
	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

wait()
	---> behavioral.iterator.SongArray::wait() [0 time(s)]

spliterator()
	---> behavioral.iterator.SongArray::spliterator() [0 time(s)]

notifyAll()
	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

forEach(java.util.function.Consumer)
	---> behavioral.iterator.SongArray::forEach(java.util.function.Consumer) [0 time(s)]

equals(java.lang.Object)
	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.iterator.SongArray::registerNatives() [0 time(s)]

notify()
	---> behavioral.iterator.SongArray::notify() [0 time(s)]

hashCode()
	---> behavioral.iterator.SongArray::hashCode() [0 time(s)]

iterator()
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

finalize()
	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

toString()
	---> behavioral.iterator.SongArray::toString() [0 time(s)]

clone()
	---> behavioral.iterator.SongArray::clone() [0 time(s)]

addSong(java.lang.String,java.lang.String,int)
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test::getClass()
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

wait(long)
	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

wait()
	---> behavioral.iterator.SongArray::wait() [0 time(s)]

notifyAll()
	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

registerNatives()
	---> behavioral.iterator.DiscJockey::registerNatives() [0 time(s)]

notify()
	---> behavioral.iterator.DiscJockey::notify() [0 time(s)]

hashCode()
	---> behavioral.iterator.DiscJockey::hashCode() [0 time(s)]

finalize()
	---> behavioral.iterator.DiscJockey::finalize() [0 time(s)]

toString()
	---> behavioral.iterator.DiscJockey::toString() [0 time(s)]

clone()
	---> behavioral.iterator.DiscJockey::clone() [0 time(s)]

behavioral.mediator.ChatRoom::getClass()
	---> behavioral.iterator.DiscJockey::getClass() [0 time(s)]

wait(long)
	---> behavioral.iterator.DiscJockey::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.iterator.DiscJockey::wait(long,int) [0 time(s)]

wait()
	---> behavioral.iterator.DiscJockey::wait() [0 time(s)]

notifyAll()
	---> behavioral.iterator.DiscJockey::notifyAll() [0 time(s)]

addUser(behavioral.mediator.User)
	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [0 time(s)]

equals(java.lang.Object)
	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.mediator.User::registerNatives() [0 time(s)]

notify()
	---> behavioral.mediator.User::notify() [0 time(s)]

hashCode()
	---> behavioral.mediator.User::hashCode() [0 time(s)]

sendMessage(java.lang.String,java.lang.String)
	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

finalize()
	---> behavioral.mediator.User::finalize() [0 time(s)]

toString()
	---> behavioral.mediator.User::toString() [0 time(s)]

clone()
	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.mediator.ChatUser::getName()
	---> behavioral.mediator.User::getName() [0 time(s)]

getClass()
	---> behavioral.mediator.User::getClass() [0 time(s)]

wait(long)
	---> behavioral.mediator.User::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

wait()
	---> behavioral.mediator.User::wait() [0 time(s)]

receive(java.lang.String)
	---> behavioral.mediator.ChatUser::receive(java.lang.String) [0 time(s)]

notifyAll()
	---> behavioral.mediator.ChatUser::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.mediator.ChatUser::equals(java.lang.Object) [0 time(s)]

getId()
	---> behavioral.mediator.ChatUser::getId() [0 time(s)]

registerNatives()
	---> behavioral.mediator.ChatUser::registerNatives() [0 time(s)]

notify()
	---> behavioral.mediator.ChatUser::notify() [0 time(s)]

hashCode()
	---> behavioral.mediator.ChatUser::hashCode() [0 time(s)]

getRoom()
	---> behavioral.mediator.ChatUser::getRoom() [0 time(s)]

finalize()
	---> behavioral.mediator.ChatUser::finalize() [0 time(s)]

toString()
	---> behavioral.mediator.ChatUser::toString() [0 time(s)]

clone()
	---> behavioral.mediator.ChatUser::clone() [0 time(s)]

send(java.lang.String,java.lang.String)
	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

behavioral.mediator.IChatRoom::sendMessage(java.lang.String,java.lang.String)
	---> behavioral.mediator.ChatUser::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

addUser(behavioral.mediator.User)
	---> behavioral.mediator.ChatUser::addUser(behavioral.mediator.User) [0 time(s)]

behavioral.mediator.Test::getClass()
	---> behavioral.mediator.ChatUser::getClass() [0 time(s)]

wait(long)
	---> behavioral.mediator.ChatUser::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.mediator.ChatUser::wait(long,int) [0 time(s)]

wait()
	---> behavioral.mediator.ChatUser::wait() [0 time(s)]

notifyAll()
	---> behavioral.mediator.ChatUser::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.mediator.ChatUser::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

registerNatives()
	---> behavioral.mediator.User::registerNatives() [0 time(s)]

notify()
	---> behavioral.mediator.User::notify() [0 time(s)]

hashCode()
	---> behavioral.mediator.User::hashCode() [0 time(s)]

finalize()
	---> behavioral.mediator.User::finalize() [0 time(s)]

toString()
	---> behavioral.mediator.User::toString() [0 time(s)]

clone()
	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.mediator.User::getName()
	---> behavioral.mediator.User::getName() [0 time(s)]

getClass()
	---> behavioral.mediator.User::getClass() [0 time(s)]

wait(long)
	---> behavioral.mediator.User::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

wait()
	---> behavioral.mediator.User::wait() [0 time(s)]

receive(java.lang.String)
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

notifyAll()
	---> behavioral.mediator.User::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

getId()
	---> behavioral.mediator.User::getId() [0 time(s)]

registerNatives()
	---> behavioral.mediator.User::registerNatives() [0 time(s)]

notify()
	---> behavioral.mediator.User::notify() [0 time(s)]

hashCode()
	---> behavioral.mediator.User::hashCode() [0 time(s)]

getRoom()
	---> behavioral.mediator.User::getRoom() [0 time(s)]

finalize()
	---> behavioral.mediator.User::finalize() [0 time(s)]

toString()
	---> behavioral.mediator.User::toString() [0 time(s)]

clone()
	---> behavioral.mediator.User::clone() [0 time(s)]

send(java.lang.String,java.lang.String)
	---> behavioral.mediator.User::send(java.lang.String,java.lang.String) [0 time(s)]

behavioral.memento.CareTaker::getClass()
	---> behavioral.mediator.User::getClass() [0 time(s)]

wait(long)
	---> behavioral.mediator.User::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

wait()
	---> behavioral.mediator.User::wait() [0 time(s)]

notifyAll()
	---> behavioral.mediator.User::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.mediator.User::registerNatives() [0 time(s)]

notify()
	---> behavioral.mediator.User::notify() [0 time(s)]

hashCode()
	---> behavioral.mediator.User::hashCode() [0 time(s)]

addMemento(behavioral.memento.Memento)
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

get(int)
	---> behavioral.mediator.User::get(int) [0 time(s)]

finalize()
	---> behavioral.mediator.User::finalize() [0 time(s)]

toString()
	---> behavioral.mediator.User::toString() [0 time(s)]

clone()
	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.memento.Memento::getClass()
	---> behavioral.mediator.User::getClass() [0 time(s)]

wait(long)
	---> behavioral.mediator.User::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

wait()
	---> behavioral.mediator.User::wait() [0 time(s)]

notifyAll()
	---> behavioral.mediator.User::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.mediator.User::registerNatives() [0 time(s)]

notify()
	---> behavioral.mediator.User::notify() [0 time(s)]

hashCode()
	---> behavioral.mediator.User::hashCode() [0 time(s)]

getState()
	---> behavioral.mediator.User::getState() [0 time(s)]

finalize()
	---> behavioral.mediator.User::finalize() [0 time(s)]

toString()
	---> behavioral.mediator.User::toString() [0 time(s)]

clone()
	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.memento.Originator::getClass()
	---> behavioral.mediator.User::getClass() [0 time(s)]

wait(long)
	---> behavioral.mediator.User::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

wait()
	---> behavioral.mediator.User::wait() [0 time(s)]

restoreState(behavioral.memento.Memento)
	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

setState(java.lang.String)
	---> behavioral.memento.Memento::setState(java.lang.String) [0 time(s)]

notifyAll()
	---> behavioral.memento.Memento::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.memento.Memento::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.memento.Memento::registerNatives() [0 time(s)]

notify()
	---> behavioral.memento.Memento::notify() [0 time(s)]

hashCode()
	---> behavioral.memento.Memento::hashCode() [0 time(s)]

getState()
	---> behavioral.memento.Memento::getState() [0 time(s)]

externalizeState()
	---> behavioral.memento.Memento::externalizeState() [0 time(s)]

finalize()
	---> behavioral.memento.Memento::finalize() [0 time(s)]

toString()
	---> behavioral.memento.Memento::toString() [0 time(s)]

clone()
	---> behavioral.memento.Memento::clone() [0 time(s)]

behavioral.memento.Test::getClass()
	---> behavioral.memento.Memento::getClass() [0 time(s)]

wait(long)
	---> behavioral.memento.Memento::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.memento.Memento::wait(long,int) [0 time(s)]

wait()
	---> behavioral.memento.Memento::wait() [0 time(s)]

notifyAll()
	---> behavioral.memento.Memento::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.memento.Memento::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

registerNatives()
	---> behavioral.memento.Originator::registerNatives() [0 time(s)]

notify()
	---> behavioral.memento.Originator::notify() [0 time(s)]

hashCode()
	---> behavioral.memento.Originator::hashCode() [0 time(s)]

finalize()
	---> behavioral.memento.Originator::finalize() [0 time(s)]

toString()
	---> behavioral.memento.Originator::toString() [0 time(s)]

clone()
	---> behavioral.memento.Originator::clone() [0 time(s)]

behavioral.observer.Observer::update()
	---> behavioral.memento.Originator::update() [0 time(s)]

behavioral.observer.StockGrabber::getClass()
	---> behavioral.memento.Originator::getClass() [0 time(s)]

wait(long)
	---> behavioral.memento.Originator::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.memento.Originator::wait(long,int) [0 time(s)]

wait()
	---> behavioral.memento.Originator::wait() [0 time(s)]

setGoogleStock(double)
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [0 time(s)]

notifyObserver()
	---> behavioral.observer.Observer::notifyObserver() [0 time(s)]

notifyAll()
	---> behavioral.observer.Observer::notifyAll() [0 time(s)]

getIBMStock()
	---> behavioral.observer.Observer::getIBMStock() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.observer.Observer::equals(java.lang.Object) [0 time(s)]

unregister(behavioral.observer.Observer)
	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

registerNatives()
	---> behavioral.observer.Observer::registerNatives() [0 time(s)]

notify()
	---> behavioral.observer.Observer::notify() [0 time(s)]

setAppleStock(double)
	---> behavioral.observer.StockGrabber::setAppleStock(double) [0 time(s)]

getGoogleStock()
	---> behavioral.observer.StockGrabber::getGoogleStock() [0 time(s)]

hashCode()
	---> behavioral.observer.StockGrabber::hashCode() [0 time(s)]

setIBMStock(double)
	---> behavioral.observer.StockGrabber::setIBMStock(double) [0 time(s)]

getAppleStock()
	---> behavioral.observer.StockGrabber::getAppleStock() [0 time(s)]

register(behavioral.observer.Observer)
	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

finalize()
	---> behavioral.observer.StockGrabber::finalize() [0 time(s)]

toString()
	---> behavioral.observer.StockGrabber::toString() [0 time(s)]

clone()
	---> behavioral.observer.StockGrabber::clone() [0 time(s)]

behavioral.observer.StockObserver::getClass()
	---> behavioral.observer.StockGrabber::getClass() [0 time(s)]

wait(long)
	---> behavioral.observer.StockGrabber::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.observer.StockGrabber::wait(long,int) [0 time(s)]

wait()
	---> behavioral.observer.StockGrabber::wait() [0 time(s)]

notifyAll()
	---> behavioral.observer.StockGrabber::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.observer.StockGrabber::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.observer.StockGrabber::registerNatives() [0 time(s)]

update()
	---> behavioral.observer.StockObserver::update() [3 time(s)]

displayPrices()
	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

notify()
	---> behavioral.observer.StockObserver::notify() [0 time(s)]

hashCode()
	---> behavioral.observer.StockObserver::hashCode() [0 time(s)]

finalize()
	---> behavioral.observer.StockObserver::finalize() [0 time(s)]

toString()
	---> behavioral.observer.StockObserver::toString() [0 time(s)]

clone()
	---> behavioral.observer.StockObserver::clone() [0 time(s)]

behavioral.observer.Subject::notifyObserver()
	---> behavioral.observer.StockObserver::notifyObserver() [0 time(s)]

register(behavioral.observer.Observer)
	---> behavioral.observer.StockObserver::register(behavioral.observer.Observer) [0 time(s)]

unregister(behavioral.observer.Observer)
	---> behavioral.observer.StockObserver::unregister(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.Test::getClass()
	---> behavioral.observer.StockObserver::getClass() [0 time(s)]

wait(long)
	---> behavioral.observer.StockObserver::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.observer.StockObserver::wait(long,int) [0 time(s)]

wait()
	---> behavioral.observer.StockObserver::wait() [0 time(s)]

notifyAll()
	---> behavioral.observer.StockObserver::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.observer.StockObserver::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

registerNatives()
	---> behavioral.observer.StockGrabber::registerNatives() [0 time(s)]

notify()
	---> behavioral.observer.StockGrabber::notify() [0 time(s)]

hashCode()
	---> behavioral.observer.StockGrabber::hashCode() [0 time(s)]

finalize()
	---> behavioral.observer.StockGrabber::finalize() [0 time(s)]

toString()
	---> behavioral.observer.StockGrabber::toString() [0 time(s)]

clone()
	---> behavioral.observer.StockGrabber::clone() [0 time(s)]

behavioral.state.ATMMachine::getClass()
	---> behavioral.observer.StockGrabber::getClass() [0 time(s)]

getCashInMachine()
	---> behavioral.observer.StockGrabber::getCashInMachine() [0 time(s)]

wait(long)
	---> behavioral.observer.StockGrabber::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.observer.StockGrabber::wait(long,int) [0 time(s)]

wait()
	---> behavioral.observer.StockGrabber::wait() [0 time(s)]

insertCard()
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

ejectCard()
	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

requestCash(int)
	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

notifyAll()
	---> behavioral.state.ATMState::notifyAll() [0 time(s)]

setATMState(behavioral.state.ATMState)
	---> behavioral.state.ATMState::setATMState(behavioral.state.ATMState) [0 time(s)]

insertPin(int)
	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

equals(java.lang.Object)
	---> behavioral.state.ATMState::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.state.ATMState::registerNatives() [0 time(s)]

getATMState()
	---> behavioral.state.ATMState::getATMState() [0 time(s)]

getNoCardState()
	---> behavioral.state.ATMState::getNoCardState() [0 time(s)]

notify()
	---> behavioral.state.ATMState::notify() [0 time(s)]

getHasCardState()
	---> behavioral.state.ATMState::getHasCardState() [0 time(s)]

hashCode()
	---> behavioral.state.ATMState::hashCode() [0 time(s)]

getNoCashState()
	---> behavioral.state.ATMState::getNoCashState() [0 time(s)]

getCorrectPinState()
	---> behavioral.state.ATMState::getCorrectPinState() [0 time(s)]

finalize()
	---> behavioral.state.ATMState::finalize() [0 time(s)]

toString()
	---> behavioral.state.ATMState::toString() [0 time(s)]

clone()
	---> behavioral.state.ATMState::clone() [0 time(s)]

setCashInMachine(int)
	---> behavioral.state.ATMState::setCashInMachine(int) [0 time(s)]

behavioral.state.ATMState::getClass()
	---> behavioral.state.ATMState::getClass() [0 time(s)]

wait(long)
	---> behavioral.state.ATMState::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.state.ATMState::wait(long,int) [0 time(s)]

wait()
	---> behavioral.state.ATMState::wait() [0 time(s)]

insertCard()
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

ejectCard()
	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

requestCash(int)
	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

notifyAll()
	---> behavioral.state.ATMState::notifyAll() [0 time(s)]

insertPin(int)
	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

equals(java.lang.Object)
	---> behavioral.state.ATMState::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.state.ATMState::registerNatives() [0 time(s)]

notify()
	---> behavioral.state.ATMState::notify() [0 time(s)]

hashCode()
	---> behavioral.state.ATMState::hashCode() [0 time(s)]

finalize()
	---> behavioral.state.ATMState::finalize() [0 time(s)]

toString()
	---> behavioral.state.ATMState::toString() [0 time(s)]

clone()
	---> behavioral.state.ATMState::clone() [0 time(s)]

behavioral.state.CorrectPin::getClass()
	---> behavioral.state.ATMState::getClass() [0 time(s)]

wait(long)
	---> behavioral.state.ATMState::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.state.ATMState::wait(long,int) [0 time(s)]

wait()
	---> behavioral.state.ATMState::wait() [0 time(s)]

insertCard()
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

ejectCard()
	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

requestCash(int)
	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

notifyAll()
	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

insertPin(int)
	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

equals(java.lang.Object)
	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

notify()
	---> behavioral.state.ATMMachine::notify() [0 time(s)]

hashCode()
	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

finalize()
	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

toString()
	---> behavioral.state.ATMMachine::toString() [0 time(s)]

clone()
	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.state.HasCard::getClass()
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

wait(long)
	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

wait()
	---> behavioral.state.ATMMachine::wait() [0 time(s)]

insertCard()
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

ejectCard()
	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

requestCash(int)
	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

notifyAll()
	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

insertPin(int)
	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

equals(java.lang.Object)
	---> behavioral.state.HasCard::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.state.HasCard::registerNatives() [0 time(s)]

notify()
	---> behavioral.state.HasCard::notify() [0 time(s)]

hashCode()
	---> behavioral.state.HasCard::hashCode() [0 time(s)]

finalize()
	---> behavioral.state.HasCard::finalize() [0 time(s)]

toString()
	---> behavioral.state.HasCard::toString() [0 time(s)]

clone()
	---> behavioral.state.HasCard::clone() [0 time(s)]

behavioral.state.IATMState::insertCard()
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

ejectCard()
	---> behavioral.state.HasCard::ejectCard() [0 time(s)]

requestCash(int)
	---> behavioral.state.HasCard::requestCash(int) [0 time(s)]

insertPin(int)
	---> behavioral.state.HasCard::insertPin(int) [0 time(s)]

behavioral.state.NoCard::getClass()
	---> behavioral.state.HasCard::getClass() [0 time(s)]

wait(long)
	---> behavioral.state.HasCard::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.state.HasCard::wait(long,int) [0 time(s)]

wait()
	---> behavioral.state.HasCard::wait() [0 time(s)]

insertCard()
	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

ejectCard()
	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

requestCash(int)
	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

notifyAll()
	---> behavioral.state.NoCard::notifyAll() [0 time(s)]

insertPin(int)
	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

equals(java.lang.Object)
	---> behavioral.state.NoCard::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.state.NoCard::registerNatives() [0 time(s)]

notify()
	---> behavioral.state.NoCard::notify() [0 time(s)]

hashCode()
	---> behavioral.state.NoCard::hashCode() [0 time(s)]

defaultMessage()
	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

finalize()
	---> behavioral.state.NoCard::finalize() [0 time(s)]

toString()
	---> behavioral.state.NoCard::toString() [0 time(s)]

clone()
	---> behavioral.state.NoCard::clone() [0 time(s)]

behavioral.state.NoCash::getClass()
	---> behavioral.state.NoCard::getClass() [0 time(s)]

wait(long)
	---> behavioral.state.NoCard::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.state.NoCard::wait(long,int) [0 time(s)]

wait()
	---> behavioral.state.NoCard::wait() [0 time(s)]

insertCard()
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

ejectCard()
	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

requestCash(int)
	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

notifyAll()
	---> behavioral.state.NoCash::notifyAll() [0 time(s)]

insertPin(int)
	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

equals(java.lang.Object)
	---> behavioral.state.NoCash::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.state.NoCash::registerNatives() [0 time(s)]

notify()
	---> behavioral.state.NoCash::notify() [0 time(s)]

hashCode()
	---> behavioral.state.NoCash::hashCode() [0 time(s)]

defaultMessage()
	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

finalize()
	---> behavioral.state.NoCash::finalize() [0 time(s)]

toString()
	---> behavioral.state.NoCash::toString() [0 time(s)]

clone()
	---> behavioral.state.NoCash::clone() [0 time(s)]

behavioral.state.Test::getClass()
	---> behavioral.state.NoCash::getClass() [0 time(s)]

wait(long)
	---> behavioral.state.NoCash::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.state.NoCash::wait(long,int) [0 time(s)]

wait()
	---> behavioral.state.NoCash::wait() [0 time(s)]

notifyAll()
	---> behavioral.state.NoCash::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.state.NoCash::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

registerNatives()
	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

notify()
	---> behavioral.state.ATMMachine::notify() [0 time(s)]

hashCode()
	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

finalize()
	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

toString()
	---> behavioral.state.ATMMachine::toString() [0 time(s)]

clone()
	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.strategy.Add::getClass()
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

wait(long)
	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

wait()
	---> behavioral.state.ATMMachine::wait() [0 time(s)]

notifyAll()
	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

notify()
	---> behavioral.state.ATMMachine::notify() [0 time(s)]

execute(int,int)
	---> behavioral.state.ATMMachine::execute(int,int) [0 time(s)]

hashCode()
	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

finalize()
	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

toString()
	---> behavioral.state.ATMMachine::toString() [0 time(s)]

clone()
	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.strategy.ArithmeticOperation::execute(int,int)
	---> behavioral.state.ATMMachine::execute(int,int) [0 time(s)]

behavioral.strategy.Calculator::getClass()
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

wait(long)
	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

wait()
	---> behavioral.state.ATMMachine::wait() [0 time(s)]

reset()
	---> behavioral.state.ATMMachine::reset() [0 time(s)]

notifyAll()
	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

notify()
	---> behavioral.state.ATMMachine::notify() [0 time(s)]

getResult()
	---> behavioral.state.ATMMachine::getResult() [0 time(s)]

hashCode()
	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

computeOperation(int,int)
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [0 time(s)]

setOperation(behavioral.strategy.ArithmeticOperation)
	---> behavioral.strategy.ArithmeticOperation::setOperation(behavioral.strategy.ArithmeticOperation) [0 time(s)]

finalize()
	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

toString()
	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

clone()
	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Divide::getClass()
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

wait(long)
	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

wait()
	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

notifyAll()
	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

notify()
	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

execute(int,int)
	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

hashCode()
	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

finalize()
	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

toString()
	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

clone()
	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Modulo::getClass()
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

wait(long)
	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

wait()
	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

notifyAll()
	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

notify()
	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

execute(int,int)
	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

hashCode()
	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

finalize()
	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

toString()
	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

clone()
	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Multiply::getClass()
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

wait(long)
	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

wait()
	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

notifyAll()
	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

notify()
	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

execute(int,int)
	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

hashCode()
	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

finalize()
	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

toString()
	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

clone()
	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Subtract::getClass()
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

wait(long)
	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

wait()
	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

notifyAll()
	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

notify()
	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

execute(int,int)
	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

hashCode()
	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

finalize()
	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

toString()
	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

clone()
	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Test::getClass()
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

wait(long)
	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

wait()
	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int)
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

notifyAll()
	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

registerNatives()
	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

notify()
	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

hashCode()
	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

finalize()
	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

toString()
	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

clone()
	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.template_method.Basketball::getClass()
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

play()
	---> behavioral.template_method.Game::play() [2 time(s)]

wait(long)
	---> behavioral.template_method.Game::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

wait()
	---> behavioral.template_method.Game::wait() [0 time(s)]

notifyAll()
	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

start()
	---> behavioral.template_method.Game::start() [0 time(s)]

registerNatives()
	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

notify()
	---> behavioral.template_method.Game::notify() [0 time(s)]

hashCode()
	---> behavioral.template_method.Game::hashCode() [0 time(s)]

initialize()
	---> behavioral.template_method.Game::initialize() [0 time(s)]

finalize()
	---> behavioral.template_method.Game::finalize() [0 time(s)]

toString()
	---> behavioral.template_method.Game::toString() [0 time(s)]

clone()
	---> behavioral.template_method.Game::clone() [0 time(s)]

end()
	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football::getClass()
	---> behavioral.template_method.Game::getClass() [0 time(s)]

play()
	---> behavioral.template_method.Game::play() [3 time(s)]

wait(long)
	---> behavioral.template_method.Game::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

wait()
	---> behavioral.template_method.Game::wait() [0 time(s)]

notifyAll()
	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

start()
	---> behavioral.template_method.Game::start() [0 time(s)]

registerNatives()
	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

notify()
	---> behavioral.template_method.Game::notify() [0 time(s)]

hashCode()
	---> behavioral.template_method.Game::hashCode() [0 time(s)]

initialize()
	---> behavioral.template_method.Game::initialize() [0 time(s)]

finalize()
	---> behavioral.template_method.Game::finalize() [0 time(s)]

toString()
	---> behavioral.template_method.Game::toString() [0 time(s)]

clone()
	---> behavioral.template_method.Game::clone() [0 time(s)]

end()
	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game::getClass()
	---> behavioral.template_method.Game::getClass() [0 time(s)]

play()
	---> behavioral.template_method.Game::play() [3 time(s)]

wait(long)
	---> behavioral.template_method.Game::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

wait()
	---> behavioral.template_method.Game::wait() [0 time(s)]

notifyAll()
	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

start()
	---> behavioral.template_method.Game::start() [0 time(s)]

registerNatives()
	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

notify()
	---> behavioral.template_method.Game::notify() [0 time(s)]

hashCode()
	---> behavioral.template_method.Game::hashCode() [0 time(s)]

initialize()
	---> behavioral.template_method.Game::initialize() [0 time(s)]

finalize()
	---> behavioral.template_method.Game::finalize() [0 time(s)]

toString()
	---> behavioral.template_method.Game::toString() [0 time(s)]

clone()
	---> behavioral.template_method.Game::clone() [0 time(s)]

end()
	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Test::getClass()
	---> behavioral.template_method.Game::getClass() [0 time(s)]

wait(long)
	---> behavioral.template_method.Game::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

wait()
	---> behavioral.template_method.Game::wait() [0 time(s)]

notifyAll()
	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

registerNatives()
	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

notify()
	---> behavioral.template_method.Game::notify() [0 time(s)]

hashCode()
	---> behavioral.template_method.Game::hashCode() [0 time(s)]

finalize()
	---> behavioral.template_method.Game::finalize() [0 time(s)]

toString()
	---> behavioral.template_method.Game::toString() [0 time(s)]

clone()
	---> behavioral.template_method.Game::clone() [0 time(s)]

behavioral.visitor.Liquor::getName()
	---> behavioral.template_method.Game::getName() [0 time(s)]

getClass()
	---> behavioral.template_method.Game::getClass() [0 time(s)]

wait(long)
	---> behavioral.template_method.Game::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

wait()
	---> behavioral.template_method.Game::wait() [0 time(s)]

setName(java.lang.String)
	---> behavioral.template_method.Game::setName(java.lang.String) [0 time(s)]

setPrice(double)
	---> behavioral.template_method.Game::setPrice(double) [0 time(s)]

notifyAll()
	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

getPrice()
	---> behavioral.template_method.Game::getPrice() [0 time(s)]

registerNatives()
	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

notify()
	---> behavioral.template_method.Game::notify() [0 time(s)]

accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

hashCode()
	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

finalize()
	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

toString()
	---> behavioral.visitor.Visitor::toString() [0 time(s)]

clone()
	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Necessity::getName()
	---> behavioral.visitor.Visitor::getName() [0 time(s)]

getClass()
	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

wait(long)
	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

wait()
	---> behavioral.visitor.Visitor::wait() [0 time(s)]

setName(java.lang.String)
	---> behavioral.visitor.Visitor::setName(java.lang.String) [0 time(s)]

setPrice(double)
	---> behavioral.visitor.Visitor::setPrice(double) [0 time(s)]

notifyAll()
	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

getPrice()
	---> behavioral.visitor.Visitor::getPrice() [0 time(s)]

registerNatives()
	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

notify()
	---> behavioral.visitor.Visitor::notify() [0 time(s)]

accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

hashCode()
	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

finalize()
	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

toString()
	---> behavioral.visitor.Visitor::toString() [0 time(s)]

clone()
	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Product::getName()
	---> behavioral.visitor.Visitor::getName() [0 time(s)]

getClass()
	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

wait(long)
	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

wait()
	---> behavioral.visitor.Visitor::wait() [0 time(s)]

setName(java.lang.String)
	---> behavioral.visitor.Visitor::setName(java.lang.String) [0 time(s)]

setPrice(double)
	---> behavioral.visitor.Visitor::setPrice(double) [0 time(s)]

notifyAll()
	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

getPrice()
	---> behavioral.visitor.Visitor::getPrice() [0 time(s)]

registerNatives()
	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

notify()
	---> behavioral.visitor.Visitor::notify() [0 time(s)]

accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

hashCode()
	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

finalize()
	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

toString()
	---> behavioral.visitor.Visitor::toString() [0 time(s)]

clone()
	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor::getClass()
	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

wait(long)
	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

wait()
	---> behavioral.visitor.Visitor::wait() [0 time(s)]

getComputedTax()
	---> behavioral.visitor.Visitor::getComputedTax() [0 time(s)]

notifyAll()
	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

notify()
	---> behavioral.visitor.Visitor::notify() [0 time(s)]

computeTax(behavioral.visitor.Product)
	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

getTaxRate()
	---> behavioral.visitor.Product::getTaxRate() [0 time(s)]

hashCode()
	---> behavioral.visitor.Product::hashCode() [0 time(s)]

finalize()
	---> behavioral.visitor.Product::finalize() [0 time(s)]

toString()
	---> behavioral.visitor.Product::toString() [0 time(s)]

clone()
	---> behavioral.visitor.Product::clone() [0 time(s)]

visit(behavioral.visitor.Liquor)
	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [0 time(s)]

visit(behavioral.visitor.Tobacco)
	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

visit(behavioral.visitor.Necessity)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [0 time(s)]

behavioral.visitor.TaxVisitor::getClass()
	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

wait(long)
	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

wait()
	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

getComputedTax()
	---> behavioral.visitor.TaxVisitor::getComputedTax() [0 time(s)]

notifyAll()
	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

notify()
	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

computeTax(behavioral.visitor.Product)
	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

getTaxRate()
	---> behavioral.visitor.Product::getTaxRate() [0 time(s)]

hashCode()
	---> behavioral.visitor.Product::hashCode() [0 time(s)]

finalize()
	---> behavioral.visitor.Product::finalize() [0 time(s)]

toString()
	---> behavioral.visitor.Product::toString() [0 time(s)]

clone()
	---> behavioral.visitor.Product::clone() [0 time(s)]

visit(behavioral.visitor.Liquor)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

visit(behavioral.visitor.Tobacco)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

visit(behavioral.visitor.Necessity)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test::getClass()
	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

wait(long)
	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

wait()
	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

notifyAll()
	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

registerNatives()
	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

notify()
	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

hashCode()
	---> behavioral.visitor.TaxVisitor::hashCode() [0 time(s)]

computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor)
	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

finalize()
	---> behavioral.visitor.TaxVisitor::finalize() [0 time(s)]

toString()
	---> behavioral.visitor.TaxVisitor::toString() [0 time(s)]

clone()
	---> behavioral.visitor.TaxVisitor::clone() [0 time(s)]

behavioral.visitor.Tobacco::getName()
	---> behavioral.visitor.TaxVisitor::getName() [0 time(s)]

getClass()
	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

wait(long)
	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

wait()
	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

setName(java.lang.String)
	---> behavioral.visitor.TaxVisitor::setName(java.lang.String) [0 time(s)]

setPrice(double)
	---> behavioral.visitor.TaxVisitor::setPrice(double) [0 time(s)]

notifyAll()
	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

getPrice()
	---> behavioral.visitor.TaxVisitor::getPrice() [0 time(s)]

registerNatives()
	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

notify()
	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

hashCode()
	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

finalize()
	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

toString()
	---> behavioral.visitor.Visitor::toString() [0 time(s)]

clone()
	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Visitable::accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

behavioral.visitor.Visitor::visit(behavioral.visitor.Liquor)
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Liquor) [0 time(s)]

visit(behavioral.visitor.Tobacco)
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

visit(behavioral.visitor.Necessity)
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Necessity) [0 time(s)]

creational.abstract_factory.AbstractShapeFactory::getClass()
	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

wait(long)
	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

wait(long,int)
	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

wait()
	---> behavioral.visitor.Visitor::wait() [0 time(s)]

createShape(creational.abstract_factory.ShapeType)
	---> behavioral.visitor.Visitor::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

getRegistryKey(java.lang.Class)
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

notify()
	---> behavioral.visitor.Visitor::notify() [0 time(s)]

hashCode()
	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

finalize()
	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

toString()
	---> behavioral.visitor.Visitor::toString() [0 time(s)]

clone()
	---> behavioral.visitor.Visitor::clone() [0 time(s)]

getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.Rectangle::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

draw()
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.RoundedRectangle::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

draw()
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

createShape(creational.abstract_factory.ShapeType)
	---> creational.singleton.SingletonRegistry::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.RoundedShapeType::clone()
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

compareTo(java.lang.Enum)
	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

describeConstable()
	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

getDeclaringClass()
	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

name()
	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

ordinal()
	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

readObject(java.io.ObjectInputStream)
	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

readObjectNoData()
	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

valueOf(java.lang.Class,java.lang.String)
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

valueOf(java.lang.String)
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

values()
	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.RoundedTriangle::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

draw()
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.Shape::draw()
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.ShapeFactoryType::clone()
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

compareTo(java.lang.Enum)
	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

describeConstable()
	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

getDeclaringClass()
	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

name()
	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

ordinal()
	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

readObject(java.io.ObjectInputStream)
	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

readObjectNoData()
	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

valueOf(java.lang.Class,java.lang.String)
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

valueOf(java.lang.String)
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

values()
	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.ShapeProducer::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

createFactory(creational.abstract_factory.ShapeFactoryType)
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType::creational.abstract_factory.StandardShapeFactory::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

createShape(creational.abstract_factory.ShapeType)
	---> creational.singleton.SingletonRegistry::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.StandardShapeType::clone()
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

compareTo(java.lang.Enum)
	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

describeConstable()
	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

getDeclaringClass()
	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

name()
	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

ordinal()
	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

readObject(java.io.ObjectInputStream)
	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

readObjectNoData()
	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

valueOf(java.lang.Class,java.lang.String)
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

valueOf(java.lang.String)
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

values()
	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.Test::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

registerNatives()
	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

notify()
	---> creational.abstract_factory.Shape::notify() [0 time(s)]

hashCode()
	---> creational.abstract_factory.Shape::hashCode() [0 time(s)]

finalize()
	---> creational.abstract_factory.Shape::finalize() [0 time(s)]

toString()
	---> creational.abstract_factory.Shape::toString() [0 time(s)]

clone()
	---> creational.abstract_factory.Shape::clone() [0 time(s)]

creational.abstract_factory.Triangle::getClass()
	---> creational.abstract_factory.Shape::getClass() [0 time(s)]

wait(long)
	---> creational.abstract_factory.Shape::wait(long) [0 time(s)]

wait(long,int)
	---> creational.abstract_factory.Shape::wait(long,int) [0 time(s)]

wait()
	---> creational.abstract_factory.Shape::wait() [0 time(s)]

notifyAll()
	---> creational.abstract_factory.Shape::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.abstract_factory.Shape::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

draw()
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

notify()
	---> creational.abstract_factory.Shape::notify() [0 time(s)]

hashCode()
	---> creational.abstract_factory.Shape::hashCode() [0 time(s)]

finalize()
	---> creational.abstract_factory.Shape::finalize() [0 time(s)]

toString()
	---> creational.abstract_factory.Shape::toString() [0 time(s)]

clone()
	---> creational.abstract_factory.Shape::clone() [0 time(s)]

creational.builder.IRobot::setTorso(java.lang.String)
	---> creational.abstract_factory.Shape::setTorso(java.lang.String) [0 time(s)]

setArms(java.lang.String)
	---> creational.abstract_factory.Shape::setArms(java.lang.String) [0 time(s)]

setLegs(java.lang.String)
	---> creational.abstract_factory.Shape::setLegs(java.lang.String) [0 time(s)]

setHead(java.lang.String)
	---> creational.abstract_factory.Shape::setHead(java.lang.String) [0 time(s)]

creational.builder.IRobotBuilder::buildArms()
	---> creational.abstract_factory.Shape::buildArms() [0 time(s)]

buildHead()
	---> creational.abstract_factory.Shape::buildHead() [0 time(s)]

getRobot()
	---> creational.abstract_factory.Shape::getRobot() [0 time(s)]

buildTorso()
	---> creational.abstract_factory.Shape::buildTorso() [0 time(s)]

buildLegs()
	---> creational.abstract_factory.Shape::buildLegs() [0 time(s)]

creational.builder.OldRobotBuilder::getClass()
	---> creational.abstract_factory.Shape::getClass() [0 time(s)]

wait(long)
	---> creational.abstract_factory.Shape::wait(long) [0 time(s)]

wait(long,int)
	---> creational.abstract_factory.Shape::wait(long,int) [0 time(s)]

wait()
	---> creational.abstract_factory.Shape::wait() [0 time(s)]

notifyAll()
	---> creational.abstract_factory.Shape::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.abstract_factory.Shape::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

getRobot()
	---> creational.abstract_factory.Shape::getRobot() [0 time(s)]

notify()
	---> creational.abstract_factory.Shape::notify() [0 time(s)]

buildLegs()
	---> creational.builder.Robot::buildLegs() [0 time(s)]

buildArms()
	---> creational.builder.Robot::buildArms() [0 time(s)]

hashCode()
	---> creational.builder.Robot::hashCode() [0 time(s)]

buildHead()
	---> creational.builder.Robot::buildHead() [0 time(s)]

finalize()
	---> creational.builder.Robot::finalize() [0 time(s)]

toString()
	---> creational.builder.Robot::toString() [0 time(s)]

clone()
	---> creational.builder.Robot::clone() [0 time(s)]

buildTorso()
	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.Robot::getClass()
	---> creational.builder.Robot::getClass() [0 time(s)]

wait(long)
	---> creational.builder.Robot::wait(long) [0 time(s)]

wait(long,int)
	---> creational.builder.Robot::wait(long,int) [0 time(s)]

wait()
	---> creational.builder.Robot::wait() [0 time(s)]

setLegs(java.lang.String)
	---> creational.builder.Robot::setLegs(java.lang.String) [0 time(s)]

notifyAll()
	---> creational.builder.Robot::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

setHead(java.lang.String)
	---> creational.builder.Robot::setHead(java.lang.String) [0 time(s)]

registerNatives()
	---> creational.builder.Robot::registerNatives() [0 time(s)]

getTorso()
	---> creational.builder.Robot::getTorso() [0 time(s)]

notify()
	---> creational.builder.Robot::notify() [0 time(s)]

setTorso(java.lang.String)
	---> creational.builder.Robot::setTorso(java.lang.String) [0 time(s)]

hashCode()
	---> creational.builder.Robot::hashCode() [0 time(s)]

setArms(java.lang.String)
	---> creational.builder.Robot::setArms(java.lang.String) [0 time(s)]

getArms()
	---> creational.builder.Robot::getArms() [0 time(s)]

getHead()
	---> creational.builder.Robot::getHead() [0 time(s)]

toString()
	---> creational.builder.Robot::toString() [0 time(s)]

finalize()
	---> creational.builder.Robot::finalize() [0 time(s)]

clone()
	---> creational.builder.Robot::clone() [0 time(s)]

getLegs()
	---> creational.builder.Robot::getLegs() [0 time(s)]

creational.builder.RobotBuilder::getClass()
	---> creational.builder.Robot::getClass() [0 time(s)]

wait(long)
	---> creational.builder.Robot::wait(long) [0 time(s)]

wait(long,int)
	---> creational.builder.Robot::wait(long,int) [0 time(s)]

wait()
	---> creational.builder.Robot::wait() [0 time(s)]

notifyAll()
	---> creational.builder.Robot::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.builder.Robot::registerNatives() [0 time(s)]

getRobot()
	---> creational.builder.Robot::getRobot() [0 time(s)]

notify()
	---> creational.builder.Robot::notify() [0 time(s)]

buildLegs()
	---> creational.builder.Robot::buildLegs() [0 time(s)]

buildArms()
	---> creational.builder.Robot::buildArms() [0 time(s)]

hashCode()
	---> creational.builder.Robot::hashCode() [0 time(s)]

buildHead()
	---> creational.builder.Robot::buildHead() [0 time(s)]

finalize()
	---> creational.builder.Robot::finalize() [0 time(s)]

toString()
	---> creational.builder.Robot::toString() [0 time(s)]

clone()
	---> creational.builder.Robot::clone() [0 time(s)]

buildTorso()
	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.RobotEngineer::getClass()
	---> creational.builder.Robot::getClass() [0 time(s)]

wait(long)
	---> creational.builder.Robot::wait(long) [0 time(s)]

wait(long,int)
	---> creational.builder.Robot::wait(long,int) [0 time(s)]

wait()
	---> creational.builder.Robot::wait() [0 time(s)]

notifyAll()
	---> creational.builder.Robot::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.builder.Robot::registerNatives() [0 time(s)]

getRobot()
	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

notify()
	---> creational.builder.IRobotBuilder::notify() [0 time(s)]

hashCode()
	---> creational.builder.IRobotBuilder::hashCode() [0 time(s)]

constructRobot()
	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

setRobotBuilder(creational.builder.IRobotBuilder)
	---> creational.builder.IRobotBuilder::setRobotBuilder(creational.builder.IRobotBuilder) [0 time(s)]

finalize()
	---> creational.builder.IRobotBuilder::finalize() [0 time(s)]

toString()
	---> creational.builder.IRobotBuilder::toString() [0 time(s)]

clone()
	---> creational.builder.IRobotBuilder::clone() [0 time(s)]

creational.builder.SophisticatedRobotBuilder::getClass()
	---> creational.builder.IRobotBuilder::getClass() [0 time(s)]

wait(long)
	---> creational.builder.IRobotBuilder::wait(long) [0 time(s)]

wait(long,int)
	---> creational.builder.IRobotBuilder::wait(long,int) [0 time(s)]

wait()
	---> creational.builder.IRobotBuilder::wait() [0 time(s)]

notifyAll()
	---> creational.builder.IRobotBuilder::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.builder.IRobotBuilder::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.builder.IRobotBuilder::registerNatives() [0 time(s)]

getRobot()
	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

notify()
	---> creational.builder.IRobotBuilder::notify() [0 time(s)]

buildLegs()
	---> creational.builder.Robot::buildLegs() [1 time(s)]

buildArms()
	---> creational.builder.Robot::buildArms() [1 time(s)]

hashCode()
	---> creational.builder.Robot::hashCode() [0 time(s)]

buildHead()
	---> creational.builder.Robot::buildHead() [1 time(s)]

finalize()
	---> creational.builder.Robot::finalize() [0 time(s)]

toString()
	---> creational.builder.Robot::toString() [0 time(s)]

clone()
	---> creational.builder.Robot::clone() [0 time(s)]

buildTorso()
	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test::getClass()
	---> creational.builder.Robot::getClass() [0 time(s)]

wait(long)
	---> creational.builder.Robot::wait(long) [0 time(s)]

wait(long,int)
	---> creational.builder.Robot::wait(long,int) [0 time(s)]

wait()
	---> creational.builder.Robot::wait() [0 time(s)]

notifyAll()
	---> creational.builder.Robot::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

registerNatives()
	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

notify()
	---> creational.builder.RobotEngineer::notify() [0 time(s)]

hashCode()
	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

finalize()
	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

toString()
	---> creational.builder.RobotEngineer::toString() [0 time(s)]

clone()
	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.BigUFOEnemyShip::getName()
	---> creational.builder.RobotEngineer::getName() [0 time(s)]

getClass()
	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

wait(long)
	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

wait(long,int)
	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

wait()
	---> creational.builder.RobotEngineer::wait() [0 time(s)]

setName(java.lang.String)
	---> creational.builder.RobotEngineer::setName(java.lang.String) [0 time(s)]

getAmtDamage()
	---> creational.builder.RobotEngineer::getAmtDamage() [0 time(s)]

setAmtDamage(double)
	---> creational.builder.RobotEngineer::setAmtDamage(double) [0 time(s)]

notifyAll()
	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

notify()
	---> creational.builder.RobotEngineer::notify() [0 time(s)]

followHeroShip()
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

hashCode()
	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

enemyShipShoots()
	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

displayEnemyShip()
	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

finalize()
	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

toString()
	---> creational.builder.RobotEngineer::toString() [0 time(s)]

clone()
	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShip::getName()
	---> creational.builder.RobotEngineer::getName() [0 time(s)]

getClass()
	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

wait(long)
	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

wait(long,int)
	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

wait()
	---> creational.builder.RobotEngineer::wait() [0 time(s)]

setName(java.lang.String)
	---> creational.builder.RobotEngineer::setName(java.lang.String) [0 time(s)]

getAmtDamage()
	---> creational.builder.RobotEngineer::getAmtDamage() [0 time(s)]

setAmtDamage(double)
	---> creational.builder.RobotEngineer::setAmtDamage(double) [0 time(s)]

notifyAll()
	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

notify()
	---> creational.builder.RobotEngineer::notify() [0 time(s)]

followHeroShip()
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

hashCode()
	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

enemyShipShoots()
	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

displayEnemyShip()
	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

finalize()
	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

toString()
	---> creational.builder.RobotEngineer::toString() [0 time(s)]

clone()
	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShipFactory::getClass()
	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

wait(long)
	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

wait(long,int)
	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

wait()
	---> creational.builder.RobotEngineer::wait() [0 time(s)]

notifyAll()
	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

notify()
	---> creational.builder.RobotEngineer::notify() [0 time(s)]

hashCode()
	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

createEnemyShip(java.lang.String)
	---> creational.builder.RobotEngineer::createEnemyShip(java.lang.String) [0 time(s)]

finalize()
	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

toString()
	---> creational.builder.RobotEngineer::toString() [0 time(s)]

clone()
	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShipTesting::getClass()
	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

wait(long)
	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

wait(long,int)
	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

wait()
	---> creational.builder.RobotEngineer::wait() [0 time(s)]

notifyAll()
	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

registerNatives()
	---> creational.factory.EnemyShipFactory::registerNatives() [0 time(s)]

notify()
	---> creational.factory.EnemyShipFactory::notify() [0 time(s)]

hashCode()
	---> creational.factory.EnemyShipFactory::hashCode() [0 time(s)]

doStuffEnemy(creational.factory.EnemyShip)
	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

finalize()
	---> creational.factory.EnemyShip::finalize() [0 time(s)]

toString()
	---> creational.factory.EnemyShip::toString() [0 time(s)]

clone()
	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.RocketEnemyShip::getName()
	---> creational.factory.EnemyShip::getName() [0 time(s)]

getClass()
	---> creational.factory.EnemyShip::getClass() [0 time(s)]

wait(long)
	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

wait(long,int)
	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

wait()
	---> creational.factory.EnemyShip::wait() [0 time(s)]

setName(java.lang.String)
	---> creational.factory.EnemyShip::setName(java.lang.String) [0 time(s)]

getAmtDamage()
	---> creational.factory.EnemyShip::getAmtDamage() [0 time(s)]

setAmtDamage(double)
	---> creational.factory.EnemyShip::setAmtDamage(double) [0 time(s)]

notifyAll()
	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

notify()
	---> creational.factory.EnemyShip::notify() [0 time(s)]

followHeroShip()
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

hashCode()
	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

enemyShipShoots()
	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

displayEnemyShip()
	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

finalize()
	---> creational.factory.EnemyShip::finalize() [0 time(s)]

toString()
	---> creational.factory.EnemyShip::toString() [0 time(s)]

clone()
	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.Test::getClass()
	---> creational.factory.EnemyShip::getClass() [0 time(s)]

wait(long)
	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

wait(long,int)
	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

wait()
	---> creational.factory.EnemyShip::wait() [0 time(s)]

notifyAll()
	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

registerNatives()
	---> creational.factory.EnemyShipFactory::registerNatives() [0 time(s)]

notify()
	---> creational.factory.EnemyShipFactory::notify() [0 time(s)]

hashCode()
	---> creational.factory.EnemyShipFactory::hashCode() [0 time(s)]

doStuffEnemy(creational.factory.EnemyShip)
	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

finalize()
	---> creational.factory.EnemyShip::finalize() [0 time(s)]

toString()
	---> creational.factory.EnemyShip::toString() [0 time(s)]

clone()
	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.UFOEnemyShip::getName()
	---> creational.factory.EnemyShip::getName() [0 time(s)]

getClass()
	---> creational.factory.EnemyShip::getClass() [0 time(s)]

wait(long)
	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

wait(long,int)
	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

wait()
	---> creational.factory.EnemyShip::wait() [0 time(s)]

setName(java.lang.String)
	---> creational.factory.EnemyShip::setName(java.lang.String) [0 time(s)]

getAmtDamage()
	---> creational.factory.EnemyShip::getAmtDamage() [0 time(s)]

setAmtDamage(double)
	---> creational.factory.EnemyShip::setAmtDamage(double) [0 time(s)]

notifyAll()
	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

notify()
	---> creational.factory.EnemyShip::notify() [0 time(s)]

followHeroShip()
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

hashCode()
	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

enemyShipShoots()
	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

displayEnemyShip()
	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

finalize()
	---> creational.factory.EnemyShip::finalize() [0 time(s)]

toString()
	---> creational.factory.EnemyShip::toString() [0 time(s)]

clone()
	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.prototype.Circle::getClass()
	---> creational.factory.EnemyShip::getClass() [0 time(s)]

wait(long)
	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

wait(long,int)
	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

wait()
	---> creational.factory.EnemyShip::wait() [0 time(s)]

notifyAll()
	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

getId()
	---> creational.factory.EnemyShip::getId() [0 time(s)]

setPosition(creational.prototype.Position)
	---> creational.factory.EnemyShip::setPosition(creational.prototype.Position) [0 time(s)]

registerNatives()
	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

draw()
	---> creational.factory.EnemyShip::draw() [0 time(s)]

getPosition()
	---> creational.factory.EnemyShip::getPosition() [0 time(s)]

notify()
	---> creational.factory.EnemyShip::notify() [0 time(s)]

hashCode()
	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

getType()
	---> creational.factory.EnemyShip::getType() [0 time(s)]

setId(java.lang.String)
	---> creational.factory.EnemyShip::setId(java.lang.String) [0 time(s)]

clone()
	---> creational.prototype.Shape::clone() [2 time(s)]

toString()
	---> creational.prototype.Shape::toString() [0 time(s)]

finalize()
	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.Position::getClass()
	---> creational.prototype.Shape::getClass() [0 time(s)]

wait(long)
	---> creational.prototype.Shape::wait(long) [0 time(s)]

wait(long,int)
	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

wait()
	---> creational.prototype.Shape::wait() [0 time(s)]

setX(double)
	---> creational.prototype.Shape::setX(double) [0 time(s)]

notifyAll()
	---> creational.prototype.Shape::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.prototype.Shape::registerNatives() [0 time(s)]

setY(double)
	---> creational.prototype.Shape::setY(double) [0 time(s)]

notify()
	---> creational.prototype.Shape::notify() [0 time(s)]

hashCode()
	---> creational.prototype.Shape::hashCode() [0 time(s)]

getX()
	---> creational.prototype.Shape::getX() [0 time(s)]

getY()
	---> creational.prototype.Shape::getY() [0 time(s)]

clone()
	---> creational.prototype.Shape::clone() [0 time(s)]

toString()
	---> creational.prototype.Position::toString() [1 time(s)]

finalize()
	---> creational.prototype.Position::finalize() [0 time(s)]

creational.prototype.Rectangle::getClass()
	---> creational.prototype.Position::getClass() [0 time(s)]

wait(long)
	---> creational.prototype.Position::wait(long) [0 time(s)]

wait(long,int)
	---> creational.prototype.Position::wait(long,int) [0 time(s)]

wait()
	---> creational.prototype.Position::wait() [0 time(s)]

notifyAll()
	---> creational.prototype.Position::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.prototype.Position::equals(java.lang.Object) [0 time(s)]

getId()
	---> creational.prototype.Position::getId() [0 time(s)]

setPosition(creational.prototype.Position)
	---> creational.prototype.Position::setPosition(creational.prototype.Position) [0 time(s)]

registerNatives()
	---> creational.prototype.Position::registerNatives() [0 time(s)]

draw()
	---> creational.prototype.Position::draw() [0 time(s)]

getPosition()
	---> creational.prototype.Position::getPosition() [0 time(s)]

notify()
	---> creational.prototype.Position::notify() [0 time(s)]

hashCode()
	---> creational.prototype.Position::hashCode() [0 time(s)]

getType()
	---> creational.prototype.Position::getType() [0 time(s)]

setId(java.lang.String)
	---> creational.prototype.Position::setId(java.lang.String) [0 time(s)]

clone()
	---> creational.prototype.Shape::clone() [3 time(s)]

toString()
	---> creational.prototype.Shape::toString() [1 time(s)]

finalize()
	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.Shape::getClass()
	---> creational.prototype.Shape::getClass() [0 time(s)]

wait(long)
	---> creational.prototype.Shape::wait(long) [0 time(s)]

wait(long,int)
	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

wait()
	---> creational.prototype.Shape::wait() [0 time(s)]

notifyAll()
	---> creational.prototype.Shape::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

getId()
	---> creational.prototype.Shape::getId() [0 time(s)]

setPosition(creational.prototype.Position)
	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [0 time(s)]

registerNatives()
	---> creational.prototype.Shape::registerNatives() [0 time(s)]

draw()
	---> creational.prototype.Shape::draw() [0 time(s)]

getPosition()
	---> creational.prototype.Shape::getPosition() [0 time(s)]

notify()
	---> creational.prototype.Shape::notify() [0 time(s)]

hashCode()
	---> creational.prototype.Shape::hashCode() [0 time(s)]

getType()
	---> creational.prototype.Shape::getType() [0 time(s)]

setId(java.lang.String)
	---> creational.prototype.Shape::setId(java.lang.String) [0 time(s)]

clone()
	---> creational.prototype.Shape::clone() [3 time(s)]

toString()
	---> creational.prototype.Shape::toString() [1 time(s)]

finalize()
	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.ShapeCache::getClass()
	---> creational.prototype.Shape::getClass() [0 time(s)]

wait(long)
	---> creational.prototype.Shape::wait(long) [0 time(s)]

wait(long,int)
	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

wait()
	---> creational.prototype.Shape::wait() [0 time(s)]

notifyAll()
	---> creational.prototype.Shape::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.prototype.Shape::registerNatives() [0 time(s)]

notify()
	---> creational.prototype.Shape::notify() [0 time(s)]

getShape(java.lang.String)
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

hashCode()
	---> creational.prototype.Shape::hashCode() [0 time(s)]

displayCacheContent()
	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

finalize()
	---> creational.prototype.Shape::finalize() [0 time(s)]

toString()
	---> creational.prototype.Shape::toString() [0 time(s)]

clone()
	---> creational.prototype.Shape::clone() [0 time(s)]

loadCache()
	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

creational.prototype.Test::getClass()
	---> creational.prototype.Rectangle::getClass() [0 time(s)]

wait(long)
	---> creational.prototype.Rectangle::wait(long) [0 time(s)]

wait(long,int)
	---> creational.prototype.Rectangle::wait(long,int) [0 time(s)]

wait()
	---> creational.prototype.Rectangle::wait() [0 time(s)]

notifyAll()
	---> creational.prototype.Rectangle::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.prototype.Rectangle::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

registerNatives()
	---> creational.prototype.Shape::registerNatives() [0 time(s)]

notify()
	---> creational.prototype.Shape::notify() [0 time(s)]

hashCode()
	---> creational.prototype.Shape::hashCode() [0 time(s)]

finalize()
	---> creational.prototype.Shape::finalize() [0 time(s)]

toString()
	---> creational.prototype.Shape::toString() [0 time(s)]

clone()
	---> creational.prototype.Shape::clone() [0 time(s)]

creational.prototype.Triangle::getClass()
	---> creational.prototype.Shape::getClass() [0 time(s)]

wait(long)
	---> creational.prototype.Shape::wait(long) [0 time(s)]

wait(long,int)
	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

wait()
	---> creational.prototype.Shape::wait() [0 time(s)]

notifyAll()
	---> creational.prototype.Shape::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

getId()
	---> creational.prototype.Shape::getId() [0 time(s)]

setPosition(creational.prototype.Position)
	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [0 time(s)]

registerNatives()
	---> creational.prototype.Shape::registerNatives() [0 time(s)]

draw()
	---> creational.prototype.Shape::draw() [0 time(s)]

getPosition()
	---> creational.prototype.Shape::getPosition() [0 time(s)]

notify()
	---> creational.prototype.Shape::notify() [0 time(s)]

hashCode()
	---> creational.prototype.Shape::hashCode() [0 time(s)]

getType()
	---> creational.prototype.Shape::getType() [0 time(s)]

setId(java.lang.String)
	---> creational.prototype.Shape::setId(java.lang.String) [0 time(s)]

clone()
	---> creational.prototype.Shape::clone() [3 time(s)]

toString()
	---> creational.prototype.Shape::toString() [1 time(s)]

finalize()
	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.singleton.ExtendedSingleton::getClass()
	---> creational.prototype.Shape::getClass() [0 time(s)]

wait(long)
	---> creational.prototype.Shape::wait(long) [0 time(s)]

wait(long,int)
	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

wait()
	---> creational.prototype.Shape::wait() [0 time(s)]

getRegistryKey(java.lang.Class)
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
	---> creational.prototype.Shape::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.prototype.Shape::registerNatives() [0 time(s)]

notify()
	---> creational.prototype.Shape::notify() [0 time(s)]

hashCode()
	---> creational.prototype.Shape::hashCode() [0 time(s)]

finalize()
	---> creational.prototype.Shape::finalize() [0 time(s)]

toString()
	---> creational.prototype.Shape::toString() [0 time(s)]

clone()
	---> creational.prototype.Shape::clone() [0 time(s)]

getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.ExtendedSingleton2::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.Singleton::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.SingletonRegistry::lookup(java.lang.String)
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

getClass()
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

notify()
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

hashCode()
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

register(java.lang.String,creational.singleton.Singleton)
	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

finalize()
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

toString()
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

clone()
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.singleton.Test::getClass()
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

wait(long)
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

wait(long,int)
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

wait()
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

notifyAll()
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

registerNatives()
	---> creational.singleton.ExtendedSingleton2::registerNatives() [0 time(s)]

notify()
	---> creational.singleton.ExtendedSingleton2::notify() [0 time(s)]

hashCode()
	---> creational.singleton.ExtendedSingleton2::hashCode() [0 time(s)]

finalize()
	---> creational.singleton.ExtendedSingleton2::finalize() [0 time(s)]

toString()
	---> creational.singleton.ExtendedSingleton2::toString() [0 time(s)]

clone()
	---> creational.singleton.ExtendedSingleton2::clone() [0 time(s)]

structural.adapter.EnemyAttacker::fireWeapon()
	---> creational.singleton.ExtendedSingleton2::fireWeapon() [0 time(s)]

driveForward()
	---> creational.singleton.ExtendedSingleton2::driveForward() [0 time(s)]

assignDriver(java.lang.String)
	---> creational.singleton.ExtendedSingleton2::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobot::getClass()
	---> creational.singleton.ExtendedSingleton2::getClass() [0 time(s)]

wait(long)
	---> creational.singleton.ExtendedSingleton2::wait(long) [0 time(s)]

wait(long,int)
	---> creational.singleton.ExtendedSingleton2::wait(long,int) [0 time(s)]

wait()
	---> creational.singleton.ExtendedSingleton2::wait() [0 time(s)]

smashwithHands()
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

walkForward()
	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

notifyAll()
	---> creational.singleton.ExtendedSingleton2::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> creational.singleton.ExtendedSingleton2::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> creational.singleton.ExtendedSingleton2::registerNatives() [0 time(s)]

notify()
	---> creational.singleton.ExtendedSingleton2::notify() [0 time(s)]

hashCode()
	---> creational.singleton.ExtendedSingleton2::hashCode() [0 time(s)]

reactToHuman(java.lang.String)
	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

finalize()
	---> creational.singleton.ExtendedSingleton2::finalize() [0 time(s)]

toString()
	---> creational.singleton.ExtendedSingleton2::toString() [0 time(s)]

clone()
	---> creational.singleton.ExtendedSingleton2::clone() [0 time(s)]

structural.adapter.EnemyRobotAdapter::getClass()
	---> creational.singleton.ExtendedSingleton2::getClass() [0 time(s)]

wait(long)
	---> creational.singleton.ExtendedSingleton2::wait(long) [0 time(s)]

wait(long,int)
	---> creational.singleton.ExtendedSingleton2::wait(long,int) [0 time(s)]

wait()
	---> creational.singleton.ExtendedSingleton2::wait() [0 time(s)]

driveForward()
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

notifyAll()
	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.adapter.EnemyRobot::registerNatives() [0 time(s)]

notify()
	---> structural.adapter.EnemyRobot::notify() [0 time(s)]

setRobot(structural.adapter.EnemyRobot)
	---> structural.adapter.EnemyRobot::setRobot(structural.adapter.EnemyRobot) [0 time(s)]

fireWeapon()
	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

hashCode()
	---> structural.adapter.EnemyRobot::hashCode() [0 time(s)]

assignDriver(java.lang.String)
	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

finalize()
	---> structural.adapter.EnemyRobot::finalize() [0 time(s)]

toString()
	---> structural.adapter.EnemyRobot::toString() [0 time(s)]

clone()
	---> structural.adapter.EnemyRobot::clone() [0 time(s)]

structural.adapter.EnemyTank::getClass()
	---> structural.adapter.EnemyRobot::getClass() [0 time(s)]

wait(long)
	---> structural.adapter.EnemyRobot::wait(long) [0 time(s)]

wait(long,int)
	---> structural.adapter.EnemyRobot::wait(long,int) [0 time(s)]

wait()
	---> structural.adapter.EnemyRobot::wait() [0 time(s)]

driveForward()
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

notifyAll()
	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.adapter.EnemyRobot::registerNatives() [0 time(s)]

notify()
	---> structural.adapter.EnemyRobot::notify() [0 time(s)]

fireWeapon()
	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

hashCode()
	---> structural.adapter.EnemyRobot::hashCode() [0 time(s)]

assignDriver(java.lang.String)
	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

finalize()
	---> structural.adapter.EnemyRobot::finalize() [0 time(s)]

toString()
	---> structural.adapter.EnemyRobot::toString() [0 time(s)]

clone()
	---> structural.adapter.EnemyRobot::clone() [0 time(s)]

structural.adapter.Test::getClass()
	---> structural.adapter.EnemyRobot::getClass() [0 time(s)]

wait(long)
	---> structural.adapter.EnemyRobot::wait(long) [0 time(s)]

wait(long,int)
	---> structural.adapter.EnemyRobot::wait(long,int) [0 time(s)]

wait()
	---> structural.adapter.EnemyRobot::wait() [0 time(s)]

notifyAll()
	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

registerNatives()
	---> structural.adapter.EnemyAttacker::registerNatives() [0 time(s)]

notify()
	---> structural.adapter.EnemyAttacker::notify() [0 time(s)]

hashCode()
	---> structural.adapter.EnemyAttacker::hashCode() [0 time(s)]

finalize()
	---> structural.adapter.EnemyAttacker::finalize() [0 time(s)]

toString()
	---> structural.adapter.EnemyAttacker::toString() [0 time(s)]

clone()
	---> structural.adapter.EnemyAttacker::clone() [0 time(s)]

structural.adapter.TestEnemyAttackers::getClass()
	---> structural.adapter.EnemyAttacker::getClass() [0 time(s)]

wait(long)
	---> structural.adapter.EnemyAttacker::wait(long) [0 time(s)]

wait(long,int)
	---> structural.adapter.EnemyAttacker::wait(long,int) [0 time(s)]

wait()
	---> structural.adapter.EnemyAttacker::wait() [0 time(s)]

notifyAll()
	---> structural.adapter.EnemyAttacker::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.adapter.EnemyAttacker::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

registerNatives()
	---> structural.adapter.EnemyAttacker::registerNatives() [0 time(s)]

notify()
	---> structural.adapter.EnemyAttacker::notify() [0 time(s)]

hashCode()
	---> structural.adapter.EnemyAttacker::hashCode() [0 time(s)]

finalize()
	---> structural.adapter.EnemyAttacker::finalize() [0 time(s)]

toString()
	---> structural.adapter.EnemyAttacker::toString() [0 time(s)]

clone()
	---> structural.adapter.EnemyAttacker::clone() [0 time(s)]

structural.bridge.AdvancedRemote::getClass()
	---> structural.adapter.EnemyAttacker::getClass() [0 time(s)]

wait(long)
	---> structural.adapter.EnemyAttacker::wait(long) [0 time(s)]

wait(long,int)
	---> structural.adapter.EnemyAttacker::wait(long,int) [0 time(s)]

wait()
	---> structural.adapter.EnemyAttacker::wait() [0 time(s)]

togglePower()
	---> structural.bridge.Device::togglePower() [4 time(s)]

notifyAll()
	---> structural.bridge.Device::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

mute()
	---> structural.bridge.Device::mute() [2 time(s)]

channelDown()
	---> structural.bridge.Device::channelDown() [2 time(s)]

registerNatives()
	---> structural.bridge.Device::registerNatives() [0 time(s)]

notify()
	---> structural.bridge.Device::notify() [0 time(s)]

hashCode()
	---> structural.bridge.Device::hashCode() [0 time(s)]

volumeDown()
	---> structural.bridge.Device::volumeDown() [2 time(s)]

volumeUp()
	---> structural.bridge.Device::volumeUp() [2 time(s)]

finalize()
	---> structural.bridge.Device::finalize() [0 time(s)]

toString()
	---> structural.bridge.Device::toString() [0 time(s)]

clone()
	---> structural.bridge.Device::clone() [0 time(s)]

channelUp()
	---> structural.bridge.Device::channelUp() [2 time(s)]

structural.bridge.Device::getName()
	---> structural.bridge.Device::getName() [0 time(s)]

getClass()
	---> structural.bridge.Device::getClass() [0 time(s)]

wait(long)
	---> structural.bridge.Device::wait(long) [0 time(s)]

wait(long,int)
	---> structural.bridge.Device::wait(long,int) [0 time(s)]

wait()
	---> structural.bridge.Device::wait() [0 time(s)]

notifyAll()
	---> structural.bridge.Device::notifyAll() [0 time(s)]

setChannel(int)
	---> structural.bridge.Device::setChannel(int) [0 time(s)]

equals(java.lang.Object)
	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.bridge.Device::registerNatives() [0 time(s)]

setVolume(int)
	---> structural.bridge.Device::setVolume(int) [0 time(s)]

notify()
	---> structural.bridge.Device::notify() [0 time(s)]

enable()
	---> structural.bridge.Device::enable() [0 time(s)]

hashCode()
	---> structural.bridge.Device::hashCode() [0 time(s)]

getVolume()
	---> structural.bridge.Device::getVolume() [0 time(s)]

getChannel()
	---> structural.bridge.Device::getChannel() [0 time(s)]

disable()
	---> structural.bridge.Device::disable() [0 time(s)]

isEnabled()
	---> structural.bridge.Device::isEnabled() [0 time(s)]

finalize()
	---> structural.bridge.Device::finalize() [0 time(s)]

toString()
	---> structural.bridge.Device::toString() [0 time(s)]

clone()
	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Radio::getName()
	---> structural.bridge.Device::getName() [0 time(s)]

getClass()
	---> structural.bridge.Device::getClass() [0 time(s)]

wait(long)
	---> structural.bridge.Device::wait(long) [0 time(s)]

wait(long,int)
	---> structural.bridge.Device::wait(long,int) [0 time(s)]

wait()
	---> structural.bridge.Device::wait() [0 time(s)]

notifyAll()
	---> structural.bridge.Device::notifyAll() [0 time(s)]

setChannel(int)
	---> structural.bridge.Device::setChannel(int) [0 time(s)]

equals(java.lang.Object)
	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.bridge.Device::registerNatives() [0 time(s)]

setVolume(int)
	---> structural.bridge.Device::setVolume(int) [0 time(s)]

notify()
	---> structural.bridge.Device::notify() [0 time(s)]

enable()
	---> structural.bridge.Device::enable() [0 time(s)]

hashCode()
	---> structural.bridge.Device::hashCode() [0 time(s)]

getVolume()
	---> structural.bridge.Device::getVolume() [0 time(s)]

getChannel()
	---> structural.bridge.Device::getChannel() [0 time(s)]

disable()
	---> structural.bridge.Device::disable() [0 time(s)]

isEnabled()
	---> structural.bridge.Device::isEnabled() [0 time(s)]

finalize()
	---> structural.bridge.Device::finalize() [0 time(s)]

toString()
	---> structural.bridge.Device::toString() [0 time(s)]

clone()
	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Remote::getClass()
	---> structural.bridge.Device::getClass() [0 time(s)]

wait(long)
	---> structural.bridge.Device::wait(long) [0 time(s)]

wait(long,int)
	---> structural.bridge.Device::wait(long,int) [0 time(s)]

wait()
	---> structural.bridge.Device::wait() [0 time(s)]

togglePower()
	---> structural.bridge.Device::togglePower() [5 time(s)]

notifyAll()
	---> structural.bridge.Device::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

channelDown()
	---> structural.bridge.Device::channelDown() [3 time(s)]

registerNatives()
	---> structural.bridge.Device::registerNatives() [0 time(s)]

notify()
	---> structural.bridge.Device::notify() [0 time(s)]

hashCode()
	---> structural.bridge.Device::hashCode() [0 time(s)]

volumeDown()
	---> structural.bridge.Device::volumeDown() [3 time(s)]

volumeUp()
	---> structural.bridge.Device::volumeUp() [3 time(s)]

finalize()
	---> structural.bridge.Device::finalize() [0 time(s)]

toString()
	---> structural.bridge.Device::toString() [0 time(s)]

clone()
	---> structural.bridge.Device::clone() [0 time(s)]

channelUp()
	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV::getName()
	---> structural.bridge.Device::getName() [0 time(s)]

getClass()
	---> structural.bridge.Device::getClass() [0 time(s)]

wait(long)
	---> structural.bridge.Device::wait(long) [0 time(s)]

wait(long,int)
	---> structural.bridge.Device::wait(long,int) [0 time(s)]

wait()
	---> structural.bridge.Device::wait() [0 time(s)]

notifyAll()
	---> structural.bridge.Device::notifyAll() [0 time(s)]

setChannel(int)
	---> structural.bridge.Device::setChannel(int) [0 time(s)]

equals(java.lang.Object)
	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.bridge.Device::registerNatives() [0 time(s)]

setVolume(int)
	---> structural.bridge.Device::setVolume(int) [0 time(s)]

notify()
	---> structural.bridge.Device::notify() [0 time(s)]

enable()
	---> structural.bridge.Device::enable() [0 time(s)]

hashCode()
	---> structural.bridge.Device::hashCode() [0 time(s)]

getVolume()
	---> structural.bridge.Device::getVolume() [0 time(s)]

getChannel()
	---> structural.bridge.Device::getChannel() [0 time(s)]

disable()
	---> structural.bridge.Device::disable() [0 time(s)]

isEnabled()
	---> structural.bridge.Device::isEnabled() [0 time(s)]

finalize()
	---> structural.bridge.Device::finalize() [0 time(s)]

toString()
	---> structural.bridge.Device::toString() [0 time(s)]

clone()
	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Test::getClass()
	---> structural.bridge.Device::getClass() [0 time(s)]

wait(long)
	---> structural.bridge.Device::wait(long) [0 time(s)]

wait(long,int)
	---> structural.bridge.Device::wait(long,int) [0 time(s)]

wait()
	---> structural.bridge.Device::wait() [0 time(s)]

notifyAll()
	---> structural.bridge.Device::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

registerNatives()
	---> structural.bridge.Device::registerNatives() [0 time(s)]

notify()
	---> structural.bridge.Device::notify() [0 time(s)]

hashCode()
	---> structural.bridge.Device::hashCode() [0 time(s)]

ordinaryRemoteTest(structural.bridge.Remote)
	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

advancedRemoteTest(structural.bridge.AdvancedRemote)
	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

finalize()
	---> structural.bridge.AdvancedRemote::finalize() [0 time(s)]

toString()
	---> structural.bridge.AdvancedRemote::toString() [0 time(s)]

clone()
	---> structural.bridge.AdvancedRemote::clone() [0 time(s)]

structural.composite.DiscJockey::getClass()
	---> structural.bridge.AdvancedRemote::getClass() [0 time(s)]

wait(long)
	---> structural.bridge.AdvancedRemote::wait(long) [0 time(s)]

wait(long,int)
	---> structural.bridge.AdvancedRemote::wait(long,int) [0 time(s)]

wait()
	---> structural.bridge.AdvancedRemote::wait() [0 time(s)]

notifyAll()
	---> structural.bridge.AdvancedRemote::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.bridge.AdvancedRemote::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.bridge.AdvancedRemote::registerNatives() [0 time(s)]

notify()
	---> structural.bridge.AdvancedRemote::notify() [0 time(s)]

hashCode()
	---> structural.bridge.AdvancedRemote::hashCode() [0 time(s)]

getSongList()
	---> structural.bridge.AdvancedRemote::getSongList() [0 time(s)]

displaySongList()
	---> structural.composite.SongComponent::displaySongList() [0 time(s)]

finalize()
	---> structural.composite.SongComponent::finalize() [0 time(s)]

toString()
	---> structural.composite.SongComponent::toString() [0 time(s)]

clone()
	---> structural.composite.SongComponent::clone() [0 time(s)]

structural.composite.Song::getClass()
	---> structural.composite.SongComponent::getClass() [0 time(s)]

wait(long)
	---> structural.composite.SongComponent::wait(long) [0 time(s)]

wait(long,int)
	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

wait()
	---> structural.composite.SongComponent::wait() [0 time(s)]

add(structural.composite.SongComponent)
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

getInfo()
	---> structural.composite.Song::getInfo() [2 time(s)]

notifyAll()
	---> structural.composite.Song::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.composite.Song::registerNatives() [0 time(s)]

getSongName()
	---> structural.composite.Song::getSongName() [0 time(s)]

notify()
	---> structural.composite.Song::notify() [0 time(s)]

remove(structural.composite.SongComponent)
	---> structural.composite.Song::remove(structural.composite.SongComponent) [0 time(s)]

hashCode()
	---> structural.composite.Song::hashCode() [0 time(s)]

getBandName()
	---> structural.composite.Song::getBandName() [0 time(s)]

getComponent(int)
	---> structural.composite.Song::getComponent(int) [0 time(s)]

displayInfo()
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

finalize()
	---> structural.composite.SongComponent::finalize() [0 time(s)]

toString()
	---> structural.composite.SongComponent::toString() [0 time(s)]

clone()
	---> structural.composite.SongComponent::clone() [0 time(s)]

getReleaseYear()
	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongComponent::getClass()
	---> structural.composite.SongComponent::getClass() [0 time(s)]

wait(long)
	---> structural.composite.SongComponent::wait(long) [0 time(s)]

wait(long,int)
	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

wait()
	---> structural.composite.SongComponent::wait() [0 time(s)]

add(structural.composite.SongComponent)
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

getInfo()
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

notifyAll()
	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.composite.SongComponent::registerNatives() [0 time(s)]

getSongName()
	---> structural.composite.SongComponent::getSongName() [0 time(s)]

notify()
	---> structural.composite.SongComponent::notify() [0 time(s)]

remove(structural.composite.SongComponent)
	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

hashCode()
	---> structural.composite.SongComponent::hashCode() [0 time(s)]

getBandName()
	---> structural.composite.SongComponent::getBandName() [0 time(s)]

getComponent(int)
	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

displayInfo()
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

finalize()
	---> structural.composite.SongComponent::finalize() [0 time(s)]

toString()
	---> structural.composite.SongComponent::toString() [0 time(s)]

clone()
	---> structural.composite.SongComponent::clone() [0 time(s)]

getReleaseYear()
	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongGroup::getClass()
	---> structural.composite.SongComponent::getClass() [0 time(s)]

wait(long)
	---> structural.composite.SongComponent::wait(long) [0 time(s)]

wait(long,int)
	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

wait()
	---> structural.composite.SongComponent::wait() [0 time(s)]

add(structural.composite.SongComponent)
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

getInfo()
	---> structural.composite.SongComponent::getInfo() [4 time(s)]

notifyAll()
	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.composite.SongComponent::registerNatives() [0 time(s)]

getSongName()
	---> structural.composite.SongComponent::getSongName() [0 time(s)]

notify()
	---> structural.composite.SongComponent::notify() [0 time(s)]

remove(structural.composite.SongComponent)
	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

getGroupName()
	---> structural.composite.SongComponent::getGroupName() [0 time(s)]

hashCode()
	---> structural.composite.SongComponent::hashCode() [0 time(s)]

getBandName()
	---> structural.composite.SongComponent::getBandName() [0 time(s)]

getComponent(int)
	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

getGroupDescription()
	---> structural.composite.SongComponent::getGroupDescription() [0 time(s)]

displayInfo()
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

finalize()
	---> structural.composite.SongComponent::finalize() [0 time(s)]

toString()
	---> structural.composite.SongComponent::toString() [0 time(s)]

clone()
	---> structural.composite.SongComponent::clone() [0 time(s)]

getReleaseYear()
	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongListGenerator::getClass()
	---> structural.composite.SongComponent::getClass() [0 time(s)]

wait(long)
	---> structural.composite.SongComponent::wait(long) [0 time(s)]

wait(long,int)
	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

wait()
	---> structural.composite.SongComponent::wait() [0 time(s)]

notifyAll()
	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

registerNatives()
	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

notify()
	---> structural.composite.DiscJockey::notify() [0 time(s)]

hashCode()
	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

finalize()
	---> structural.composite.DiscJockey::finalize() [0 time(s)]

toString()
	---> structural.composite.DiscJockey::toString() [0 time(s)]

clone()
	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.composite.Test::getClass()
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

wait(long)
	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

wait(long,int)
	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

wait()
	---> structural.composite.DiscJockey::wait() [0 time(s)]

notifyAll()
	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

registerNatives()
	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

notify()
	---> structural.composite.DiscJockey::notify() [0 time(s)]

hashCode()
	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

finalize()
	---> structural.composite.DiscJockey::finalize() [0 time(s)]

toString()
	---> structural.composite.DiscJockey::toString() [0 time(s)]

clone()
	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.Beverage::getClass()
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

wait(long)
	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

wait(long,int)
	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

wait()
	---> structural.composite.DiscJockey::wait() [0 time(s)]

notifyAll()
	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

description()
	---> structural.composite.DiscJockey::description() [0 time(s)]

equals(java.lang.Object)
	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

notify()
	---> structural.composite.DiscJockey::notify() [0 time(s)]

hashCode()
	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

price()
	---> structural.composite.DiscJockey::price() [0 time(s)]

finalize()
	---> structural.composite.DiscJockey::finalize() [0 time(s)]

toString()
	---> structural.composite.DiscJockey::toString() [0 time(s)]

clone()
	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.BeverageDecorator::getClass()
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

wait(long)
	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

wait(long,int)
	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

wait()
	---> structural.composite.DiscJockey::wait() [0 time(s)]

notifyAll()
	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

description()
	---> structural.composite.DiscJockey::description() [0 time(s)]

equals(java.lang.Object)
	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

notify()
	---> structural.composite.DiscJockey::notify() [0 time(s)]

hashCode()
	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

price()
	---> structural.composite.DiscJockey::price() [0 time(s)]

finalize()
	---> structural.composite.DiscJockey::finalize() [0 time(s)]

toString()
	---> structural.composite.DiscJockey::toString() [0 time(s)]

clone()
	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.CaramelDecorator::getClass()
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

wait(long)
	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

wait(long,int)
	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

wait()
	---> structural.composite.DiscJockey::wait() [0 time(s)]

notifyAll()
	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

description()
	---> structural.decorator.Beverage::description() [0 time(s)]

equals(java.lang.Object)
	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

notify()
	---> structural.decorator.Beverage::notify() [0 time(s)]

hashCode()
	---> structural.decorator.Beverage::hashCode() [0 time(s)]

price()
	---> structural.decorator.Beverage::price() [0 time(s)]

finalize()
	---> structural.decorator.Beverage::finalize() [0 time(s)]

toString()
	---> structural.decorator.Beverage::toString() [0 time(s)]

clone()
	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Espresso::getClass()
	---> structural.decorator.Beverage::getClass() [0 time(s)]

wait(long)
	---> structural.decorator.Beverage::wait(long) [0 time(s)]

wait(long,int)
	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

wait()
	---> structural.decorator.Beverage::wait() [0 time(s)]

notifyAll()
	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

description()
	---> structural.decorator.Beverage::description() [0 time(s)]

equals(java.lang.Object)
	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

notify()
	---> structural.decorator.Beverage::notify() [0 time(s)]

hashCode()
	---> structural.decorator.Beverage::hashCode() [0 time(s)]

price()
	---> structural.decorator.Beverage::price() [0 time(s)]

finalize()
	---> structural.decorator.Beverage::finalize() [0 time(s)]

toString()
	---> structural.decorator.Beverage::toString() [0 time(s)]

clone()
	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.IBeverage::price()
	---> structural.decorator.Beverage::price() [0 time(s)]

description()
	---> structural.decorator.Beverage::description() [0 time(s)]

structural.decorator.SugarDecorator::getClass()
	---> structural.decorator.Beverage::getClass() [0 time(s)]

wait(long)
	---> structural.decorator.Beverage::wait(long) [0 time(s)]

wait(long,int)
	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

wait()
	---> structural.decorator.Beverage::wait() [0 time(s)]

notifyAll()
	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

description()
	---> structural.decorator.Beverage::description() [1 time(s)]

equals(java.lang.Object)
	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

notify()
	---> structural.decorator.Beverage::notify() [0 time(s)]

hashCode()
	---> structural.decorator.Beverage::hashCode() [0 time(s)]

price()
	---> structural.decorator.Beverage::price() [1 time(s)]

finalize()
	---> structural.decorator.Beverage::finalize() [0 time(s)]

toString()
	---> structural.decorator.Beverage::toString() [0 time(s)]

clone()
	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Tea::getClass()
	---> structural.decorator.Beverage::getClass() [0 time(s)]

wait(long)
	---> structural.decorator.Beverage::wait(long) [0 time(s)]

wait(long,int)
	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

wait()
	---> structural.decorator.Beverage::wait() [0 time(s)]

notifyAll()
	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

description()
	---> structural.decorator.Beverage::description() [0 time(s)]

equals(java.lang.Object)
	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

notify()
	---> structural.decorator.Beverage::notify() [0 time(s)]

hashCode()
	---> structural.decorator.Beverage::hashCode() [0 time(s)]

price()
	---> structural.decorator.Beverage::price() [0 time(s)]

finalize()
	---> structural.decorator.Beverage::finalize() [0 time(s)]

toString()
	---> structural.decorator.Beverage::toString() [0 time(s)]

clone()
	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Test::getClass()
	---> structural.decorator.Beverage::getClass() [0 time(s)]

wait(long)
	---> structural.decorator.Beverage::wait(long) [0 time(s)]

wait(long,int)
	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

wait()
	---> structural.decorator.Beverage::wait() [0 time(s)]

notifyAll()
	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

displayOrder(structural.decorator.Beverage)
	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

registerNatives()
	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

notify()
	---> structural.decorator.Beverage::notify() [0 time(s)]

hashCode()
	---> structural.decorator.Beverage::hashCode() [0 time(s)]

beveragesMenu()
	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

selectBeverage(java.util.Scanner)
	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner)
	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

orderBeverage()
	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

finalize()
	---> structural.decorator.Beverage::finalize() [0 time(s)]

toString()
	---> structural.decorator.Beverage::toString() [0 time(s)]

clone()
	---> structural.decorator.Beverage::clone() [0 time(s)]

additionalIngredientsMenu()
	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount::getClass()
	---> structural.decorator.Beverage::getClass() [0 time(s)]

wait(long)
	---> structural.decorator.Beverage::wait(long) [0 time(s)]

wait(long,int)
	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

wait()
	---> structural.decorator.Beverage::wait() [0 time(s)]

notifyAll()
	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

setNumber(int)
	---> structural.decorator.Beverage::setNumber(int) [0 time(s)]

registerNatives()
	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

notify()
	---> structural.decorator.Beverage::notify() [0 time(s)]

getNumber()
	---> structural.decorator.Beverage::getNumber() [0 time(s)]

setSecurityCode(int)
	---> structural.decorator.Beverage::setSecurityCode(int) [0 time(s)]

hashCode()
	---> structural.decorator.Beverage::hashCode() [0 time(s)]

getBalance()
	---> structural.decorator.Beverage::getBalance() [0 time(s)]

getSecurityCode()
	---> structural.decorator.Beverage::getSecurityCode() [0 time(s)]

finalize()
	---> structural.decorator.Beverage::finalize() [0 time(s)]

toString()
	---> structural.decorator.Beverage::toString() [0 time(s)]

clone()
	---> structural.decorator.Beverage::clone() [0 time(s)]

setBalance(double)
	---> structural.decorator.Beverage::setBalance(double) [0 time(s)]

structural.facade.BankAccountBalanceSystem::getClass()
	---> structural.decorator.Beverage::getClass() [0 time(s)]

wait(long)
	---> structural.decorator.Beverage::wait(long) [0 time(s)]

wait(long,int)
	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

wait()
	---> structural.decorator.Beverage::wait() [0 time(s)]

notifyAll()
	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

canWithdraw(double)
	---> structural.facade.BankAccount::canWithdraw(double) [0 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

getAccountBalance()
	---> structural.facade.BankAccount::getAccountBalance() [0 time(s)]

notify()
	---> structural.facade.BankAccount::notify() [0 time(s)]

hashCode()
	---> structural.facade.BankAccount::hashCode() [0 time(s)]

deposit(double)
	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

finalize()
	---> structural.facade.BankAccountBalanceSystem::finalize() [0 time(s)]

toString()
	---> structural.facade.BankAccountBalanceSystem::toString() [0 time(s)]

clone()
	---> structural.facade.BankAccountBalanceSystem::clone() [0 time(s)]

withdraw(double)
	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

structural.facade.BankAccountFacade::getClass()
	---> structural.facade.BankAccountBalanceSystem::getClass() [0 time(s)]

wait(long)
	---> structural.facade.BankAccountBalanceSystem::wait(long) [0 time(s)]

wait(long,int)
	---> structural.facade.BankAccountBalanceSystem::wait(long,int) [0 time(s)]

wait()
	---> structural.facade.BankAccountBalanceSystem::wait() [0 time(s)]

notifyAll()
	---> structural.facade.BankAccountBalanceSystem::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccountBalanceSystem::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.facade.BankAccountBalanceSystem::registerNatives() [0 time(s)]

depositCash(double)
	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

notify()
	---> structural.facade.BankAccountBalanceSystem::notify() [0 time(s)]

hashCode()
	---> structural.facade.BankAccountBalanceSystem::hashCode() [0 time(s)]

getSecurityCode()
	---> structural.facade.BankAccountBalanceSystem::getSecurityCode() [0 time(s)]

getAccountNumber()
	---> structural.facade.BankAccountBalanceSystem::getAccountNumber() [0 time(s)]

fetchBankAccount()
	---> structural.facade.BankAccountBalanceSystem::fetchBankAccount() [0 time(s)]

withdrawCash(double)
	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

finalize()
	---> structural.facade.BankAccountBalanceSystem::finalize() [0 time(s)]

toString()
	---> structural.facade.BankAccountBalanceSystem::toString() [0 time(s)]

clone()
	---> structural.facade.BankAccountBalanceSystem::clone() [0 time(s)]

structural.facade.BankAccountNumberChecker::getClass()
	---> structural.facade.BankAccountBalanceSystem::getClass() [0 time(s)]

wait(long)
	---> structural.facade.BankAccountBalanceSystem::wait(long) [0 time(s)]

wait(long,int)
	---> structural.facade.BankAccountBalanceSystem::wait(long,int) [0 time(s)]

wait()
	---> structural.facade.BankAccountBalanceSystem::wait() [0 time(s)]

notifyAll()
	---> structural.facade.BankAccountBalanceSystem::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccountBalanceSystem::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.facade.BankAccountBalanceSystem::registerNatives() [0 time(s)]

match(int)
	---> structural.facade.BankAccountNumberChecker::match(int) [0 time(s)]

notify()
	---> structural.facade.BankAccountNumberChecker::notify() [0 time(s)]

hashCode()
	---> structural.facade.BankAccountNumberChecker::hashCode() [0 time(s)]

getAccountNumber()
	---> structural.facade.BankAccount::getAccountNumber() [0 time(s)]

finalize()
	---> structural.facade.BankAccount::finalize() [0 time(s)]

toString()
	---> structural.facade.BankAccount::toString() [0 time(s)]

clone()
	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker::getClass()
	---> structural.facade.BankAccount::getClass() [0 time(s)]

wait(long)
	---> structural.facade.BankAccount::wait(long) [0 time(s)]

wait(long,int)
	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

wait()
	---> structural.facade.BankAccount::wait() [0 time(s)]

notifyAll()
	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

match(int)
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

notify()
	---> structural.facade.BankAccountSecurityCodeChecker::notify() [0 time(s)]

hashCode()
	---> structural.facade.BankAccountSecurityCodeChecker::hashCode() [0 time(s)]

getAccountSecurityCode()
	---> structural.facade.BankAccount::getAccountSecurityCode() [0 time(s)]

finalize()
	---> structural.facade.BankAccount::finalize() [0 time(s)]

toString()
	---> structural.facade.BankAccount::toString() [0 time(s)]

clone()
	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.BankAccountWelcomeWindow::getClass()
	---> structural.facade.BankAccount::getClass() [0 time(s)]

wait(long)
	---> structural.facade.BankAccount::wait(long) [0 time(s)]

wait(long,int)
	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

wait()
	---> structural.facade.BankAccount::wait() [0 time(s)]

notifyAll()
	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

notify()
	---> structural.facade.BankAccount::notify() [0 time(s)]

hashCode()
	---> structural.facade.BankAccount::hashCode() [0 time(s)]

setWelcomeMessage()
	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

finalize()
	---> structural.facade.BankAccount::finalize() [0 time(s)]

toString()
	---> structural.facade.BankAccount::toString() [0 time(s)]

clone()
	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.Test::getClass()
	---> structural.facade.BankAccount::getClass() [0 time(s)]

wait(long)
	---> structural.facade.BankAccount::wait(long) [0 time(s)]

wait(long,int)
	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

wait()
	---> structural.facade.BankAccount::wait() [0 time(s)]

notifyAll()
	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

registerNatives()
	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

notify()
	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

hashCode()
	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

finalize()
	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

toString()
	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

clone()
	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Circle::getClass()
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

wait(long)
	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

wait(long,int)
	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

wait()
	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

notifyAll()
	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

draw(structural.flyweight.Position)
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

getRadius()
	---> structural.facade.BankAccountFacade::getRadius() [0 time(s)]

notify()
	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

setRadius(int)
	---> structural.facade.BankAccountFacade::setRadius(int) [0 time(s)]

hashCode()
	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

finalize()
	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

toString()
	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

clone()
	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Position::getClass()
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

wait(long)
	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

wait(long,int)
	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

wait()
	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

setX(double)
	---> structural.facade.BankAccountFacade::setX(double) [0 time(s)]

notifyAll()
	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

setY(double)
	---> structural.facade.BankAccountFacade::setY(double) [0 time(s)]

notify()
	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

hashCode()
	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

getX()
	---> structural.facade.BankAccountFacade::getX() [0 time(s)]

getY()
	---> structural.facade.BankAccountFacade::getY() [0 time(s)]

toString()
	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

finalize()
	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

clone()
	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Shape::draw(structural.flyweight.Position)
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.ShapeFactory::getClass()
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

wait(long)
	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

wait(long,int)
	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

wait()
	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

getCircle(java.lang.String)
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

notifyAll()
	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

notify()
	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

hashCode()
	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

finalize()
	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

toString()
	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

clone()
	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Test::getClass()
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

wait(long)
	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

wait(long,int)
	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

wait()
	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

notifyAll()
	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

registerNatives()
	---> structural.flyweight.Circle::registerNatives() [0 time(s)]

notify()
	---> structural.flyweight.Circle::notify() [0 time(s)]

getRandomRadius()
	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

hashCode()
	---> structural.flyweight.Circle::hashCode() [0 time(s)]

getRandomX()
	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

getRandomY()
	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

finalize()
	---> structural.flyweight.Circle::finalize() [0 time(s)]

toString()
	---> structural.flyweight.Circle::toString() [0 time(s)]

clone()
	---> structural.flyweight.Circle::clone() [0 time(s)]

getRandomColor()
	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet::connectTo(java.lang.String)
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

structural.proxy.ProxyInternet::getClass()
	---> structural.flyweight.Circle::getClass() [0 time(s)]

wait(long)
	---> structural.flyweight.Circle::wait(long) [0 time(s)]

wait(long,int)
	---> structural.flyweight.Circle::wait(long,int) [0 time(s)]

wait()
	---> structural.flyweight.Circle::wait() [0 time(s)]

notifyAll()
	---> structural.flyweight.Circle::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.flyweight.Circle::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.flyweight.Circle::registerNatives() [0 time(s)]

notify()
	---> structural.flyweight.Circle::notify() [0 time(s)]

hashCode()
	---> structural.flyweight.Circle::hashCode() [0 time(s)]

finalize()
	---> structural.flyweight.Circle::finalize() [0 time(s)]

toString()
	---> structural.flyweight.Circle::toString() [0 time(s)]

clone()
	---> structural.flyweight.Circle::clone() [0 time(s)]

connectTo(java.lang.String)
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.RealInternet::getClass()
	---> structural.proxy.Internet::getClass() [0 time(s)]

wait(long)
	---> structural.proxy.Internet::wait(long) [0 time(s)]

wait(long,int)
	---> structural.proxy.Internet::wait(long,int) [0 time(s)]

wait()
	---> structural.proxy.Internet::wait() [0 time(s)]

notifyAll()
	---> structural.proxy.Internet::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.proxy.Internet::equals(java.lang.Object) [0 time(s)]

registerNatives()
	---> structural.proxy.Internet::registerNatives() [0 time(s)]

notify()
	---> structural.proxy.Internet::notify() [0 time(s)]

hashCode()
	---> structural.proxy.Internet::hashCode() [0 time(s)]

finalize()
	---> structural.proxy.Internet::finalize() [0 time(s)]

toString()
	---> structural.proxy.Internet::toString() [0 time(s)]

clone()
	---> structural.proxy.Internet::clone() [0 time(s)]

connectTo(java.lang.String)
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test::getClass()
	---> structural.proxy.Internet::getClass() [0 time(s)]

wait(long)
	---> structural.proxy.Internet::wait(long) [0 time(s)]

wait(long,int)
	---> structural.proxy.Internet::wait(long,int) [0 time(s)]

wait()
	---> structural.proxy.Internet::wait() [0 time(s)]

notifyAll()
	---> structural.proxy.Internet::notifyAll() [0 time(s)]

equals(java.lang.Object)
	---> structural.proxy.Internet::equals(java.lang.Object) [0 time(s)]

main(java.lang.String[])
	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]

registerNatives()
	---> structural.proxy.Internet::registerNatives() [0 time(s)]

notify()
	---> structural.proxy.Internet::notify() [0 time(s)]

hashCode()
	---> structural.proxy.Internet::hashCode() [0 time(s)]

finalize()
	---> structural.proxy.Internet::finalize() [0 time(s)]

toString()
	---> structural.proxy.Internet::toString() [0 time(s)]

clone()
	---> structural.proxy.Internet::clone() [0 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger::getClass()
wait(long)
wait(long,int)
wait()
write(behavioral.chain_of_responsibility.LogRequest)
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
setNextLogger(behavioral.chain_of_responsibility.ILogger)
finalize()
toString()
clone()
behavioral.chain_of_responsibility.ErrorLogger::getClass()
wait(long)
wait(long,int)
wait()
write(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
setNextLogger(behavioral.chain_of_responsibility.ILogger)
finalize()
toString()
clone()
behavioral.chain_of_responsibility.FileLogger::getClass()
wait(long)
wait(long,int)
wait()
write(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
setNextLogger(behavioral.chain_of_responsibility.ILogger)
getFilePath()
finalize()
toString()
clone()
setFilePath(java.lang.String)
behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest)
setNextLogger(behavioral.chain_of_responsibility.ILogger)
behavioral.chain_of_responsibility.LogRequest::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getMessage()
notify()
setLevel(behavioral.chain_of_responsibility.LogRequestLevel)
setMessage(java.lang.String)
getLevel()
hashCode()
finalize()
toString()
clone()
behavioral.chain_of_responsibility.LogRequestLevel::value()
behavioral.chain_of_responsibility.Logger::getClass()
wait(long)
wait(long,int)
wait()
write(behavioral.chain_of_responsibility.LogRequest)
log(behavioral.chain_of_responsibility.LogRequest)
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
setNextLogger(behavioral.chain_of_responsibility.ILogger)
finalize()
toString()
clone()
behavioral.chain_of_responsibility.StandardLogRequestLevel::clone()
compareTo(java.lang.Enum)
describeConstable()
equals(java.lang.Object)
finalize()
getDeclaringClass()
hashCode()
name()
ordinal()
readObject(java.io.ObjectInputStream)
readObjectNoData()
toString()
value()
valueOf(java.lang.Class,java.lang.String)
valueOf(java.lang.String)
values()
behavioral.chain_of_responsibility.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

registerNatives()
notify()
hashCode()
getChainOfLoggers()
	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

finalize()
toString()
clone()
behavioral.command.Command::getName()
undo()
execute()
behavioral.command.CommandManager::getClass()
wait(long)
wait(long,int)
wait()
getRegistryKey(java.lang.Class)
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
history()
	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

redo()
	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

notify()
execute(behavioral.command.Command)
	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

hashCode()
undo()
	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

behavioral.command.SwitchChannelCommand::getName()
	---> behavioral.command.TV::getName() [0 time(s)]

getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute()
	---> behavioral.command.TV::execute() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

hashCode()
undo()
	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

finalize()
toString()
clone()
behavioral.command.SwitchOffCommand::getName()
	---> behavioral.command.TV::getName() [1 time(s)]

getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute()
	---> behavioral.command.TV::execute() [1 time(s)]

hashCode()
undo()
	---> behavioral.command.TV::undo() [1 time(s)]

finalize()
toString()
clone()
behavioral.command.SwitchOnCommand::getName()
	---> behavioral.command.TV::getName() [1 time(s)]

getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute()
	---> behavioral.command.TV::execute() [1 time(s)]

hashCode()
undo()
	---> behavioral.command.TV::undo() [1 time(s)]

finalize()
toString()
clone()
behavioral.command.TV::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
switchChannel(int)
registerNatives()
notify()
switchOff()
hashCode()
getChannel()
isOn()
finalize()
toString()
clone()
switchOn()
behavioral.command.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.command.TV::main(java.lang.String[]) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.interpreter.AndExpression::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

finalize()
toString()
clone()
behavioral.interpreter.BinaryExpression::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
interpret(java.lang.String)
finalize()
toString()
clone()
behavioral.interpreter.Expression::interpret(java.lang.String)
behavioral.interpreter.OrExpression::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

finalize()
toString()
clone()
behavioral.interpreter.TerminalExpression::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
interpret(java.lang.String)
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

finalize()
toString()
clone()
behavioral.interpreter.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
getIsFemaleExpression()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

registerNatives()
notify()
hashCode()
getIsMarriedWomanExpression()
	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

finalize()
toString()
clone()
behavioral.iterator.DiscJockey::getClass()
wait(long)
wait(long,int)
wait()
displaySongs()
	---> structural.composite.Song::displaySongs() [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.iterator.Song::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getSongName()
notify()
hashCode()
getBandName()
toString()
	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

finalize()
clone()
getYearReleased()
behavioral.iterator.SongAggregate::iterator()
spliterator()
forEach(java.util.function.Consumer)
addSong(java.lang.String,java.lang.String,int)
behavioral.iterator.SongArray::getClass()
wait(long)
wait(long,int)
wait()
spliterator()
notifyAll()
forEach(java.util.function.Consumer)
equals(java.lang.Object)
length()
registerNatives()
notify()
hashCode()
iterator()
	---> structural.composite.Song::iterator() [0 time(s)]

	---> structural.composite.Song::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

getFilledArray()
	---> behavioral.iterator.SongArray::getFilledArray() [0 time(s)]

finalize()
toString()
clone()
addSong(java.lang.String,java.lang.String,int)
behavioral.iterator.SongHashtable::getClass()
wait(long)
wait(long,int)
wait()
spliterator()
notifyAll()
forEach(java.util.function.Consumer)
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
iterator()
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

finalize()
toString()
clone()
addSong(java.lang.String,java.lang.String,int)
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList::getClass()
wait(long)
wait(long,int)
wait()
spliterator()
notifyAll()
forEach(java.util.function.Consumer)
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
iterator()
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

finalize()
toString()
clone()
addSong(java.lang.String,java.lang.String,int)
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.mediator.ChatRoom::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
addUser(behavioral.mediator.User)
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [0 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
sendMessage(java.lang.String,java.lang.String)
	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

finalize()
toString()
clone()
behavioral.mediator.ChatUser::getName()
getClass()
wait(long)
wait(long,int)
wait()
receive(java.lang.String)
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [0 time(s)]

notifyAll()
equals(java.lang.Object)
getId()
registerNatives()
notify()
hashCode()
getRoom()
finalize()
toString()
clone()
send(java.lang.String,java.lang.String)
	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

behavioral.mediator.IChatRoom::sendMessage(java.lang.String,java.lang.String)
addUser(behavioral.mediator.User)
behavioral.mediator.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.mediator.User::getName()
getClass()
wait(long)
wait(long,int)
wait()
receive(java.lang.String)
notifyAll()
equals(java.lang.Object)
getId()
registerNatives()
notify()
hashCode()
getRoom()
finalize()
toString()
clone()
send(java.lang.String,java.lang.String)
behavioral.memento.CareTaker::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
addMemento(behavioral.memento.Memento)
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

get(int)
	---> behavioral.mediator.User::get(int) [0 time(s)]

finalize()
toString()
clone()
behavioral.memento.Memento::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
getState()
finalize()
toString()
clone()
behavioral.memento.Originator::getClass()
wait(long)
wait(long,int)
wait()
restoreState(behavioral.memento.Memento)
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

setState(java.lang.String)
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
getState()
externalizeState()
finalize()
toString()
clone()
behavioral.memento.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.observer.Observer::update()
behavioral.observer.StockGrabber::getClass()
wait(long)
wait(long,int)
wait()
setGoogleStock(double)
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [0 time(s)]

notifyObserver()
	---> behavioral.observer.Observer::notifyObserver() [0 time(s)]

notifyAll()
getIBMStock()
equals(java.lang.Object)
unregister(behavioral.observer.Observer)
	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

registerNatives()
notify()
setAppleStock(double)
	---> behavioral.observer.StockGrabber::setAppleStock(double) [0 time(s)]

getGoogleStock()
hashCode()
setIBMStock(double)
	---> behavioral.observer.StockGrabber::setIBMStock(double) [0 time(s)]

getAppleStock()
register(behavioral.observer.Observer)
	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

finalize()
toString()
clone()
behavioral.observer.StockObserver::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
update()
	---> behavioral.observer.StockGrabber::update() [0 time(s)]

	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockObserver::update() [3 time(s)]

displayPrices()
	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

notify()
hashCode()
finalize()
toString()
clone()
behavioral.observer.Subject::notifyObserver()
register(behavioral.observer.Observer)
unregister(behavioral.observer.Observer)
behavioral.observer.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.state.ATMMachine::getClass()
getCashInMachine()
wait(long)
wait(long,int)
wait()
insertCard()
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

ejectCard()
	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

requestCash(int)
	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

notifyAll()
setATMState(behavioral.state.ATMState)
insertPin(int)
	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

equals(java.lang.Object)
registerNatives()
getATMState()
getNoCardState()
notify()
getHasCardState()
hashCode()
getNoCashState()
getCorrectPinState()
finalize()
toString()
clone()
setCashInMachine(int)
behavioral.state.ATMState::getClass()
wait(long)
wait(long,int)
wait()
insertCard()
ejectCard()
requestCash(int)
notifyAll()
insertPin(int)
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.state.CorrectPin::getClass()
wait(long)
wait(long,int)
wait()
insertCard()
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

ejectCard()
	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

requestCash(int)
	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

notifyAll()
insertPin(int)
	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.state.HasCard::getClass()
wait(long)
wait(long,int)
wait()
insertCard()
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

ejectCard()
	---> behavioral.state.ATMMachine::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

requestCash(int)
	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

notifyAll()
insertPin(int)
	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.state.IATMState::insertCard()
ejectCard()
requestCash(int)
insertPin(int)
behavioral.state.NoCard::getClass()
wait(long)
wait(long,int)
wait()
insertCard()
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

ejectCard()
	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

requestCash(int)
	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

notifyAll()
insertPin(int)
	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
defaultMessage()
	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

finalize()
toString()
clone()
behavioral.state.NoCash::getClass()
wait(long)
wait(long,int)
wait()
insertCard()
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

ejectCard()
	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

requestCash(int)
	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

notifyAll()
insertPin(int)
	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
defaultMessage()
	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

finalize()
toString()
clone()
behavioral.state.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.strategy.Add::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute(int,int)
hashCode()
finalize()
toString()
clone()
behavioral.strategy.ArithmeticOperation::execute(int,int)
behavioral.strategy.Calculator::getClass()
wait(long)
wait(long,int)
wait()
reset()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
getResult()
hashCode()
computeOperation(int,int)
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [0 time(s)]

setOperation(behavioral.strategy.ArithmeticOperation)
finalize()
toString()
clone()
behavioral.strategy.Divide::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute(int,int)
hashCode()
finalize()
toString()
clone()
behavioral.strategy.Modulo::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute(int,int)
hashCode()
finalize()
toString()
clone()
behavioral.strategy.Multiply::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute(int,int)
hashCode()
finalize()
toString()
clone()
behavioral.strategy.Subtract::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
execute(int,int)
hashCode()
finalize()
toString()
clone()
behavioral.strategy.Test::getClass()
wait(long)
wait(long,int)
wait()
computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int)
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.template_method.Basketball::getClass()
play()
	---> behavioral.template_method.Game::play() [0 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
start()
	---> behavioral.template_method.Game::start() [0 time(s)]

registerNatives()
notify()
hashCode()
initialize()
	---> behavioral.template_method.Game::initialize() [0 time(s)]

finalize()
toString()
clone()
end()
	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football::getClass()
play()
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
start()
	---> behavioral.template_method.Game::start() [0 time(s)]

registerNatives()
notify()
hashCode()
initialize()
	---> behavioral.template_method.Game::initialize() [0 time(s)]

finalize()
toString()
clone()
end()
	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game::getClass()
play()
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
start()
registerNatives()
notify()
hashCode()
initialize()
finalize()
toString()
clone()
end()
behavioral.template_method.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
behavioral.visitor.Liquor::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
setPrice(double)
notifyAll()
equals(java.lang.Object)
getPrice()
registerNatives()
notify()
accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

hashCode()
finalize()
toString()
clone()
behavioral.visitor.Necessity::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
setPrice(double)
notifyAll()
equals(java.lang.Object)
getPrice()
registerNatives()
notify()
accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

hashCode()
finalize()
toString()
clone()
behavioral.visitor.Product::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
setPrice(double)
notifyAll()
equals(java.lang.Object)
getPrice()
registerNatives()
notify()
accept(behavioral.visitor.Visitor)
hashCode()
finalize()
toString()
clone()
behavioral.visitor.TaxHolidayVisitor::getClass()
wait(long)
wait(long,int)
wait()
getComputedTax()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
computeTax(behavioral.visitor.Product)
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

getTaxRate()
hashCode()
finalize()
toString()
clone()
visit(behavioral.visitor.Liquor)
	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [0 time(s)]

visit(behavioral.visitor.Tobacco)
	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

visit(behavioral.visitor.Necessity)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [0 time(s)]

behavioral.visitor.TaxVisitor::getClass()
wait(long)
wait(long,int)
wait()
getComputedTax()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
computeTax(behavioral.visitor.Product)
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

getTaxRate()
hashCode()
finalize()
toString()
clone()
visit(behavioral.visitor.Liquor)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

visit(behavioral.visitor.Tobacco)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

visit(behavioral.visitor.Necessity)
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor)
	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

finalize()
toString()
clone()
behavioral.visitor.Tobacco::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
setPrice(double)
notifyAll()
equals(java.lang.Object)
getPrice()
registerNatives()
notify()
accept(behavioral.visitor.Visitor)
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

hashCode()
finalize()
toString()
clone()
behavioral.visitor.Visitable::accept(behavioral.visitor.Visitor)
behavioral.visitor.Visitor::visit(behavioral.visitor.Liquor)
visit(behavioral.visitor.Tobacco)
visit(behavioral.visitor.Necessity)
creational.abstract_factory.AbstractShapeFactory::getClass()
wait(long)
wait(long,int)
wait()
createShape(creational.abstract_factory.ShapeType)
getRegistryKey(java.lang.Class)
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.Rectangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
draw()
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

notify()
hashCode()
finalize()
toString()
clone()
creational.abstract_factory.RoundedRectangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
draw()
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

notify()
hashCode()
finalize()
toString()
clone()
creational.abstract_factory.RoundedShapeFactory::getClass()
wait(long)
wait(long,int)
wait()
createShape(creational.abstract_factory.ShapeType)
getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.RoundedShapeType::clone()
compareTo(java.lang.Enum)
describeConstable()
equals(java.lang.Object)
finalize()
getDeclaringClass()
hashCode()
name()
ordinal()
readObject(java.io.ObjectInputStream)
readObjectNoData()
toString()
valueOf(java.lang.Class,java.lang.String)
valueOf(java.lang.String)
values()
creational.abstract_factory.RoundedTriangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
draw()
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

notify()
hashCode()
finalize()
toString()
clone()
creational.abstract_factory.Shape::draw()
creational.abstract_factory.ShapeFactoryType::clone()
compareTo(java.lang.Enum)
describeConstable()
equals(java.lang.Object)
finalize()
getDeclaringClass()
hashCode()
name()
ordinal()
readObject(java.io.ObjectInputStream)
readObjectNoData()
toString()
valueOf(java.lang.Class,java.lang.String)
valueOf(java.lang.String)
values()
creational.abstract_factory.ShapeProducer::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
createFactory(creational.abstract_factory.ShapeFactoryType)
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType::creational.abstract_factory.StandardShapeFactory::getClass()
wait(long)
wait(long,int)
wait()
createShape(creational.abstract_factory.ShapeType)
getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.StandardShapeType::clone()
compareTo(java.lang.Enum)
describeConstable()
equals(java.lang.Object)
finalize()
getDeclaringClass()
hashCode()
name()
ordinal()
readObject(java.io.ObjectInputStream)
readObjectNoData()
toString()
valueOf(java.lang.Class,java.lang.String)
valueOf(java.lang.String)
values()
creational.abstract_factory.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
creational.abstract_factory.Triangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
draw()
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

notify()
hashCode()
finalize()
toString()
clone()
creational.builder.IRobot::setTorso(java.lang.String)
setArms(java.lang.String)
setLegs(java.lang.String)
setHead(java.lang.String)
creational.builder.IRobotBuilder::buildArms()
buildHead()
getRobot()
buildTorso()
buildLegs()
creational.builder.OldRobotBuilder::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getRobot()
notify()
buildLegs()
	---> creational.builder.Robot::buildLegs() [0 time(s)]

buildArms()
	---> creational.builder.Robot::buildArms() [0 time(s)]

hashCode()
buildHead()
	---> creational.builder.Robot::buildHead() [0 time(s)]

finalize()
toString()
clone()
buildTorso()
	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.Robot::getClass()
wait(long)
wait(long,int)
wait()
setLegs(java.lang.String)
notifyAll()
equals(java.lang.Object)
setHead(java.lang.String)
registerNatives()
getTorso()
notify()
setTorso(java.lang.String)
hashCode()
setArms(java.lang.String)
getArms()
getHead()
toString()
	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

finalize()
clone()
getLegs()
creational.builder.RobotBuilder::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getRobot()
notify()
buildLegs()
buildArms()
hashCode()
buildHead()
finalize()
toString()
clone()
buildTorso()
creational.builder.RobotEngineer::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getRobot()
	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

notify()
hashCode()
constructRobot()
	---> creational.builder.IRobotBuilder::constructRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

setRobotBuilder(creational.builder.IRobotBuilder)
finalize()
toString()
clone()
creational.builder.SophisticatedRobotBuilder::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
getRobot()
notify()
buildLegs()
	---> creational.builder.Robot::buildLegs() [1 time(s)]

buildArms()
	---> creational.builder.Robot::buildArms() [1 time(s)]

hashCode()
buildHead()
	---> creational.builder.Robot::buildHead() [1 time(s)]

finalize()
toString()
clone()
buildTorso()
	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
creational.factory.BigUFOEnemyShip::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
getAmtDamage()
setAmtDamage(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
followHeroShip()
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

hashCode()
enemyShipShoots()
	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

displayEnemyShip()
	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

finalize()
toString()
clone()
creational.factory.EnemyShip::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
getAmtDamage()
setAmtDamage(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
followHeroShip()
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

hashCode()
enemyShipShoots()
	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

displayEnemyShip()
	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

finalize()
toString()
clone()
creational.factory.EnemyShipFactory::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
createEnemyShip(java.lang.String)
finalize()
toString()
clone()
creational.factory.EnemyShipTesting::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
doStuffEnemy(creational.factory.EnemyShip)
	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

finalize()
toString()
clone()
creational.factory.RocketEnemyShip::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
getAmtDamage()
setAmtDamage(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
followHeroShip()
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

hashCode()
enemyShipShoots()
	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

displayEnemyShip()
	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

finalize()
toString()
clone()
creational.factory.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

registerNatives()
notify()
hashCode()
doStuffEnemy(creational.factory.EnemyShip)
	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

finalize()
toString()
clone()
creational.factory.UFOEnemyShip::getName()
getClass()
wait(long)
wait(long,int)
wait()
setName(java.lang.String)
getAmtDamage()
setAmtDamage(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
followHeroShip()
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

hashCode()
enemyShipShoots()
	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

displayEnemyShip()
	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

finalize()
toString()
clone()
creational.prototype.Circle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
getId()
setPosition(creational.prototype.Position)
registerNatives()
draw()
	---> creational.factory.EnemyShip::draw() [0 time(s)]

getPosition()
notify()
hashCode()
getType()
setId(java.lang.String)
clone()
	---> creational.factory.EnemyShip::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

toString()
	---> creational.prototype.Shape::toString() [0 time(s)]

finalize()
creational.prototype.Position::getClass()
wait(long)
wait(long,int)
wait()
setX(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
setY(double)
notify()
hashCode()
getX()
getY()
clone()
	---> creational.prototype.Shape::clone() [0 time(s)]

toString()
	---> creational.prototype.Position::toString() [1 time(s)]

finalize()
creational.prototype.Rectangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
getId()
setPosition(creational.prototype.Position)
registerNatives()
draw()
	---> creational.prototype.Position::draw() [0 time(s)]

getPosition()
notify()
hashCode()
getType()
setId(java.lang.String)
clone()
	---> creational.prototype.Position::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

toString()
	---> creational.prototype.Shape::toString() [1 time(s)]

finalize()
creational.prototype.Shape::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
getId()
setPosition(creational.prototype.Position)
registerNatives()
draw()
getPosition()
notify()
hashCode()
getType()
setId(java.lang.String)
clone()
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

toString()
	---> creational.prototype.Shape::toString() [1 time(s)]

finalize()
creational.prototype.ShapeCache::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
getShape(java.lang.String)
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

hashCode()
displayCacheContent()
	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

finalize()
toString()
clone()
loadCache()
	---> creational.prototype.Circle::loadCache() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Triangle::loadCache() [3 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Rectangle::loadCache() [6 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

creational.prototype.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
creational.prototype.Triangle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
getId()
setPosition(creational.prototype.Position)
registerNatives()
draw()
	---> creational.prototype.Shape::draw() [0 time(s)]

getPosition()
notify()
hashCode()
getType()
setId(java.lang.String)
clone()
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

toString()
	---> creational.prototype.Shape::toString() [1 time(s)]

finalize()
creational.singleton.ExtendedSingleton::getClass()
wait(long)
wait(long,int)
wait()
getRegistryKey(java.lang.Class)
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.ExtendedSingleton2::getClass()
wait(long)
wait(long,int)
wait()
getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.Singleton::getClass()
wait(long)
wait(long,int)
wait()
getRegistryKey(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
getInstance(java.lang.Class)
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.SingletonRegistry::lookup(java.lang.String)
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
register(java.lang.String,creational.singleton.Singleton)
	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

finalize()
toString()
clone()
creational.singleton.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.adapter.EnemyAttacker::fireWeapon()
driveForward()
assignDriver(java.lang.String)
structural.adapter.EnemyRobot::getClass()
wait(long)
wait(long,int)
wait()
smashwithHands()
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

walkForward()
	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
reactToHuman(java.lang.String)
	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

finalize()
toString()
clone()
structural.adapter.EnemyRobotAdapter::getClass()
wait(long)
wait(long,int)
wait()
driveForward()
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
setRobot(structural.adapter.EnemyRobot)
fireWeapon()
	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

hashCode()
assignDriver(java.lang.String)
	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

finalize()
toString()
clone()
structural.adapter.EnemyTank::getClass()
wait(long)
wait(long,int)
wait()
driveForward()
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
fireWeapon()
	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

hashCode()
assignDriver(java.lang.String)
	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

finalize()
toString()
clone()
structural.adapter.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.adapter.TestEnemyAttackers::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.bridge.AdvancedRemote::getClass()
wait(long)
wait(long,int)
wait()
togglePower()
	---> structural.bridge.Device::togglePower() [0 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

notifyAll()
equals(java.lang.Object)
mute()
	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

channelDown()
	---> structural.bridge.Device::channelDown() [0 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

registerNatives()
notify()
hashCode()
volumeDown()
	---> structural.bridge.Device::volumeDown() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

volumeUp()
	---> structural.bridge.Device::volumeUp() [0 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

finalize()
toString()
clone()
channelUp()
	---> structural.bridge.Device::channelUp() [0 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

structural.bridge.Device::getName()
getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
setChannel(int)
equals(java.lang.Object)
registerNatives()
setVolume(int)
notify()
enable()
hashCode()
getVolume()
getChannel()
disable()
isEnabled()
finalize()
toString()
clone()
structural.bridge.Radio::getName()
getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
setChannel(int)
equals(java.lang.Object)
registerNatives()
setVolume(int)
notify()
enable()
hashCode()
getVolume()
getChannel()
disable()
isEnabled()
finalize()
toString()
clone()
structural.bridge.Remote::getClass()
wait(long)
wait(long,int)
wait()
togglePower()
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

notifyAll()
equals(java.lang.Object)
channelDown()
	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

registerNatives()
notify()
hashCode()
volumeDown()
	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

volumeUp()
	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

finalize()
toString()
clone()
channelUp()
	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV::getName()
getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
setChannel(int)
equals(java.lang.Object)
registerNatives()
setVolume(int)
notify()
enable()
hashCode()
getVolume()
getChannel()
disable()
isEnabled()
finalize()
toString()
clone()
structural.bridge.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

registerNatives()
notify()
hashCode()
ordinaryRemoteTest(structural.bridge.Remote)
	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

advancedRemoteTest(structural.bridge.AdvancedRemote)
	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [0 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

finalize()
toString()
clone()
structural.composite.DiscJockey::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
getSongList()
displaySongList()
	---> structural.composite.SongComponent::displaySongList() [0 time(s)]

finalize()
toString()
clone()
structural.composite.Song::getClass()
wait(long)
wait(long,int)
wait()
add(structural.composite.SongComponent)
getInfo()
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
getSongName()
notify()
remove(structural.composite.SongComponent)
hashCode()
getBandName()
getComponent(int)
displayInfo()
	---> structural.composite.Song::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

finalize()
toString()
clone()
getReleaseYear()
structural.composite.SongComponent::getClass()
wait(long)
wait(long,int)
wait()
add(structural.composite.SongComponent)
getInfo()
notifyAll()
equals(java.lang.Object)
registerNatives()
getSongName()
notify()
remove(structural.composite.SongComponent)
hashCode()
getBandName()
getComponent(int)
displayInfo()
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

finalize()
toString()
clone()
getReleaseYear()
structural.composite.SongGroup::getClass()
wait(long)
wait(long,int)
wait()
add(structural.composite.SongComponent)
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

getInfo()
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
getSongName()
notify()
remove(structural.composite.SongComponent)
	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

getGroupName()
hashCode()
getBandName()
getComponent(int)
	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

getGroupDescription()
displayInfo()
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

finalize()
toString()
clone()
getReleaseYear()
structural.composite.SongListGenerator::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.composite.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.decorator.Beverage::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
finalize()
toString()
clone()
structural.decorator.BeverageDecorator::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
finalize()
toString()
clone()
structural.decorator.CaramelDecorator::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
	---> structural.decorator.Beverage::description() [0 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
	---> structural.decorator.Beverage::price() [0 time(s)]

finalize()
toString()
clone()
structural.decorator.Espresso::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
finalize()
toString()
clone()
structural.decorator.IBeverage::price()
description()
structural.decorator.SugarDecorator::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
	---> structural.decorator.Beverage::description() [1 time(s)]

equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
	---> structural.decorator.Beverage::price() [1 time(s)]

finalize()
toString()
clone()
structural.decorator.Tea::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
description()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
price()
finalize()
toString()
clone()
structural.decorator.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

displayOrder(structural.decorator.Beverage)
	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

registerNatives()
notify()
hashCode()
beveragesMenu()
	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

selectBeverage(java.util.Scanner)
	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner)
	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

orderBeverage()
	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

finalize()
toString()
clone()
additionalIngredientsMenu()
	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
setNumber(int)
registerNatives()
notify()
getNumber()
setSecurityCode(int)
hashCode()
getBalance()
getSecurityCode()
finalize()
toString()
clone()
setBalance(double)
structural.facade.BankAccountBalanceSystem::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
canWithdraw(double)
	---> structural.facade.BankAccount::canWithdraw(double) [0 time(s)]

equals(java.lang.Object)
registerNatives()
getAccountBalance()
	---> structural.facade.BankAccount::getAccountBalance() [0 time(s)]

notify()
hashCode()
deposit(double)
	---> structural.facade.BankAccount::deposit(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

finalize()
toString()
clone()
withdraw(double)
	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

structural.facade.BankAccountFacade::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
depositCash(double)
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

notify()
hashCode()
getSecurityCode()
getAccountNumber()
fetchBankAccount()
withdrawCash(double)
	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

finalize()
toString()
clone()
structural.facade.BankAccountNumberChecker::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
match(int)
	---> structural.facade.BankAccountNumberChecker::match(int) [0 time(s)]

notify()
hashCode()
getAccountNumber()
	---> structural.facade.BankAccount::getAccountNumber() [0 time(s)]

finalize()
toString()
clone()
structural.facade.BankAccountSecurityCodeChecker::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
match(int)
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

notify()
hashCode()
getAccountSecurityCode()
	---> structural.facade.BankAccount::getAccountSecurityCode() [0 time(s)]

finalize()
toString()
clone()
structural.facade.BankAccountWelcomeWindow::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
setWelcomeMessage()
	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

finalize()
toString()
clone()
structural.facade.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.flyweight.Circle::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
draw(structural.flyweight.Position)
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

getRadius()
notify()
setRadius(int)
hashCode()
finalize()
toString()
clone()
structural.flyweight.Position::getClass()
wait(long)
wait(long,int)
wait()
setX(double)
notifyAll()
equals(java.lang.Object)
registerNatives()
setY(double)
notify()
hashCode()
getX()
getY()
toString()
finalize()
clone()
structural.flyweight.Shape::draw(structural.flyweight.Position)
structural.flyweight.ShapeFactory::getClass()
wait(long)
wait(long,int)
wait()
getCircle(java.lang.String)
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
structural.flyweight.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

registerNatives()
notify()
getRandomRadius()
	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

hashCode()
getRandomX()
	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

getRandomY()
	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

finalize()
toString()
clone()
getRandomColor()
	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet::connectTo(java.lang.String)
structural.proxy.ProxyInternet::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
connectTo(java.lang.String)
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.RealInternet::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
registerNatives()
notify()
hashCode()
finalize()
toString()
clone()
connectTo(java.lang.String)
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test::getClass()
wait(long)
wait(long,int)
wait()
notifyAll()
equals(java.lang.Object)
main(java.lang.String[])
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]

registerNatives()
notify()
hashCode()
finalize()
toString()
clone()

Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::getClass() [0 time(s)]

behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::wait(long) [0 time(s)]

behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::wait(long,int) [0 time(s)]

behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::wait() [0 time(s)]

behavioral.chain_of_responsibility.ConsoleLogger:
	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

behavioral.chain_of_responsibility.ConsoleLogger:
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

behavioral.chain_of_responsibility.ConsoleLogger:
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

behavioral.chain_of_responsibility.ConsoleLogger:
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

behavioral.chain_of_responsibility.ConsoleLogger:
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

behavioral.chain_of_responsibility.ConsoleLogger:
	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

behavioral.chain_of_responsibility.ConsoleLogger:
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

behavioral.chain_of_responsibility.ConsoleLogger:
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

behavioral.chain_of_responsibility.ConsoleLogger:
	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

behavioral.chain_of_responsibility.ConsoleLogger:
	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

behavioral.chain_of_responsibility.ConsoleLogger:
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::getFilePath() [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::setFilePath(java.lang.String) [0 time(s)]

behavioral.chain_of_responsibility.ILogger:
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

behavioral.chain_of_responsibility.ILogger:
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::getMessage() [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::setLevel(behavioral.chain_of_responsibility.LogRequestLevel) [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::setMessage(java.lang.String) [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::getLevel() [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.LogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::value() [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::compareTo(java.lang.Enum) [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::describeConstable() [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::getDeclaringClass() [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::name() [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::ordinal() [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::readObject(java.io.ObjectInputStream) [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::readObjectNoData() [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::value() [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::valueOf(java.lang.String) [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::values() [0 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.command.Command:
	---> behavioral.chain_of_responsibility.ILogger::getName() [0 time(s)]

behavioral.command.Command:
	---> behavioral.chain_of_responsibility.ILogger::undo() [0 time(s)]

behavioral.command.Command:
	---> behavioral.chain_of_responsibility.ILogger::execute() [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.command.Command::redo() [1 time(s)]

behavioral.command.CommandManager:
	---> behavioral.command.Command::notify() [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

behavioral.command.CommandManager:
	---> behavioral.command.Command::hashCode() [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.command.Command::undo() [1 time(s)]

behavioral.command.CommandManager:
	---> behavioral.command.Command::finalize() [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.command.Command::toString() [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.command.Command::clone() [0 time(s)]

behavioral.command.CommandManager:
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getClass() [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::wait(long) [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::wait(long,int) [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::wait() [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::notifyAll() [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::registerNatives() [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::notify() [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::execute() [1 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::hashCode() [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::finalize() [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::toString() [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getClass() [0 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::wait(long) [0 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::wait(long,int) [0 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::wait() [0 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::notifyAll() [0 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::registerNatives() [0 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::notify() [0 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::execute() [1 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::hashCode() [0 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::finalize() [0 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::toString() [0 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getClass() [0 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::wait(long) [0 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::wait(long,int) [0 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::wait() [0 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::notifyAll() [0 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::registerNatives() [0 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::notify() [0 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::execute() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::hashCode() [0 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::finalize() [0 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::toString() [0 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::getClass() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::wait(long) [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::wait(long,int) [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::wait() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::notifyAll() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::switchChannel(int) [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::registerNatives() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::notify() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::switchOff() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::hashCode() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::getChannel() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::isOn() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::finalize() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::toString() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::switchOn() [0 time(s)]

behavioral.command.Test:
	---> behavioral.command.TV::getClass() [0 time(s)]

behavioral.command.Test:
	---> behavioral.command.TV::wait(long) [0 time(s)]

behavioral.command.Test:
	---> behavioral.command.TV::wait(long,int) [0 time(s)]

behavioral.command.Test:
	---> behavioral.command.TV::wait() [0 time(s)]

behavioral.command.Test:
	---> behavioral.command.TV::notifyAll() [0 time(s)]

behavioral.command.Test:
	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

behavioral.command.Test:
	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

behavioral.command.Test:
	---> behavioral.command.CommandManager::registerNatives() [0 time(s)]

behavioral.command.Test:
	---> behavioral.command.CommandManager::notify() [0 time(s)]

behavioral.command.Test:
	---> behavioral.command.CommandManager::hashCode() [0 time(s)]

behavioral.command.Test:
	---> behavioral.command.CommandManager::finalize() [0 time(s)]

behavioral.command.Test:
	---> behavioral.command.CommandManager::toString() [0 time(s)]

behavioral.command.Test:
	---> behavioral.command.CommandManager::clone() [0 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.command.CommandManager::getClass() [0 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.command.CommandManager::wait(long) [0 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.command.CommandManager::wait(long,int) [0 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.command.CommandManager::wait() [0 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.command.CommandManager::notifyAll() [0 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.command.CommandManager::equals(java.lang.Object) [0 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.command.CommandManager::registerNatives() [0 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.command.CommandManager::notify() [0 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.command.CommandManager::hashCode() [0 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::toString() [0 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::wait() [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::notify() [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::toString() [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.Expression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::wait() [0 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::notify() [0 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::toString() [0 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::wait() [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::notify() [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::toString() [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::wait() [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::getIsFemaleExpression() [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::notify() [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::toString() [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

behavioral.iterator.DiscJockey:
	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

behavioral.iterator.DiscJockey:
	---> behavioral.interpreter.Expression::wait() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::notifyAll() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::registerNatives() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::notify() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::hashCode() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::finalize() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::toString() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::clone() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::getClass() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::wait(long) [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::wait(long,int) [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::wait() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::notifyAll() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::registerNatives() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::getSongName() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::notify() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::hashCode() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::getBandName() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::finalize() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::clone() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::getYearReleased() [0 time(s)]

behavioral.iterator.SongAggregate:
	---> structural.composite.Song::iterator() [0 time(s)]

behavioral.iterator.SongAggregate:
	---> structural.composite.Song::spliterator() [0 time(s)]

behavioral.iterator.SongAggregate:
	---> structural.composite.Song::forEach(java.util.function.Consumer) [0 time(s)]

behavioral.iterator.SongAggregate:
	---> structural.composite.Song::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongArray:
	---> structural.composite.Song::getClass() [0 time(s)]

behavioral.iterator.SongArray:
	---> structural.composite.Song::wait(long) [0 time(s)]

behavioral.iterator.SongArray:
	---> structural.composite.Song::wait(long,int) [0 time(s)]

behavioral.iterator.SongArray:
	---> structural.composite.Song::wait() [0 time(s)]

behavioral.iterator.SongArray:
	---> structural.composite.Song::spliterator() [0 time(s)]

behavioral.iterator.SongArray:
	---> structural.composite.Song::notifyAll() [0 time(s)]

behavioral.iterator.SongArray:
	---> structural.composite.Song::forEach(java.util.function.Consumer) [0 time(s)]

behavioral.iterator.SongArray:
	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

behavioral.iterator.SongArray:
	---> structural.composite.Song::length() [0 time(s)]

behavioral.iterator.SongArray:
	---> structural.composite.Song::registerNatives() [0 time(s)]

behavioral.iterator.SongArray:
	---> structural.composite.Song::notify() [0 time(s)]

behavioral.iterator.SongArray:
	---> structural.composite.Song::hashCode() [0 time(s)]

behavioral.iterator.SongArray:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

behavioral.iterator.SongArray:
	---> behavioral.iterator.SongArray::getFilledArray() [0 time(s)]

behavioral.iterator.SongArray:
	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

behavioral.iterator.SongArray:
	---> behavioral.iterator.SongArray::toString() [0 time(s)]

behavioral.iterator.SongArray:
	---> behavioral.iterator.SongArray::clone() [0 time(s)]

behavioral.iterator.SongArray:
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::wait() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::spliterator() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::forEach(java.util.function.Consumer) [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::registerNatives() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::notify() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::hashCode() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::toString() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::clone() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::wait() [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::spliterator() [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::forEach(java.util.function.Consumer) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::registerNatives() [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::notify() [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::hashCode() [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::toString() [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::clone() [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongArray::wait() [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.DiscJockey::registerNatives() [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.DiscJockey::notify() [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.DiscJockey::hashCode() [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.DiscJockey::finalize() [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.DiscJockey::toString() [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.DiscJockey::clone() [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::getClass() [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::wait(long) [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::wait(long,int) [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::wait() [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::notifyAll() [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.mediator.User::registerNatives() [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.mediator.User::notify() [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.mediator.User::hashCode() [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.mediator.User::finalize() [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.mediator.User::toString() [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::getName() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::getClass() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::wait(long) [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::wait() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.ChatUser::receive(java.lang.String) [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.ChatUser::notifyAll() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.ChatUser::equals(java.lang.Object) [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.ChatUser::getId() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.ChatUser::registerNatives() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.ChatUser::notify() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.ChatUser::hashCode() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.ChatUser::getRoom() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.ChatUser::finalize() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.ChatUser::toString() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.ChatUser::clone() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

behavioral.mediator.IChatRoom:
	---> behavioral.mediator.ChatUser::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

behavioral.mediator.IChatRoom:
	---> behavioral.mediator.ChatUser::addUser(behavioral.mediator.User) [0 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.ChatUser::getClass() [0 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.ChatUser::wait(long) [0 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.ChatUser::wait(long,int) [0 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.ChatUser::wait() [0 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.ChatUser::notifyAll() [0 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.ChatUser::equals(java.lang.Object) [0 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.User::registerNatives() [0 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.User::notify() [0 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.User::hashCode() [0 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.User::finalize() [0 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.User::toString() [0 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::getName() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::getClass() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::wait(long) [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::wait() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::notifyAll() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::getId() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::registerNatives() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::notify() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::hashCode() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::getRoom() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::finalize() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::toString() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::send(java.lang.String,java.lang.String) [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::getClass() [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::wait(long) [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::wait() [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::notifyAll() [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::registerNatives() [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::notify() [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::hashCode() [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::get(int) [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::finalize() [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::toString() [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::getClass() [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::wait(long) [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::wait() [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::notifyAll() [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::registerNatives() [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::notify() [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::hashCode() [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::getState() [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::finalize() [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::toString() [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.mediator.User::getClass() [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.mediator.User::wait(long) [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.mediator.User::wait() [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

behavioral.memento.Originator:
	---> behavioral.memento.Memento::setState(java.lang.String) [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.memento.Memento::notifyAll() [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.memento.Memento::equals(java.lang.Object) [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.memento.Memento::registerNatives() [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.memento.Memento::notify() [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.memento.Memento::hashCode() [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.memento.Memento::getState() [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.memento.Memento::externalizeState() [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.memento.Memento::finalize() [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.memento.Memento::toString() [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.memento.Memento::clone() [0 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Memento::getClass() [0 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Memento::wait(long) [0 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Memento::wait(long,int) [0 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Memento::wait() [0 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Memento::notifyAll() [0 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Memento::equals(java.lang.Object) [0 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::registerNatives() [0 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::notify() [0 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::hashCode() [0 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::finalize() [0 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::toString() [0 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::clone() [0 time(s)]

behavioral.observer.Observer:
	---> behavioral.memento.Originator::update() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.memento.Originator::getClass() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.memento.Originator::wait(long) [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.memento.Originator::wait(long,int) [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.memento.Originator::wait() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.Observer::notifyObserver() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.Observer::notifyAll() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.Observer::getIBMStock() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.Observer::equals(java.lang.Object) [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.Observer::registerNatives() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.Observer::notify() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setAppleStock(double) [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::getGoogleStock() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::hashCode() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setIBMStock(double) [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::getAppleStock() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::finalize() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::toString() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::clone() [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::getClass() [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::wait(long) [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::wait(long,int) [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::wait() [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::notifyAll() [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::equals(java.lang.Object) [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::registerNatives() [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockObserver::update() [3 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockObserver::notify() [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockObserver::hashCode() [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockObserver::finalize() [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockObserver::toString() [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockObserver::clone() [0 time(s)]

behavioral.observer.Subject:
	---> behavioral.observer.StockObserver::notifyObserver() [0 time(s)]

behavioral.observer.Subject:
	---> behavioral.observer.StockObserver::register(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.Subject:
	---> behavioral.observer.StockObserver::unregister(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.Test:
	---> behavioral.observer.StockObserver::getClass() [0 time(s)]

behavioral.observer.Test:
	---> behavioral.observer.StockObserver::wait(long) [0 time(s)]

behavioral.observer.Test:
	---> behavioral.observer.StockObserver::wait(long,int) [0 time(s)]

behavioral.observer.Test:
	---> behavioral.observer.StockObserver::wait() [0 time(s)]

behavioral.observer.Test:
	---> behavioral.observer.StockObserver::notifyAll() [0 time(s)]

behavioral.observer.Test:
	---> behavioral.observer.StockObserver::equals(java.lang.Object) [0 time(s)]

behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::registerNatives() [0 time(s)]

behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::notify() [0 time(s)]

behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::hashCode() [0 time(s)]

behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::finalize() [0 time(s)]

behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::toString() [0 time(s)]

behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::clone() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.observer.StockGrabber::getClass() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.observer.StockGrabber::getCashInMachine() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.observer.StockGrabber::wait(long) [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.observer.StockGrabber::wait(long,int) [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.observer.StockGrabber::wait() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::notifyAll() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::setATMState(behavioral.state.ATMState) [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::equals(java.lang.Object) [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::registerNatives() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::getATMState() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::getNoCardState() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::notify() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::getHasCardState() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::hashCode() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::getNoCashState() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::getCorrectPinState() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::finalize() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::toString() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::clone() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::setCashInMachine(int) [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::getClass() [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::wait(long) [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::wait(long,int) [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::wait() [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::notifyAll() [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::equals(java.lang.Object) [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::registerNatives() [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::notify() [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::hashCode() [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::finalize() [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::toString() [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::clone() [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::getClass() [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::wait(long) [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::wait(long,int) [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::wait() [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMMachine::notify() [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMMachine::toString() [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::wait() [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.HasCard::equals(java.lang.Object) [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.HasCard::registerNatives() [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.HasCard::notify() [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.HasCard::hashCode() [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.HasCard::finalize() [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.HasCard::toString() [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.HasCard::clone() [0 time(s)]

behavioral.state.IATMState:
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

behavioral.state.IATMState:
	---> behavioral.state.HasCard::ejectCard() [0 time(s)]

behavioral.state.IATMState:
	---> behavioral.state.HasCard::requestCash(int) [0 time(s)]

behavioral.state.IATMState:
	---> behavioral.state.HasCard::insertPin(int) [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.HasCard::getClass() [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.HasCard::wait(long) [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.HasCard::wait(long,int) [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.HasCard::wait() [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.NoCard::notifyAll() [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.NoCard::equals(java.lang.Object) [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.NoCard::registerNatives() [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.NoCard::notify() [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.NoCard::hashCode() [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.NoCard::finalize() [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.NoCard::toString() [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.NoCard::clone() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCard::getClass() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCard::wait(long) [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCard::wait(long,int) [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCard::wait() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::notifyAll() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::equals(java.lang.Object) [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::registerNatives() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::notify() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::hashCode() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::finalize() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::toString() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::clone() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.NoCash::getClass() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.NoCash::wait(long) [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.NoCash::wait(long,int) [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.NoCash::wait() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.NoCash::notifyAll() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.NoCash::equals(java.lang.Object) [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::notify() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::toString() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::wait() [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::notify() [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::execute(int,int) [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::toString() [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.strategy.ArithmeticOperation:
	---> behavioral.state.ATMMachine::execute(int,int) [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.state.ATMMachine::wait() [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.state.ATMMachine::reset() [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.state.ATMMachine::notify() [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.state.ATMMachine::getResult() [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::setOperation(behavioral.strategy.ArithmeticOperation) [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [2 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::wait(long) [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::wait() [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::start() [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::notify() [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::hashCode() [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::initialize() [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::finalize() [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::toString() [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::clone() [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::getClass() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::wait(long) [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::wait() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::start() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::notify() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::hashCode() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::initialize() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::finalize() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::toString() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::clone() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::getClass() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::wait(long) [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::wait() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::start() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::notify() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::hashCode() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::initialize() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::finalize() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::toString() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::clone() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::getClass() [0 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::wait(long) [0 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::wait() [0 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::notify() [0 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::hashCode() [0 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::finalize() [0 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::toString() [0 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::clone() [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.template_method.Game::getName() [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.template_method.Game::getClass() [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.template_method.Game::wait(long) [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.template_method.Game::wait() [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.template_method.Game::setName(java.lang.String) [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.template_method.Game::setPrice(double) [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.template_method.Game::getPrice() [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.template_method.Game::notify() [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::toString() [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::getName() [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::wait() [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::setName(java.lang.String) [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::setPrice(double) [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::getPrice() [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::notify() [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::toString() [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::getName() [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::wait() [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::setName(java.lang.String) [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::setPrice(double) [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::getPrice() [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::notify() [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::toString() [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::wait() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::getComputedTax() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::notify() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Product::getTaxRate() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Product::hashCode() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Product::finalize() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Product::toString() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Product::clone() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::getComputedTax() [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.Product::getTaxRate() [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.Product::hashCode() [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.Product::finalize() [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.Product::toString() [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.Product::clone() [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::hashCode() [0 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::finalize() [0 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::toString() [0 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::clone() [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.TaxVisitor::getName() [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.TaxVisitor::setName(java.lang.String) [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.TaxVisitor::setPrice(double) [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.TaxVisitor::getPrice() [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::toString() [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Visitable:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

behavioral.visitor.Visitor:
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Liquor) [0 time(s)]

behavioral.visitor.Visitor:
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

behavioral.visitor.Visitor:
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Necessity) [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::wait() [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::notify() [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::toString() [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::clone() [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.Shape:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

creational.abstract_factory.Test:
	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

creational.abstract_factory.Test:
	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

creational.abstract_factory.Test:
	---> creational.abstract_factory.Shape::notify() [0 time(s)]

creational.abstract_factory.Test:
	---> creational.abstract_factory.Shape::hashCode() [0 time(s)]

creational.abstract_factory.Test:
	---> creational.abstract_factory.Shape::finalize() [0 time(s)]

creational.abstract_factory.Test:
	---> creational.abstract_factory.Shape::toString() [0 time(s)]

creational.abstract_factory.Test:
	---> creational.abstract_factory.Shape::clone() [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::getClass() [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::wait(long) [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::wait(long,int) [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::wait() [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::notifyAll() [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::equals(java.lang.Object) [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::notify() [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::hashCode() [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::finalize() [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::toString() [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::clone() [0 time(s)]

creational.builder.IRobot:
	---> creational.abstract_factory.Shape::setTorso(java.lang.String) [0 time(s)]

creational.builder.IRobot:
	---> creational.abstract_factory.Shape::setArms(java.lang.String) [0 time(s)]

creational.builder.IRobot:
	---> creational.abstract_factory.Shape::setLegs(java.lang.String) [0 time(s)]

creational.builder.IRobot:
	---> creational.abstract_factory.Shape::setHead(java.lang.String) [0 time(s)]

creational.builder.IRobotBuilder:
	---> creational.abstract_factory.Shape::buildArms() [0 time(s)]

creational.builder.IRobotBuilder:
	---> creational.abstract_factory.Shape::buildHead() [0 time(s)]

creational.builder.IRobotBuilder:
	---> creational.abstract_factory.Shape::getRobot() [0 time(s)]

creational.builder.IRobotBuilder:
	---> creational.abstract_factory.Shape::buildTorso() [0 time(s)]

creational.builder.IRobotBuilder:
	---> creational.abstract_factory.Shape::buildLegs() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.abstract_factory.Shape::getClass() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.abstract_factory.Shape::wait(long) [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.abstract_factory.Shape::wait(long,int) [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.abstract_factory.Shape::wait() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.abstract_factory.Shape::notifyAll() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.abstract_factory.Shape::equals(java.lang.Object) [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.abstract_factory.Shape::getRobot() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.abstract_factory.Shape::notify() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildArms() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::hashCode() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildHead() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::finalize() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::toString() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::clone() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::getClass() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::wait(long) [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::wait(long,int) [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::wait() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::setLegs(java.lang.String) [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::notifyAll() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::setHead(java.lang.String) [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::registerNatives() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::getTorso() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::notify() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::setTorso(java.lang.String) [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::hashCode() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::setArms(java.lang.String) [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::getArms() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::getHead() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::finalize() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::clone() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::getLegs() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::getClass() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::wait(long) [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::wait(long,int) [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::wait() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::notifyAll() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::registerNatives() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::getRobot() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::notify() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::buildLegs() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::buildArms() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::hashCode() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::buildHead() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::finalize() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::toString() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::clone() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.Robot::getClass() [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.Robot::wait(long) [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.Robot::wait(long,int) [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.Robot::wait() [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.Robot::notifyAll() [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.Robot::registerNatives() [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::notify() [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::hashCode() [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::setRobotBuilder(creational.builder.IRobotBuilder) [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::finalize() [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::toString() [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::clone() [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.IRobotBuilder::getClass() [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.IRobotBuilder::wait(long) [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.IRobotBuilder::wait(long,int) [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.IRobotBuilder::wait() [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.IRobotBuilder::notifyAll() [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.IRobotBuilder::equals(java.lang.Object) [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.IRobotBuilder::registerNatives() [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.IRobotBuilder::notify() [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildArms() [1 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::hashCode() [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildHead() [1 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::finalize() [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::toString() [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::clone() [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.Robot::getClass() [0 time(s)]

creational.builder.Test:
	---> creational.builder.Robot::wait(long) [0 time(s)]

creational.builder.Test:
	---> creational.builder.Robot::wait(long,int) [0 time(s)]

creational.builder.Test:
	---> creational.builder.Robot::wait() [0 time(s)]

creational.builder.Test:
	---> creational.builder.Robot::notifyAll() [0 time(s)]

creational.builder.Test:
	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::notify() [0 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::toString() [0 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::getName() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::wait() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::setName(java.lang.String) [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::getAmtDamage() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::setAmtDamage(double) [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::notify() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::toString() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::getName() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::wait() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::setName(java.lang.String) [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::getAmtDamage() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::setAmtDamage(double) [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::notify() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::toString() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::wait() [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::notify() [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::createEnemyShip(java.lang.String) [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::toString() [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::wait() [0 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.factory.EnemyShipFactory::registerNatives() [0 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.factory.EnemyShipFactory::notify() [0 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.factory.EnemyShipFactory::hashCode() [0 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.factory.EnemyShip::finalize() [0 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.factory.EnemyShip::toString() [0 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::getName() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::getClass() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::wait() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::setName(java.lang.String) [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::getAmtDamage() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::setAmtDamage(double) [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::notify() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::finalize() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::toString() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::getClass() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::wait() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShipFactory::registerNatives() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShipFactory::notify() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShipFactory::hashCode() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::finalize() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::toString() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::getName() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::getClass() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::wait() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::setName(java.lang.String) [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::getAmtDamage() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::setAmtDamage(double) [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::notify() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::finalize() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::toString() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::getClass() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::wait() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::getId() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::setPosition(creational.prototype.Position) [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::getPosition() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::notify() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::getType() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::setId(java.lang.String) [0 time(s)]

creational.prototype.Circle:
	---> creational.prototype.Shape::clone() [2 time(s)]

creational.prototype.Circle:
	---> creational.prototype.Shape::toString() [0 time(s)]

creational.prototype.Circle:
	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::getClass() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::wait(long) [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::wait() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::setX(double) [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::notifyAll() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::registerNatives() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::setY(double) [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::notify() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::hashCode() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::getX() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::getY() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Position:
	---> creational.prototype.Position::finalize() [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::getClass() [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::wait(long) [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::wait(long,int) [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::wait() [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::notifyAll() [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::equals(java.lang.Object) [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::getId() [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::setPosition(creational.prototype.Position) [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::registerNatives() [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::getPosition() [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::notify() [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::hashCode() [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::getType() [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::setId(java.lang.String) [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Shape::clone() [3 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::getClass() [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::wait(long) [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::wait() [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::notifyAll() [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::getId() [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::registerNatives() [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::draw() [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::getPosition() [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::notify() [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::hashCode() [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::getType() [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::setId(java.lang.String) [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [3 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getClass() [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::wait(long) [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::wait() [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::notifyAll() [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::registerNatives() [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::notify() [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::hashCode() [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::toString() [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::clone() [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::getClass() [0 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::wait(long) [0 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::wait(long,int) [0 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::wait() [0 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::notifyAll() [0 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::equals(java.lang.Object) [0 time(s)]

creational.prototype.Test:
	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

creational.prototype.Test:
	---> creational.prototype.Shape::registerNatives() [0 time(s)]

creational.prototype.Test:
	---> creational.prototype.Shape::notify() [0 time(s)]

creational.prototype.Test:
	---> creational.prototype.Shape::hashCode() [0 time(s)]

creational.prototype.Test:
	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.Test:
	---> creational.prototype.Shape::toString() [0 time(s)]

creational.prototype.Test:
	---> creational.prototype.Shape::clone() [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::getClass() [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::wait(long) [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::wait() [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::notifyAll() [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::getId() [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::registerNatives() [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::getPosition() [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::notify() [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::hashCode() [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::getType() [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::setId(java.lang.String) [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::clone() [3 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getClass() [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::wait(long) [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::wait() [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::notifyAll() [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::registerNatives() [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::notify() [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::hashCode() [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::toString() [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::clone() [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

creational.singleton.Test:
	---> creational.singleton.ExtendedSingleton2::registerNatives() [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.ExtendedSingleton2::notify() [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.ExtendedSingleton2::hashCode() [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.ExtendedSingleton2::finalize() [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.ExtendedSingleton2::toString() [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.ExtendedSingleton2::clone() [0 time(s)]

structural.adapter.EnemyAttacker:
	---> creational.singleton.ExtendedSingleton2::fireWeapon() [0 time(s)]

structural.adapter.EnemyAttacker:
	---> creational.singleton.ExtendedSingleton2::driveForward() [0 time(s)]

structural.adapter.EnemyAttacker:
	---> creational.singleton.ExtendedSingleton2::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::getClass() [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::wait(long) [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::wait(long,int) [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::wait() [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::notifyAll() [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::equals(java.lang.Object) [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::registerNatives() [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::notify() [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::hashCode() [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::finalize() [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::toString() [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::clone() [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> creational.singleton.ExtendedSingleton2::getClass() [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> creational.singleton.ExtendedSingleton2::wait(long) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> creational.singleton.ExtendedSingleton2::wait(long,int) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> creational.singleton.ExtendedSingleton2::wait() [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::registerNatives() [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::notify() [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::setRobot(structural.adapter.EnemyRobot) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::hashCode() [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::finalize() [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::toString() [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::clone() [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::getClass() [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::wait(long) [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::wait(long,int) [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::wait() [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::registerNatives() [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::notify() [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::hashCode() [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::finalize() [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::toString() [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::clone() [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::getClass() [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::wait(long) [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::wait(long,int) [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::wait() [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyAttacker::registerNatives() [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyAttacker::notify() [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyAttacker::hashCode() [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyAttacker::finalize() [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyAttacker::toString() [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyAttacker::clone() [0 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::getClass() [0 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::wait(long) [0 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::wait(long,int) [0 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::wait() [0 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::notifyAll() [0 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::equals(java.lang.Object) [0 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::registerNatives() [0 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::notify() [0 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::hashCode() [0 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::finalize() [0 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::toString() [0 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::clone() [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.adapter.EnemyAttacker::getClass() [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.adapter.EnemyAttacker::wait(long) [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.adapter.EnemyAttacker::wait(long,int) [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.adapter.EnemyAttacker::wait() [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [4 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::notifyAll() [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::mute() [2 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::channelDown() [2 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::registerNatives() [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::notify() [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::hashCode() [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::volumeDown() [2 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::volumeUp() [2 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::finalize() [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::toString() [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::channelUp() [2 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::getName() [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::getClass() [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::wait(long) [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::wait(long,int) [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::wait() [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::notifyAll() [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::setChannel(int) [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::registerNatives() [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::setVolume(int) [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::notify() [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::enable() [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::hashCode() [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::getVolume() [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::getChannel() [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::disable() [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::isEnabled() [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::finalize() [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::toString() [0 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::getName() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::getClass() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::wait(long) [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::wait(long,int) [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::wait() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::notifyAll() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::setChannel(int) [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::registerNatives() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::setVolume(int) [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::notify() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::enable() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::hashCode() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::getVolume() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::getChannel() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::disable() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::isEnabled() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::finalize() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::toString() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::getClass() [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::wait(long) [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::wait(long,int) [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::wait() [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [5 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::notifyAll() [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::channelDown() [3 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::registerNatives() [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::notify() [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::hashCode() [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::volumeDown() [3 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::volumeUp() [3 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::finalize() [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::toString() [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::getName() [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::getClass() [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::wait(long) [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::wait(long,int) [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::wait() [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::notifyAll() [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::setChannel(int) [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::registerNatives() [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::setVolume(int) [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::notify() [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::enable() [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::hashCode() [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::getVolume() [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::getChannel() [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::disable() [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::isEnabled() [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::finalize() [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::toString() [0 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.Device::getClass() [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.Device::wait(long) [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.Device::wait(long,int) [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.Device::wait() [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.Device::notifyAll() [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.Device::registerNatives() [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.Device::notify() [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.Device::hashCode() [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

structural.bridge.Test:
	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

structural.bridge.Test:
	---> structural.bridge.AdvancedRemote::finalize() [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.AdvancedRemote::toString() [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.AdvancedRemote::clone() [0 time(s)]

structural.composite.DiscJockey:
	---> structural.bridge.AdvancedRemote::getClass() [0 time(s)]

structural.composite.DiscJockey:
	---> structural.bridge.AdvancedRemote::wait(long) [0 time(s)]

structural.composite.DiscJockey:
	---> structural.bridge.AdvancedRemote::wait(long,int) [0 time(s)]

structural.composite.DiscJockey:
	---> structural.bridge.AdvancedRemote::wait() [0 time(s)]

structural.composite.DiscJockey:
	---> structural.bridge.AdvancedRemote::notifyAll() [0 time(s)]

structural.composite.DiscJockey:
	---> structural.bridge.AdvancedRemote::equals(java.lang.Object) [0 time(s)]

structural.composite.DiscJockey:
	---> structural.bridge.AdvancedRemote::registerNatives() [0 time(s)]

structural.composite.DiscJockey:
	---> structural.bridge.AdvancedRemote::notify() [0 time(s)]

structural.composite.DiscJockey:
	---> structural.bridge.AdvancedRemote::hashCode() [0 time(s)]

structural.composite.DiscJockey:
	---> structural.bridge.AdvancedRemote::getSongList() [0 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [0 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::finalize() [0 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::toString() [0 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::clone() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::wait(long) [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::wait() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

structural.composite.Song:
	---> structural.composite.Song::getInfo() [2 time(s)]

structural.composite.Song:
	---> structural.composite.Song::notifyAll() [0 time(s)]

structural.composite.Song:
	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

structural.composite.Song:
	---> structural.composite.Song::registerNatives() [0 time(s)]

structural.composite.Song:
	---> structural.composite.Song::getSongName() [0 time(s)]

structural.composite.Song:
	---> structural.composite.Song::notify() [0 time(s)]

structural.composite.Song:
	---> structural.composite.Song::remove(structural.composite.SongComponent) [0 time(s)]

structural.composite.Song:
	---> structural.composite.Song::hashCode() [0 time(s)]

structural.composite.Song:
	---> structural.composite.Song::getBandName() [0 time(s)]

structural.composite.Song:
	---> structural.composite.Song::getComponent(int) [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::finalize() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::toString() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::clone() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::wait(long) [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::wait() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::registerNatives() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::getSongName() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::notify() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::hashCode() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::getBandName() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::finalize() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::toString() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::clone() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::wait(long) [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::wait() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::getInfo() [4 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::registerNatives() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::getSongName() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::notify() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::getGroupName() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::hashCode() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::getBandName() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::getGroupDescription() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::finalize() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::toString() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::clone() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::wait(long) [0 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::wait() [0 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.DiscJockey::notify() [0 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.DiscJockey::finalize() [0 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.DiscJockey::toString() [0 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::wait() [0 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::notify() [0 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::finalize() [0 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::toString() [0 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::wait() [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::description() [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::notify() [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::price() [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::finalize() [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::toString() [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::wait() [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::description() [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::notify() [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::price() [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::finalize() [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::toString() [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.composite.DiscJockey::wait() [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::notify() [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::hashCode() [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::price() [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::finalize() [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::toString() [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::wait(long) [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::wait() [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::description() [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::notify() [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::hashCode() [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::price() [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::finalize() [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::toString() [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.IBeverage:
	---> structural.decorator.Beverage::price() [0 time(s)]

structural.decorator.IBeverage:
	---> structural.decorator.Beverage::description() [0 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::wait(long) [0 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::wait() [0 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::notify() [0 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::hashCode() [0 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::finalize() [0 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::toString() [0 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::wait(long) [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::wait() [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::description() [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::notify() [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::hashCode() [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::price() [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::finalize() [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::toString() [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::wait(long) [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::wait() [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::notify() [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::hashCode() [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::finalize() [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::toString() [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::wait(long) [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::wait() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::setNumber(int) [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::notify() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::getNumber() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::setSecurityCode(int) [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::hashCode() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::getBalance() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::getSecurityCode() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::finalize() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::toString() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::setBalance(double) [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.decorator.Beverage::wait(long) [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.decorator.Beverage::wait() [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::getAccountBalance() [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::notify() [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::hashCode() [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccountBalanceSystem::finalize() [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccountBalanceSystem::toString() [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccountBalanceSystem::clone() [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::getClass() [0 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::wait(long) [0 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::wait(long,int) [0 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::wait() [0 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::notifyAll() [0 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::equals(java.lang.Object) [0 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::registerNatives() [0 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::notify() [0 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::hashCode() [0 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::getSecurityCode() [0 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::getAccountNumber() [0 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::fetchBankAccount() [0 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::finalize() [0 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::toString() [0 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::clone() [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountBalanceSystem::getClass() [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountBalanceSystem::wait(long) [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountBalanceSystem::wait(long,int) [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountBalanceSystem::wait() [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountBalanceSystem::notifyAll() [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountBalanceSystem::equals(java.lang.Object) [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountBalanceSystem::registerNatives() [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::notify() [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::hashCode() [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccount::getAccountNumber() [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccount::finalize() [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccount::toString() [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccount::getClass() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccount::wait(long) [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccount::wait() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::notify() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::hashCode() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccount::getAccountSecurityCode() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccount::finalize() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccount::toString() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::getClass() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::wait(long) [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::wait() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::notify() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::hashCode() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::finalize() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::toString() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccount::getClass() [0 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccount::wait(long) [0 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccount::wait() [0 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::getRadius() [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::setRadius(int) [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::setX(double) [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::setY(double) [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::getX() [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::getY() [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Shape:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

structural.flyweight.Test:
	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

structural.flyweight.Test:
	---> structural.flyweight.Circle::registerNatives() [0 time(s)]

structural.flyweight.Test:
	---> structural.flyweight.Circle::notify() [0 time(s)]

structural.flyweight.Test:
	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

structural.flyweight.Test:
	---> structural.flyweight.Circle::hashCode() [0 time(s)]

structural.flyweight.Test:
	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

structural.flyweight.Test:
	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

structural.flyweight.Test:
	---> structural.flyweight.Circle::finalize() [0 time(s)]

structural.flyweight.Test:
	---> structural.flyweight.Circle::toString() [0 time(s)]

structural.flyweight.Test:
	---> structural.flyweight.Circle::clone() [0 time(s)]

structural.flyweight.Test:
	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::getClass() [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::wait(long) [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::wait(long,int) [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::wait() [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::notifyAll() [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::equals(java.lang.Object) [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::registerNatives() [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::notify() [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::hashCode() [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::finalize() [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::toString() [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::clone() [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::getClass() [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::wait(long) [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::wait(long,int) [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::wait() [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::notifyAll() [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::equals(java.lang.Object) [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::registerNatives() [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::notify() [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::hashCode() [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::finalize() [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::toString() [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::clone() [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::getClass() [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::wait(long) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::wait(long,int) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::wait() [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::notifyAll() [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::equals(java.lang.Object) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::registerNatives() [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::notify() [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::hashCode() [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::finalize() [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::toString() [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::clone() [0 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::getClass() [0 time(s)]

	---> ::wait(long) [0 time(s)]

	---> ::wait(long,int) [0 time(s)]

	---> ::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getFilePath() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setFilePath(java.lang.String) [0 time(s)]

behavioral.chain_of_responsibility.ILogger:
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getMessage() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setLevel(behavioral.chain_of_responsibility.LogRequestLevel) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setMessage(java.lang.String) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getLevel() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.LogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::value() [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::compareTo(java.lang.Enum) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::describeConstable() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getDeclaringClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::name() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::ordinal() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::readObject(java.io.ObjectInputStream) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::readObjectNoData() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::value() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::valueOf(java.lang.String) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::values() [0 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.command.Command:
	---> behavioral.chain_of_responsibility.ILogger::getName() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::undo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::execute() [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::notify() [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::hashCode() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::finalize() [0 time(s)]

	---> behavioral.command.Command::toString() [0 time(s)]

	---> behavioral.command.Command::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [0 time(s)]

	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.TV::registerNatives() [0 time(s)]

	---> behavioral.command.TV::notify() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::hashCode() [0 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

	---> behavioral.command.TV::finalize() [0 time(s)]

	---> behavioral.command.TV::toString() [0 time(s)]

	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.TV::registerNatives() [0 time(s)]

	---> behavioral.command.TV::notify() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::hashCode() [0 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::finalize() [0 time(s)]

	---> behavioral.command.TV::toString() [0 time(s)]

	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.TV::registerNatives() [0 time(s)]

	---> behavioral.command.TV::notify() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::hashCode() [0 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::finalize() [0 time(s)]

	---> behavioral.command.TV::toString() [0 time(s)]

	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.TV::switchChannel(int) [0 time(s)]

	---> behavioral.command.TV::registerNatives() [0 time(s)]

	---> behavioral.command.TV::notify() [0 time(s)]

	---> behavioral.command.TV::switchOff() [0 time(s)]

	---> behavioral.command.TV::hashCode() [0 time(s)]

	---> behavioral.command.TV::getChannel() [0 time(s)]

	---> behavioral.command.TV::isOn() [0 time(s)]

	---> behavioral.command.TV::finalize() [0 time(s)]

	---> behavioral.command.TV::toString() [0 time(s)]

	---> behavioral.command.TV::clone() [0 time(s)]

	---> behavioral.command.TV::switchOn() [0 time(s)]

behavioral.command.Test:
	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

	---> behavioral.command.CommandManager::registerNatives() [0 time(s)]

	---> behavioral.command.CommandManager::notify() [0 time(s)]

	---> behavioral.command.CommandManager::hashCode() [0 time(s)]

	---> behavioral.command.CommandManager::finalize() [0 time(s)]

	---> behavioral.command.CommandManager::toString() [0 time(s)]

	---> behavioral.command.CommandManager::clone() [0 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.command.CommandManager::getClass() [0 time(s)]

	---> behavioral.command.CommandManager::wait(long) [0 time(s)]

	---> behavioral.command.CommandManager::wait(long,int) [0 time(s)]

	---> behavioral.command.CommandManager::wait() [0 time(s)]

	---> behavioral.command.CommandManager::notifyAll() [0 time(s)]

	---> behavioral.command.CommandManager::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.CommandManager::registerNatives() [0 time(s)]

	---> behavioral.command.CommandManager::notify() [0 time(s)]

	---> behavioral.command.CommandManager::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

	---> behavioral.interpreter.Expression::notify() [0 time(s)]

	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.Expression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

	---> behavioral.interpreter.Expression::notify() [0 time(s)]

	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

	---> behavioral.interpreter.Expression::notify() [0 time(s)]

	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

	---> behavioral.interpreter.Expression::getIsFemaleExpression() [0 time(s)]

	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

	---> behavioral.interpreter.Expression::notify() [0 time(s)]

	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> structural.composite.Song::displaySongs() [0 time(s)]

	---> structural.composite.Song::notifyAll() [0 time(s)]

	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.Song::registerNatives() [0 time(s)]

	---> structural.composite.Song::notify() [0 time(s)]

	---> structural.composite.Song::hashCode() [0 time(s)]

	---> structural.composite.Song::finalize() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::clone() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::getClass() [0 time(s)]

	---> structural.composite.Song::wait(long) [0 time(s)]

	---> structural.composite.Song::wait(long,int) [0 time(s)]

	---> structural.composite.Song::wait() [0 time(s)]

	---> structural.composite.Song::notifyAll() [0 time(s)]

	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.Song::registerNatives() [0 time(s)]

	---> structural.composite.Song::getSongName() [0 time(s)]

	---> structural.composite.Song::notify() [0 time(s)]

	---> structural.composite.Song::hashCode() [0 time(s)]

	---> structural.composite.Song::getBandName() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::finalize() [0 time(s)]

	---> structural.composite.Song::clone() [0 time(s)]

	---> structural.composite.Song::getYearReleased() [0 time(s)]

behavioral.iterator.SongAggregate:
	---> structural.composite.Song::iterator() [0 time(s)]

	---> structural.composite.Song::spliterator() [0 time(s)]

	---> structural.composite.Song::forEach(java.util.function.Consumer) [0 time(s)]

	---> structural.composite.Song::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongArray:
	---> structural.composite.Song::getClass() [0 time(s)]

	---> structural.composite.Song::wait(long) [0 time(s)]

	---> structural.composite.Song::wait(long,int) [0 time(s)]

	---> structural.composite.Song::wait() [0 time(s)]

	---> structural.composite.Song::spliterator() [0 time(s)]

	---> structural.composite.Song::notifyAll() [0 time(s)]

	---> structural.composite.Song::forEach(java.util.function.Consumer) [0 time(s)]

	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.Song::length() [0 time(s)]

	---> structural.composite.Song::registerNatives() [0 time(s)]

	---> structural.composite.Song::notify() [0 time(s)]

	---> structural.composite.Song::hashCode() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [0 time(s)]

	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

	---> behavioral.iterator.SongArray::toString() [0 time(s)]

	---> behavioral.iterator.SongArray::clone() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

	---> behavioral.iterator.SongArray::wait() [0 time(s)]

	---> behavioral.iterator.SongArray::spliterator() [0 time(s)]

	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

	---> behavioral.iterator.SongArray::forEach(java.util.function.Consumer) [0 time(s)]

	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

	---> behavioral.iterator.SongArray::registerNatives() [0 time(s)]

	---> behavioral.iterator.SongArray::notify() [0 time(s)]

	---> behavioral.iterator.SongArray::hashCode() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

	---> behavioral.iterator.SongArray::toString() [0 time(s)]

	---> behavioral.iterator.SongArray::clone() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

	---> behavioral.iterator.SongArray::wait() [0 time(s)]

	---> behavioral.iterator.SongArray::spliterator() [0 time(s)]

	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

	---> behavioral.iterator.SongArray::forEach(java.util.function.Consumer) [0 time(s)]

	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

	---> behavioral.iterator.SongArray::registerNatives() [0 time(s)]

	---> behavioral.iterator.SongArray::notify() [0 time(s)]

	---> behavioral.iterator.SongArray::hashCode() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

	---> behavioral.iterator.SongArray::toString() [0 time(s)]

	---> behavioral.iterator.SongArray::clone() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

	---> behavioral.iterator.SongArray::wait() [0 time(s)]

	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.DiscJockey::registerNatives() [0 time(s)]

	---> behavioral.iterator.DiscJockey::notify() [0 time(s)]

	---> behavioral.iterator.DiscJockey::hashCode() [0 time(s)]

	---> behavioral.iterator.DiscJockey::finalize() [0 time(s)]

	---> behavioral.iterator.DiscJockey::toString() [0 time(s)]

	---> behavioral.iterator.DiscJockey::clone() [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::getClass() [0 time(s)]

	---> behavioral.iterator.DiscJockey::wait(long) [0 time(s)]

	---> behavioral.iterator.DiscJockey::wait(long,int) [0 time(s)]

	---> behavioral.iterator.DiscJockey::wait() [0 time(s)]

	---> behavioral.iterator.DiscJockey::notifyAll() [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::getName() [0 time(s)]

	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::notifyAll() [0 time(s)]

	---> behavioral.mediator.ChatUser::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.ChatUser::getId() [0 time(s)]

	---> behavioral.mediator.ChatUser::registerNatives() [0 time(s)]

	---> behavioral.mediator.ChatUser::notify() [0 time(s)]

	---> behavioral.mediator.ChatUser::hashCode() [0 time(s)]

	---> behavioral.mediator.ChatUser::getRoom() [0 time(s)]

	---> behavioral.mediator.ChatUser::finalize() [0 time(s)]

	---> behavioral.mediator.ChatUser::toString() [0 time(s)]

	---> behavioral.mediator.ChatUser::clone() [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

behavioral.mediator.IChatRoom:
	---> behavioral.mediator.ChatUser::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::addUser(behavioral.mediator.User) [0 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.ChatUser::getClass() [0 time(s)]

	---> behavioral.mediator.ChatUser::wait(long) [0 time(s)]

	---> behavioral.mediator.ChatUser::wait(long,int) [0 time(s)]

	---> behavioral.mediator.ChatUser::wait() [0 time(s)]

	---> behavioral.mediator.ChatUser::notifyAll() [0 time(s)]

	---> behavioral.mediator.ChatUser::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::getName() [0 time(s)]

	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::notifyAll() [0 time(s)]

	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::getId() [0 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::getRoom() [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

	---> behavioral.mediator.User::send(java.lang.String,java.lang.String) [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.mediator.User::notifyAll() [0 time(s)]

	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.mediator.User::get(int) [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.mediator.User::notifyAll() [0 time(s)]

	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::getState() [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::setState(java.lang.String) [0 time(s)]

	---> behavioral.memento.Memento::notifyAll() [0 time(s)]

	---> behavioral.memento.Memento::equals(java.lang.Object) [0 time(s)]

	---> behavioral.memento.Memento::registerNatives() [0 time(s)]

	---> behavioral.memento.Memento::notify() [0 time(s)]

	---> behavioral.memento.Memento::hashCode() [0 time(s)]

	---> behavioral.memento.Memento::getState() [0 time(s)]

	---> behavioral.memento.Memento::externalizeState() [0 time(s)]

	---> behavioral.memento.Memento::finalize() [0 time(s)]

	---> behavioral.memento.Memento::toString() [0 time(s)]

	---> behavioral.memento.Memento::clone() [0 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Memento::getClass() [0 time(s)]

	---> behavioral.memento.Memento::wait(long) [0 time(s)]

	---> behavioral.memento.Memento::wait(long,int) [0 time(s)]

	---> behavioral.memento.Memento::wait() [0 time(s)]

	---> behavioral.memento.Memento::notifyAll() [0 time(s)]

	---> behavioral.memento.Memento::equals(java.lang.Object) [0 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

	---> behavioral.memento.Originator::registerNatives() [0 time(s)]

	---> behavioral.memento.Originator::notify() [0 time(s)]

	---> behavioral.memento.Originator::hashCode() [0 time(s)]

	---> behavioral.memento.Originator::finalize() [0 time(s)]

	---> behavioral.memento.Originator::toString() [0 time(s)]

	---> behavioral.memento.Originator::clone() [0 time(s)]

behavioral.observer.Observer:
	---> behavioral.memento.Originator::update() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.memento.Originator::getClass() [0 time(s)]

	---> behavioral.memento.Originator::wait(long) [0 time(s)]

	---> behavioral.memento.Originator::wait(long,int) [0 time(s)]

	---> behavioral.memento.Originator::wait() [0 time(s)]

	---> behavioral.observer.StockGrabber::setGoogleStock(double) [0 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [0 time(s)]

	---> behavioral.observer.Observer::notifyAll() [0 time(s)]

	---> behavioral.observer.Observer::getIBMStock() [0 time(s)]

	---> behavioral.observer.Observer::equals(java.lang.Object) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::registerNatives() [0 time(s)]

	---> behavioral.observer.Observer::notify() [0 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::getGoogleStock() [0 time(s)]

	---> behavioral.observer.StockGrabber::hashCode() [0 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::getAppleStock() [0 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockGrabber::finalize() [0 time(s)]

	---> behavioral.observer.StockGrabber::toString() [0 time(s)]

	---> behavioral.observer.StockGrabber::clone() [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::getClass() [0 time(s)]

	---> behavioral.observer.StockGrabber::wait(long) [0 time(s)]

	---> behavioral.observer.StockGrabber::wait(long,int) [0 time(s)]

	---> behavioral.observer.StockGrabber::wait() [0 time(s)]

	---> behavioral.observer.StockGrabber::notifyAll() [0 time(s)]

	---> behavioral.observer.StockGrabber::equals(java.lang.Object) [0 time(s)]

	---> behavioral.observer.StockGrabber::registerNatives() [0 time(s)]

	---> behavioral.observer.StockObserver::update() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::notify() [0 time(s)]

	---> behavioral.observer.StockObserver::hashCode() [0 time(s)]

	---> behavioral.observer.StockObserver::finalize() [0 time(s)]

	---> behavioral.observer.StockObserver::toString() [0 time(s)]

	---> behavioral.observer.StockObserver::clone() [0 time(s)]

behavioral.observer.Subject:
	---> behavioral.observer.StockObserver::notifyObserver() [0 time(s)]

	---> behavioral.observer.StockObserver::register(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockObserver::unregister(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.Test:
	---> behavioral.observer.StockObserver::getClass() [0 time(s)]

	---> behavioral.observer.StockObserver::wait(long) [0 time(s)]

	---> behavioral.observer.StockObserver::wait(long,int) [0 time(s)]

	---> behavioral.observer.StockObserver::wait() [0 time(s)]

	---> behavioral.observer.StockObserver::notifyAll() [0 time(s)]

	---> behavioral.observer.StockObserver::equals(java.lang.Object) [0 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

	---> behavioral.observer.StockGrabber::registerNatives() [0 time(s)]

	---> behavioral.observer.StockGrabber::notify() [0 time(s)]

	---> behavioral.observer.StockGrabber::hashCode() [0 time(s)]

	---> behavioral.observer.StockGrabber::finalize() [0 time(s)]

	---> behavioral.observer.StockGrabber::toString() [0 time(s)]

	---> behavioral.observer.StockGrabber::clone() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.observer.StockGrabber::getClass() [0 time(s)]

	---> behavioral.observer.StockGrabber::getCashInMachine() [0 time(s)]

	---> behavioral.observer.StockGrabber::wait(long) [0 time(s)]

	---> behavioral.observer.StockGrabber::wait(long,int) [0 time(s)]

	---> behavioral.observer.StockGrabber::wait() [0 time(s)]

	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMState::notifyAll() [0 time(s)]

	---> behavioral.state.ATMState::setATMState(behavioral.state.ATMState) [0 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMState::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMState::registerNatives() [0 time(s)]

	---> behavioral.state.ATMState::getATMState() [0 time(s)]

	---> behavioral.state.ATMState::getNoCardState() [0 time(s)]

	---> behavioral.state.ATMState::notify() [0 time(s)]

	---> behavioral.state.ATMState::getHasCardState() [0 time(s)]

	---> behavioral.state.ATMState::hashCode() [0 time(s)]

	---> behavioral.state.ATMState::getNoCashState() [0 time(s)]

	---> behavioral.state.ATMState::getCorrectPinState() [0 time(s)]

	---> behavioral.state.ATMState::finalize() [0 time(s)]

	---> behavioral.state.ATMState::toString() [0 time(s)]

	---> behavioral.state.ATMState::clone() [0 time(s)]

	---> behavioral.state.ATMState::setCashInMachine(int) [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::getClass() [0 time(s)]

	---> behavioral.state.ATMState::wait(long) [0 time(s)]

	---> behavioral.state.ATMState::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMState::wait() [0 time(s)]

	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMState::notifyAll() [0 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMState::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMState::registerNatives() [0 time(s)]

	---> behavioral.state.ATMState::notify() [0 time(s)]

	---> behavioral.state.ATMState::hashCode() [0 time(s)]

	---> behavioral.state.ATMState::finalize() [0 time(s)]

	---> behavioral.state.ATMState::toString() [0 time(s)]

	---> behavioral.state.ATMState::clone() [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::getClass() [0 time(s)]

	---> behavioral.state.ATMState::wait(long) [0 time(s)]

	---> behavioral.state.ATMState::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMState::wait() [0 time(s)]

	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

	---> behavioral.state.ATMMachine::notify() [0 time(s)]

	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

	---> behavioral.state.ATMMachine::toString() [0 time(s)]

	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMMachine::wait() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

	---> behavioral.state.HasCard::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.HasCard::registerNatives() [0 time(s)]

	---> behavioral.state.HasCard::notify() [0 time(s)]

	---> behavioral.state.HasCard::hashCode() [0 time(s)]

	---> behavioral.state.HasCard::finalize() [0 time(s)]

	---> behavioral.state.HasCard::toString() [0 time(s)]

	---> behavioral.state.HasCard::clone() [0 time(s)]

behavioral.state.IATMState:
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.HasCard::ejectCard() [0 time(s)]

	---> behavioral.state.HasCard::requestCash(int) [0 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.HasCard::getClass() [0 time(s)]

	---> behavioral.state.HasCard::wait(long) [0 time(s)]

	---> behavioral.state.HasCard::wait(long,int) [0 time(s)]

	---> behavioral.state.HasCard::wait() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::notifyAll() [0 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.NoCard::registerNatives() [0 time(s)]

	---> behavioral.state.NoCard::notify() [0 time(s)]

	---> behavioral.state.NoCard::hashCode() [0 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

	---> behavioral.state.NoCard::finalize() [0 time(s)]

	---> behavioral.state.NoCard::toString() [0 time(s)]

	---> behavioral.state.NoCard::clone() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCard::getClass() [0 time(s)]

	---> behavioral.state.NoCard::wait(long) [0 time(s)]

	---> behavioral.state.NoCard::wait(long,int) [0 time(s)]

	---> behavioral.state.NoCard::wait() [0 time(s)]

	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::notifyAll() [0 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.NoCash::registerNatives() [0 time(s)]

	---> behavioral.state.NoCash::notify() [0 time(s)]

	---> behavioral.state.NoCash::hashCode() [0 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

	---> behavioral.state.NoCash::finalize() [0 time(s)]

	---> behavioral.state.NoCash::toString() [0 time(s)]

	---> behavioral.state.NoCash::clone() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.NoCash::getClass() [0 time(s)]

	---> behavioral.state.NoCash::wait(long) [0 time(s)]

	---> behavioral.state.NoCash::wait(long,int) [0 time(s)]

	---> behavioral.state.NoCash::wait() [0 time(s)]

	---> behavioral.state.NoCash::notifyAll() [0 time(s)]

	---> behavioral.state.NoCash::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

	---> behavioral.state.ATMMachine::notify() [0 time(s)]

	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

	---> behavioral.state.ATMMachine::toString() [0 time(s)]

	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMMachine::wait() [0 time(s)]

	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

	---> behavioral.state.ATMMachine::notify() [0 time(s)]

	---> behavioral.state.ATMMachine::execute(int,int) [0 time(s)]

	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

	---> behavioral.state.ATMMachine::toString() [0 time(s)]

	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.strategy.ArithmeticOperation:
	---> behavioral.state.ATMMachine::execute(int,int) [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMMachine::wait() [0 time(s)]

	---> behavioral.state.ATMMachine::reset() [0 time(s)]

	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

	---> behavioral.state.ATMMachine::notify() [0 time(s)]

	---> behavioral.state.ATMMachine::getResult() [0 time(s)]

	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::setOperation(behavioral.strategy.ArithmeticOperation) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.template_method.Game::hashCode() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::finalize() [0 time(s)]

	---> behavioral.template_method.Game::toString() [0 time(s)]

	---> behavioral.template_method.Game::clone() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::getClass() [0 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.template_method.Game::hashCode() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::finalize() [0 time(s)]

	---> behavioral.template_method.Game::toString() [0 time(s)]

	---> behavioral.template_method.Game::clone() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::getClass() [0 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.template_method.Game::hashCode() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::finalize() [0 time(s)]

	---> behavioral.template_method.Game::toString() [0 time(s)]

	---> behavioral.template_method.Game::clone() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::getClass() [0 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.template_method.Game::hashCode() [0 time(s)]

	---> behavioral.template_method.Game::finalize() [0 time(s)]

	---> behavioral.template_method.Game::toString() [0 time(s)]

	---> behavioral.template_method.Game::clone() [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.template_method.Game::getName() [0 time(s)]

	---> behavioral.template_method.Game::getClass() [0 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::setName(java.lang.String) [0 time(s)]

	---> behavioral.template_method.Game::setPrice(double) [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::getPrice() [0 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::getName() [0 time(s)]

	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.Visitor::wait() [0 time(s)]

	---> behavioral.visitor.Visitor::setName(java.lang.String) [0 time(s)]

	---> behavioral.visitor.Visitor::setPrice(double) [0 time(s)]

	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.Visitor::getPrice() [0 time(s)]

	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.Visitor::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::getName() [0 time(s)]

	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.Visitor::wait() [0 time(s)]

	---> behavioral.visitor.Visitor::setName(java.lang.String) [0 time(s)]

	---> behavioral.visitor.Visitor::setPrice(double) [0 time(s)]

	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.Visitor::getPrice() [0 time(s)]

	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.Visitor::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.Visitor::wait() [0 time(s)]

	---> behavioral.visitor.Visitor::getComputedTax() [0 time(s)]

	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.Visitor::notify() [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::getTaxRate() [0 time(s)]

	---> behavioral.visitor.Product::hashCode() [0 time(s)]

	---> behavioral.visitor.Product::finalize() [0 time(s)]

	---> behavioral.visitor.Product::toString() [0 time(s)]

	---> behavioral.visitor.Product::clone() [0 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [0 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::getComputedTax() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::getTaxRate() [0 time(s)]

	---> behavioral.visitor.Product::hashCode() [0 time(s)]

	---> behavioral.visitor.Product::finalize() [0 time(s)]

	---> behavioral.visitor.Product::toString() [0 time(s)]

	---> behavioral.visitor.Product::clone() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::hashCode() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::finalize() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::toString() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::clone() [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.TaxVisitor::getName() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::setName(java.lang.String) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::setPrice(double) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::getPrice() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Visitable:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

behavioral.visitor.Visitor:
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Liquor) [0 time(s)]

	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Necessity) [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.Visitor::wait() [0 time(s)]

	---> behavioral.visitor.Visitor::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.Visitor::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.Shape:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

	---> creational.abstract_factory.Shape::notify() [0 time(s)]

	---> creational.abstract_factory.Shape::hashCode() [0 time(s)]

	---> creational.abstract_factory.Shape::finalize() [0 time(s)]

	---> creational.abstract_factory.Shape::toString() [0 time(s)]

	---> creational.abstract_factory.Shape::clone() [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::getClass() [0 time(s)]

	---> creational.abstract_factory.Shape::wait(long) [0 time(s)]

	---> creational.abstract_factory.Shape::wait(long,int) [0 time(s)]

	---> creational.abstract_factory.Shape::wait() [0 time(s)]

	---> creational.abstract_factory.Shape::notifyAll() [0 time(s)]

	---> creational.abstract_factory.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

	---> creational.abstract_factory.Shape::draw() [0 time(s)]

	---> creational.abstract_factory.Shape::notify() [0 time(s)]

	---> creational.abstract_factory.Shape::hashCode() [0 time(s)]

	---> creational.abstract_factory.Shape::finalize() [0 time(s)]

	---> creational.abstract_factory.Shape::toString() [0 time(s)]

	---> creational.abstract_factory.Shape::clone() [0 time(s)]

creational.builder.IRobot:
	---> creational.abstract_factory.Shape::setTorso(java.lang.String) [0 time(s)]

	---> creational.abstract_factory.Shape::setArms(java.lang.String) [0 time(s)]

	---> creational.abstract_factory.Shape::setLegs(java.lang.String) [0 time(s)]

	---> creational.abstract_factory.Shape::setHead(java.lang.String) [0 time(s)]

creational.builder.IRobotBuilder:
	---> creational.abstract_factory.Shape::buildArms() [0 time(s)]

	---> creational.abstract_factory.Shape::buildHead() [0 time(s)]

	---> creational.abstract_factory.Shape::getRobot() [0 time(s)]

	---> creational.abstract_factory.Shape::buildTorso() [0 time(s)]

	---> creational.abstract_factory.Shape::buildLegs() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.abstract_factory.Shape::getClass() [0 time(s)]

	---> creational.abstract_factory.Shape::wait(long) [0 time(s)]

	---> creational.abstract_factory.Shape::wait(long,int) [0 time(s)]

	---> creational.abstract_factory.Shape::wait() [0 time(s)]

	---> creational.abstract_factory.Shape::notifyAll() [0 time(s)]

	---> creational.abstract_factory.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

	---> creational.abstract_factory.Shape::getRobot() [0 time(s)]

	---> creational.abstract_factory.Shape::notify() [0 time(s)]

	---> creational.builder.Robot::buildLegs() [0 time(s)]

	---> creational.builder.Robot::buildArms() [0 time(s)]

	---> creational.builder.Robot::hashCode() [0 time(s)]

	---> creational.builder.Robot::buildHead() [0 time(s)]

	---> creational.builder.Robot::finalize() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::clone() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::getClass() [0 time(s)]

	---> creational.builder.Robot::wait(long) [0 time(s)]

	---> creational.builder.Robot::wait(long,int) [0 time(s)]

	---> creational.builder.Robot::wait() [0 time(s)]

	---> creational.builder.Robot::setLegs(java.lang.String) [0 time(s)]

	---> creational.builder.Robot::notifyAll() [0 time(s)]

	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.Robot::setHead(java.lang.String) [0 time(s)]

	---> creational.builder.Robot::registerNatives() [0 time(s)]

	---> creational.builder.Robot::getTorso() [0 time(s)]

	---> creational.builder.Robot::notify() [0 time(s)]

	---> creational.builder.Robot::setTorso(java.lang.String) [0 time(s)]

	---> creational.builder.Robot::hashCode() [0 time(s)]

	---> creational.builder.Robot::setArms(java.lang.String) [0 time(s)]

	---> creational.builder.Robot::getArms() [0 time(s)]

	---> creational.builder.Robot::getHead() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::finalize() [0 time(s)]

	---> creational.builder.Robot::clone() [0 time(s)]

	---> creational.builder.Robot::getLegs() [0 time(s)]

creational.builder.RobotBuilder:
	---> creational.builder.Robot::getClass() [0 time(s)]

	---> creational.builder.Robot::wait(long) [0 time(s)]

	---> creational.builder.Robot::wait(long,int) [0 time(s)]

	---> creational.builder.Robot::wait() [0 time(s)]

	---> creational.builder.Robot::notifyAll() [0 time(s)]

	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.Robot::registerNatives() [0 time(s)]

	---> creational.builder.Robot::getRobot() [0 time(s)]

	---> creational.builder.Robot::notify() [0 time(s)]

	---> creational.builder.Robot::buildLegs() [0 time(s)]

	---> creational.builder.Robot::buildArms() [0 time(s)]

	---> creational.builder.Robot::hashCode() [0 time(s)]

	---> creational.builder.Robot::buildHead() [0 time(s)]

	---> creational.builder.Robot::finalize() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::clone() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.RobotEngineer:
	---> creational.builder.Robot::getClass() [0 time(s)]

	---> creational.builder.Robot::wait(long) [0 time(s)]

	---> creational.builder.Robot::wait(long,int) [0 time(s)]

	---> creational.builder.Robot::wait() [0 time(s)]

	---> creational.builder.Robot::notifyAll() [0 time(s)]

	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.Robot::registerNatives() [0 time(s)]

	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::notify() [0 time(s)]

	---> creational.builder.IRobotBuilder::hashCode() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::setRobotBuilder(creational.builder.IRobotBuilder) [0 time(s)]

	---> creational.builder.IRobotBuilder::finalize() [0 time(s)]

	---> creational.builder.IRobotBuilder::toString() [0 time(s)]

	---> creational.builder.IRobotBuilder::clone() [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.IRobotBuilder::getClass() [0 time(s)]

	---> creational.builder.IRobotBuilder::wait(long) [0 time(s)]

	---> creational.builder.IRobotBuilder::wait(long,int) [0 time(s)]

	---> creational.builder.IRobotBuilder::wait() [0 time(s)]

	---> creational.builder.IRobotBuilder::notifyAll() [0 time(s)]

	---> creational.builder.IRobotBuilder::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.IRobotBuilder::registerNatives() [0 time(s)]

	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::notify() [0 time(s)]

	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::hashCode() [0 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::finalize() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::clone() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.Robot::getClass() [0 time(s)]

	---> creational.builder.Robot::wait(long) [0 time(s)]

	---> creational.builder.Robot::wait(long,int) [0 time(s)]

	---> creational.builder.Robot::wait() [0 time(s)]

	---> creational.builder.Robot::notifyAll() [0 time(s)]

	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

	---> creational.builder.RobotEngineer::notify() [0 time(s)]

	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

	---> creational.builder.RobotEngineer::toString() [0 time(s)]

	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::getName() [0 time(s)]

	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

	---> creational.builder.RobotEngineer::wait() [0 time(s)]

	---> creational.builder.RobotEngineer::setName(java.lang.String) [0 time(s)]

	---> creational.builder.RobotEngineer::getAmtDamage() [0 time(s)]

	---> creational.builder.RobotEngineer::setAmtDamage(double) [0 time(s)]

	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

	---> creational.builder.RobotEngineer::notify() [0 time(s)]

	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

	---> creational.builder.RobotEngineer::toString() [0 time(s)]

	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::getName() [0 time(s)]

	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

	---> creational.builder.RobotEngineer::wait() [0 time(s)]

	---> creational.builder.RobotEngineer::setName(java.lang.String) [0 time(s)]

	---> creational.builder.RobotEngineer::getAmtDamage() [0 time(s)]

	---> creational.builder.RobotEngineer::setAmtDamage(double) [0 time(s)]

	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

	---> creational.builder.RobotEngineer::notify() [0 time(s)]

	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

	---> creational.builder.RobotEngineer::toString() [0 time(s)]

	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

	---> creational.builder.RobotEngineer::wait() [0 time(s)]

	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

	---> creational.builder.RobotEngineer::notify() [0 time(s)]

	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

	---> creational.builder.RobotEngineer::createEnemyShip(java.lang.String) [0 time(s)]

	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

	---> creational.builder.RobotEngineer::toString() [0 time(s)]

	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

	---> creational.builder.RobotEngineer::wait() [0 time(s)]

	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShipFactory::notify() [0 time(s)]

	---> creational.factory.EnemyShipFactory::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::finalize() [0 time(s)]

	---> creational.factory.EnemyShip::toString() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::getName() [0 time(s)]

	---> creational.factory.EnemyShip::getClass() [0 time(s)]

	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

	---> creational.factory.EnemyShip::wait() [0 time(s)]

	---> creational.factory.EnemyShip::setName(java.lang.String) [0 time(s)]

	---> creational.factory.EnemyShip::getAmtDamage() [0 time(s)]

	---> creational.factory.EnemyShip::setAmtDamage(double) [0 time(s)]

	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShip::notify() [0 time(s)]

	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

	---> creational.factory.EnemyShip::finalize() [0 time(s)]

	---> creational.factory.EnemyShip::toString() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::getClass() [0 time(s)]

	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

	---> creational.factory.EnemyShip::wait() [0 time(s)]

	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShipFactory::notify() [0 time(s)]

	---> creational.factory.EnemyShipFactory::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

	---> creational.factory.EnemyShip::finalize() [0 time(s)]

	---> creational.factory.EnemyShip::toString() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::getName() [0 time(s)]

	---> creational.factory.EnemyShip::getClass() [0 time(s)]

	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

	---> creational.factory.EnemyShip::wait() [0 time(s)]

	---> creational.factory.EnemyShip::setName(java.lang.String) [0 time(s)]

	---> creational.factory.EnemyShip::getAmtDamage() [0 time(s)]

	---> creational.factory.EnemyShip::setAmtDamage(double) [0 time(s)]

	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShip::notify() [0 time(s)]

	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

	---> creational.factory.EnemyShip::finalize() [0 time(s)]

	---> creational.factory.EnemyShip::toString() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::getClass() [0 time(s)]

	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

	---> creational.factory.EnemyShip::wait() [0 time(s)]

	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShip::getId() [0 time(s)]

	---> creational.factory.EnemyShip::setPosition(creational.prototype.Position) [0 time(s)]

	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShip::draw() [0 time(s)]

	---> creational.factory.EnemyShip::getPosition() [0 time(s)]

	---> creational.factory.EnemyShip::notify() [0 time(s)]

	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::getType() [0 time(s)]

	---> creational.factory.EnemyShip::setId(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::setX(double) [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::setY(double) [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::getX() [0 time(s)]

	---> creational.prototype.Shape::getY() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

	---> creational.prototype.Position::finalize() [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::getClass() [0 time(s)]

	---> creational.prototype.Position::wait(long) [0 time(s)]

	---> creational.prototype.Position::wait(long,int) [0 time(s)]

	---> creational.prototype.Position::wait() [0 time(s)]

	---> creational.prototype.Position::notifyAll() [0 time(s)]

	---> creational.prototype.Position::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Position::getId() [0 time(s)]

	---> creational.prototype.Position::setPosition(creational.prototype.Position) [0 time(s)]

	---> creational.prototype.Position::registerNatives() [0 time(s)]

	---> creational.prototype.Position::draw() [0 time(s)]

	---> creational.prototype.Position::getPosition() [0 time(s)]

	---> creational.prototype.Position::notify() [0 time(s)]

	---> creational.prototype.Position::hashCode() [0 time(s)]

	---> creational.prototype.Position::getType() [0 time(s)]

	---> creational.prototype.Position::setId(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::getId() [0 time(s)]

	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::draw() [0 time(s)]

	---> creational.prototype.Shape::getPosition() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::getType() [0 time(s)]

	---> creational.prototype.Shape::setId(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::getClass() [0 time(s)]

	---> creational.prototype.Rectangle::wait(long) [0 time(s)]

	---> creational.prototype.Rectangle::wait(long,int) [0 time(s)]

	---> creational.prototype.Rectangle::wait() [0 time(s)]

	---> creational.prototype.Rectangle::notifyAll() [0 time(s)]

	---> creational.prototype.Rectangle::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::getId() [0 time(s)]

	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::draw() [0 time(s)]

	---> creational.prototype.Shape::getPosition() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::getType() [0 time(s)]

	---> creational.prototype.Shape::setId(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

	---> creational.singleton.ExtendedSingleton2::registerNatives() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::notify() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::hashCode() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::finalize() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::toString() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::clone() [0 time(s)]

structural.adapter.EnemyAttacker:
	---> creational.singleton.ExtendedSingleton2::fireWeapon() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::driveForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::getClass() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait(long) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait(long,int) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::notifyAll() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::registerNatives() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::notify() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::hashCode() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::finalize() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::toString() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::clone() [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> creational.singleton.ExtendedSingleton2::getClass() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait(long) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait(long,int) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

	---> structural.adapter.EnemyRobot::registerNatives() [0 time(s)]

	---> structural.adapter.EnemyRobot::notify() [0 time(s)]

	---> structural.adapter.EnemyRobot::setRobot(structural.adapter.EnemyRobot) [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::hashCode() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

	---> structural.adapter.EnemyRobot::finalize() [0 time(s)]

	---> structural.adapter.EnemyRobot::toString() [0 time(s)]

	---> structural.adapter.EnemyRobot::clone() [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::getClass() [0 time(s)]

	---> structural.adapter.EnemyRobot::wait(long) [0 time(s)]

	---> structural.adapter.EnemyRobot::wait(long,int) [0 time(s)]

	---> structural.adapter.EnemyRobot::wait() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

	---> structural.adapter.EnemyRobot::registerNatives() [0 time(s)]

	---> structural.adapter.EnemyRobot::notify() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::hashCode() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

	---> structural.adapter.EnemyRobot::finalize() [0 time(s)]

	---> structural.adapter.EnemyRobot::toString() [0 time(s)]

	---> structural.adapter.EnemyRobot::clone() [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::getClass() [0 time(s)]

	---> structural.adapter.EnemyRobot::wait(long) [0 time(s)]

	---> structural.adapter.EnemyRobot::wait(long,int) [0 time(s)]

	---> structural.adapter.EnemyRobot::wait() [0 time(s)]

	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyAttacker::registerNatives() [0 time(s)]

	---> structural.adapter.EnemyAttacker::notify() [0 time(s)]

	---> structural.adapter.EnemyAttacker::hashCode() [0 time(s)]

	---> structural.adapter.EnemyAttacker::finalize() [0 time(s)]

	---> structural.adapter.EnemyAttacker::toString() [0 time(s)]

	---> structural.adapter.EnemyAttacker::clone() [0 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::getClass() [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait(long) [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait(long,int) [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait() [0 time(s)]

	---> structural.adapter.EnemyAttacker::notifyAll() [0 time(s)]

	---> structural.adapter.EnemyAttacker::equals(java.lang.Object) [0 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyAttacker::registerNatives() [0 time(s)]

	---> structural.adapter.EnemyAttacker::notify() [0 time(s)]

	---> structural.adapter.EnemyAttacker::hashCode() [0 time(s)]

	---> structural.adapter.EnemyAttacker::finalize() [0 time(s)]

	---> structural.adapter.EnemyAttacker::toString() [0 time(s)]

	---> structural.adapter.EnemyAttacker::clone() [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.adapter.EnemyAttacker::getClass() [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait(long) [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait(long,int) [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait() [0 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::getName() [0 time(s)]

	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::setChannel(int) [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::setVolume(int) [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::enable() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::getVolume() [0 time(s)]

	---> structural.bridge.Device::getChannel() [0 time(s)]

	---> structural.bridge.Device::disable() [0 time(s)]

	---> structural.bridge.Device::isEnabled() [0 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::getName() [0 time(s)]

	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::setChannel(int) [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::setVolume(int) [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::enable() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::getVolume() [0 time(s)]

	---> structural.bridge.Device::getChannel() [0 time(s)]

	---> structural.bridge.Device::disable() [0 time(s)]

	---> structural.bridge.Device::isEnabled() [0 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::getName() [0 time(s)]

	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::setChannel(int) [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::setVolume(int) [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::enable() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::getVolume() [0 time(s)]

	---> structural.bridge.Device::getChannel() [0 time(s)]

	---> structural.bridge.Device::disable() [0 time(s)]

	---> structural.bridge.Device::isEnabled() [0 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::finalize() [0 time(s)]

	---> structural.bridge.AdvancedRemote::toString() [0 time(s)]

	---> structural.bridge.AdvancedRemote::clone() [0 time(s)]

structural.composite.DiscJockey:
	---> structural.bridge.AdvancedRemote::getClass() [0 time(s)]

	---> structural.bridge.AdvancedRemote::wait(long) [0 time(s)]

	---> structural.bridge.AdvancedRemote::wait(long,int) [0 time(s)]

	---> structural.bridge.AdvancedRemote::wait() [0 time(s)]

	---> structural.bridge.AdvancedRemote::notifyAll() [0 time(s)]

	---> structural.bridge.AdvancedRemote::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.AdvancedRemote::registerNatives() [0 time(s)]

	---> structural.bridge.AdvancedRemote::notify() [0 time(s)]

	---> structural.bridge.AdvancedRemote::hashCode() [0 time(s)]

	---> structural.bridge.AdvancedRemote::getSongList() [0 time(s)]

	---> structural.composite.SongComponent::displaySongList() [0 time(s)]

	---> structural.composite.SongComponent::finalize() [0 time(s)]

	---> structural.composite.SongComponent::toString() [0 time(s)]

	---> structural.composite.SongComponent::clone() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

	---> structural.composite.SongComponent::wait(long) [0 time(s)]

	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

	---> structural.composite.SongComponent::wait() [0 time(s)]

	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::notifyAll() [0 time(s)]

	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.Song::registerNatives() [0 time(s)]

	---> structural.composite.Song::getSongName() [0 time(s)]

	---> structural.composite.Song::notify() [0 time(s)]

	---> structural.composite.Song::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.Song::hashCode() [0 time(s)]

	---> structural.composite.Song::getBandName() [0 time(s)]

	---> structural.composite.Song::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::finalize() [0 time(s)]

	---> structural.composite.SongComponent::toString() [0 time(s)]

	---> structural.composite.SongComponent::clone() [0 time(s)]

	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

	---> structural.composite.SongComponent::wait(long) [0 time(s)]

	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

	---> structural.composite.SongComponent::wait() [0 time(s)]

	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.SongComponent::registerNatives() [0 time(s)]

	---> structural.composite.SongComponent::getSongName() [0 time(s)]

	---> structural.composite.SongComponent::notify() [0 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::hashCode() [0 time(s)]

	---> structural.composite.SongComponent::getBandName() [0 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::finalize() [0 time(s)]

	---> structural.composite.SongComponent::toString() [0 time(s)]

	---> structural.composite.SongComponent::clone() [0 time(s)]

	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

	---> structural.composite.SongComponent::wait(long) [0 time(s)]

	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

	---> structural.composite.SongComponent::wait() [0 time(s)]

	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.SongComponent::registerNatives() [0 time(s)]

	---> structural.composite.SongComponent::getSongName() [0 time(s)]

	---> structural.composite.SongComponent::notify() [0 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getGroupName() [0 time(s)]

	---> structural.composite.SongComponent::hashCode() [0 time(s)]

	---> structural.composite.SongComponent::getBandName() [0 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::getGroupDescription() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::finalize() [0 time(s)]

	---> structural.composite.SongComponent::toString() [0 time(s)]

	---> structural.composite.SongComponent::clone() [0 time(s)]

	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

	---> structural.composite.SongComponent::wait(long) [0 time(s)]

	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

	---> structural.composite.SongComponent::wait() [0 time(s)]

	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

	---> structural.composite.DiscJockey::notify() [0 time(s)]

	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

	---> structural.composite.DiscJockey::finalize() [0 time(s)]

	---> structural.composite.DiscJockey::toString() [0 time(s)]

	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

	---> structural.composite.DiscJockey::wait() [0 time(s)]

	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

	---> structural.composite.DiscJockey::notify() [0 time(s)]

	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

	---> structural.composite.DiscJockey::finalize() [0 time(s)]

	---> structural.composite.DiscJockey::toString() [0 time(s)]

	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

	---> structural.composite.DiscJockey::wait() [0 time(s)]

	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

	---> structural.composite.DiscJockey::description() [0 time(s)]

	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

	---> structural.composite.DiscJockey::notify() [0 time(s)]

	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

	---> structural.composite.DiscJockey::price() [0 time(s)]

	---> structural.composite.DiscJockey::finalize() [0 time(s)]

	---> structural.composite.DiscJockey::toString() [0 time(s)]

	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

	---> structural.composite.DiscJockey::wait() [0 time(s)]

	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

	---> structural.composite.DiscJockey::description() [0 time(s)]

	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

	---> structural.composite.DiscJockey::notify() [0 time(s)]

	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

	---> structural.composite.DiscJockey::price() [0 time(s)]

	---> structural.composite.DiscJockey::finalize() [0 time(s)]

	---> structural.composite.DiscJockey::toString() [0 time(s)]

	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

	---> structural.composite.DiscJockey::wait() [0 time(s)]

	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.IBeverage:
	---> structural.decorator.Beverage::price() [0 time(s)]

	---> structural.decorator.Beverage::description() [0 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::setNumber(int) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::getNumber() [0 time(s)]

	---> structural.decorator.Beverage::setSecurityCode(int) [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::getBalance() [0 time(s)]

	---> structural.decorator.Beverage::getSecurityCode() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

	---> structural.decorator.Beverage::setBalance(double) [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.facade.BankAccount::canWithdraw(double) [0 time(s)]

	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [0 time(s)]

	---> structural.facade.BankAccount::notify() [0 time(s)]

	---> structural.facade.BankAccount::hashCode() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::finalize() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::toString() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::clone() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::getClass() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait(long) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::notify() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::hashCode() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::getSecurityCode() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::getAccountNumber() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::fetchBankAccount() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::finalize() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::toString() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::clone() [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountBalanceSystem::getClass() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait(long) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountNumberChecker::match(int) [0 time(s)]

	---> structural.facade.BankAccountNumberChecker::notify() [0 time(s)]

	---> structural.facade.BankAccountNumberChecker::hashCode() [0 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [0 time(s)]

	---> structural.facade.BankAccount::finalize() [0 time(s)]

	---> structural.facade.BankAccount::toString() [0 time(s)]

	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccount::getClass() [0 time(s)]

	---> structural.facade.BankAccount::wait(long) [0 time(s)]

	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccount::wait() [0 time(s)]

	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::notify() [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::hashCode() [0 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [0 time(s)]

	---> structural.facade.BankAccount::finalize() [0 time(s)]

	---> structural.facade.BankAccount::toString() [0 time(s)]

	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::getClass() [0 time(s)]

	---> structural.facade.BankAccount::wait(long) [0 time(s)]

	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccount::wait() [0 time(s)]

	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

	---> structural.facade.BankAccount::notify() [0 time(s)]

	---> structural.facade.BankAccount::hashCode() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::finalize() [0 time(s)]

	---> structural.facade.BankAccount::toString() [0 time(s)]

	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccount::getClass() [0 time(s)]

	---> structural.facade.BankAccount::wait(long) [0 time(s)]

	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccount::wait() [0 time(s)]

	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::getRadius() [0 time(s)]

	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

	---> structural.facade.BankAccountFacade::setRadius(int) [0 time(s)]

	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Position:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

	---> structural.facade.BankAccountFacade::setX(double) [0 time(s)]

	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountFacade::setY(double) [0 time(s)]

	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

	---> structural.facade.BankAccountFacade::getX() [0 time(s)]

	---> structural.facade.BankAccountFacade::getY() [0 time(s)]

	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Shape:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::registerNatives() [0 time(s)]

	---> structural.flyweight.Circle::notify() [0 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

	---> structural.flyweight.Circle::hashCode() [0 time(s)]

	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

	---> structural.flyweight.Circle::finalize() [0 time(s)]

	---> structural.flyweight.Circle::toString() [0 time(s)]

	---> structural.flyweight.Circle::clone() [0 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::getClass() [0 time(s)]

	---> structural.flyweight.Circle::wait(long) [0 time(s)]

	---> structural.flyweight.Circle::wait(long,int) [0 time(s)]

	---> structural.flyweight.Circle::wait() [0 time(s)]

	---> structural.flyweight.Circle::notifyAll() [0 time(s)]

	---> structural.flyweight.Circle::equals(java.lang.Object) [0 time(s)]

	---> structural.flyweight.Circle::registerNatives() [0 time(s)]

	---> structural.flyweight.Circle::notify() [0 time(s)]

	---> structural.flyweight.Circle::hashCode() [0 time(s)]

	---> structural.flyweight.Circle::finalize() [0 time(s)]

	---> structural.flyweight.Circle::toString() [0 time(s)]

	---> structural.flyweight.Circle::clone() [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::getClass() [0 time(s)]

	---> structural.proxy.Internet::wait(long) [0 time(s)]

	---> structural.proxy.Internet::wait(long,int) [0 time(s)]

	---> structural.proxy.Internet::wait() [0 time(s)]

	---> structural.proxy.Internet::notifyAll() [0 time(s)]

	---> structural.proxy.Internet::equals(java.lang.Object) [0 time(s)]

	---> structural.proxy.Internet::registerNatives() [0 time(s)]

	---> structural.proxy.Internet::notify() [0 time(s)]

	---> structural.proxy.Internet::hashCode() [0 time(s)]

	---> structural.proxy.Internet::finalize() [0 time(s)]

	---> structural.proxy.Internet::toString() [0 time(s)]

	---> structural.proxy.Internet::clone() [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::getClass() [0 time(s)]

	---> structural.proxy.Internet::wait(long) [0 time(s)]

	---> structural.proxy.Internet::wait(long,int) [0 time(s)]

	---> structural.proxy.Internet::wait() [0 time(s)]

	---> structural.proxy.Internet::notifyAll() [0 time(s)]

	---> structural.proxy.Internet::equals(java.lang.Object) [0 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]

	---> structural.proxy.Internet::registerNatives() [0 time(s)]

	---> structural.proxy.Internet::notify() [0 time(s)]

	---> structural.proxy.Internet::hashCode() [0 time(s)]

	---> structural.proxy.Internet::finalize() [0 time(s)]

	---> structural.proxy.Internet::toString() [0 time(s)]

	---> structural.proxy.Internet::clone() [0 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [0 time(s)]

	---> behavioral.command.TV::execute() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [0 time(s)]

	---> structural.composite.Song::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.mediator.User::get(int) [0 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [0 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [0 time(s)]

	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockObserver::update() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [0 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [0 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [0 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [0 time(s)]

	---> creational.builder.Robot::buildArms() [0 time(s)]

	---> creational.builder.Robot::buildHead() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [0 time(s)]

	---> creational.prototype.Position::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Triangle::loadCache() [3 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Rectangle::loadCache() [6 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [0 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::channelDown() [0 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [0 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [0 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [0 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [0 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [0 time(s)]

	---> structural.facade.BankAccount::deposit(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [0 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [0 time(s)]

	---> behavioral.command.TV::execute() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [0 time(s)]

	---> structural.composite.Song::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.mediator.User::get(int) [0 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [0 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [0 time(s)]

	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockObserver::update() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [0 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [0 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [0 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [0 time(s)]

	---> creational.builder.Robot::buildArms() [0 time(s)]

	---> creational.builder.Robot::buildHead() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [0 time(s)]

	---> creational.prototype.Position::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Triangle::loadCache() [3 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Rectangle::loadCache() [6 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [0 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::channelDown() [0 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [0 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [0 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [0 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [0 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [0 time(s)]

	---> structural.facade.BankAccount::deposit(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [0 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [0 time(s)]

	---> behavioral.command.TV::execute() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [0 time(s)]

	---> structural.composite.Song::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.mediator.User::get(int) [0 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [0 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [0 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [0 time(s)]

	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockObserver::update() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [0 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [0 time(s)]

	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [0 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [0 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [0 time(s)]

	---> creational.builder.Robot::buildArms() [0 time(s)]

	---> creational.builder.Robot::buildHead() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [0 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [0 time(s)]

	---> creational.prototype.Position::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Triangle::loadCache() [3 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Rectangle::loadCache() [6 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [0 time(s)]

	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [0 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::channelDown() [0 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [0 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [0 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [0 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [0 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [0 time(s)]

	---> structural.facade.BankAccount::deposit(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [0 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [2 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::redo() [2 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [2 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [2 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::execute() [2 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [1 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [0 time(s)]

	---> structural.composite.Song::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [1 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [1 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [3 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.mediator.User::get(int) [0 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [2 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [1 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockGrabber::update() [3 time(s)]

	---> behavioral.observer.StockObserver::update() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [1 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [1 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [2 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [4 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [0 time(s)]

	---> creational.prototype.Position::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [1 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [3 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [6 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [9 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::mute() [3 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [1 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [3 time(s)]

	---> structural.composite.Song::getInfo() [3 time(s)]

	---> structural.composite.Song::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [2 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [1 time(s)]

	---> structural.facade.BankAccount::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [5 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [1 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [2 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [2 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [2 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::redo() [2 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [2 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [2 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::execute() [2 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [1 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [0 time(s)]

	---> structural.composite.Song::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [1 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [1 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [3 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.mediator.User::get(int) [0 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [2 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [1 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockGrabber::update() [3 time(s)]

	---> behavioral.observer.StockObserver::update() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [0 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [1 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [1 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [2 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [4 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [0 time(s)]

	---> creational.prototype.Position::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [1 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [3 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [6 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [9 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [2 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [3 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::mute() [3 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [1 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [3 time(s)]

	---> structural.composite.Song::getInfo() [3 time(s)]

	---> structural.composite.Song::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [3 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::getInfo() [4 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [2 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [1 time(s)]

	---> structural.facade.BankAccount::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [5 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [1 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [0 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [2 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [2 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [0 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [2 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.Class::history() [0 time(s)]

	---> java.lang.Class::redo() [0 time(s)]

	---> java.lang.Class::redo() [0 time(s)]

	---> java.lang.Class::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::redo() [2 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [2 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [2 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::execute() [2 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> java.lang.String::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.Test:
	---> java.lang.String::main(java.lang.String[]) [0 time(s)]

	---> java.lang.String::main(java.lang.String[]) [0 time(s)]

	---> java.lang.String::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [1 time(s)]

behavioral.iterator.Song:
	---> java.lang.StringBuffer::toString() [1 time(s)]

	---> java.lang.StringBuffer::toString() [2 time(s)]

	---> java.lang.StringBuffer::toString() [3 time(s)]

	---> java.lang.StringBuffer::toString() [4 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> java.lang.StringBuffer::iterator() [0 time(s)]

	---> java.lang.StringBuffer::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [1 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [1 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [3 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.mediator.User::get(int) [0 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [2 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [1 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockGrabber::update() [3 time(s)]

	---> behavioral.observer.StockObserver::update() [4 time(s)]

	---> java.lang.StringBuffer::displayPrices() [1 time(s)]

	---> java.lang.StringBuffer::displayPrices() [2 time(s)]

	---> java.lang.StringBuffer::displayPrices() [3 time(s)]

	---> java.lang.StringBuffer::displayPrices() [4 time(s)]

	---> java.lang.StringBuffer::displayPrices() [4 time(s)]

	---> java.lang.StringBuffer::displayPrices() [5 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [1 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [1 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> java.lang.Class::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> java.lang.Class::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [2 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Robot:
	---> java.lang.StringBuffer::toString() [1 time(s)]

	---> java.lang.StringBuffer::toString() [2 time(s)]

	---> java.lang.StringBuffer::toString() [3 time(s)]

	---> java.lang.StringBuffer::toString() [4 time(s)]

	---> java.lang.StringBuffer::toString() [5 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [4 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [0 time(s)]

	---> java.lang.Object::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> java.lang.CloneNotSupportedException::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Position:
	---> java.lang.Object::clone() [1 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [0 time(s)]

	---> java.lang.Object::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> java.lang.CloneNotSupportedException::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> java.lang.Object::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> java.lang.CloneNotSupportedException::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [1 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [3 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [6 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [9 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [0 time(s)]

	---> java.lang.Object::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> java.lang.CloneNotSupportedException::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.singleton.ExtendedSingleton2:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.singleton.Singleton:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::mute() [3 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [1 time(s)]

structural.composite.Song:
	---> java.lang.StringBuilder::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> java.lang.StringBuilder::getInfo() [3 time(s)]

	---> structural.composite.Song::getInfo() [4 time(s)]

	---> java.lang.StringBuilder::getInfo() [5 time(s)]

	---> structural.composite.Song::getInfo() [6 time(s)]

	---> java.lang.StringBuilder::getInfo() [7 time(s)]

	---> java.lang.StringBuilder::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> java.lang.StringBuffer::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> java.lang.StringBuffer::getInfo() [3 time(s)]

	---> structural.composite.SongGroup::getInfo() [4 time(s)]

	---> java.lang.String::getInfo() [5 time(s)]

	---> java.lang.StringBuffer::getInfo() [6 time(s)]

	---> java.lang.StringBuffer::getInfo() [7 time(s)]

	---> java.lang.StringBuffer::getInfo() [8 time(s)]

	---> java.lang.StringBuffer::getInfo() [9 time(s)]

	---> java.lang.StringBuffer::getInfo() [9 time(s)]

	---> java.lang.StringBuffer::getInfo() [9 time(s)]

	---> java.lang.StringBuffer::getInfo() [9 time(s)]

	---> java.lang.StringBuffer::getInfo() [10 time(s)]

	---> structural.composite.SongComponent::getInfo() [11 time(s)]

	---> java.lang.StringBuffer::getInfo() [12 time(s)]

	---> structural.composite.SongComponent::getInfo() [13 time(s)]

	---> java.lang.StringBuffer::getInfo() [14 time(s)]

	---> java.lang.StringBuffer::remove(structural.composite.SongComponent) [0 time(s)]

	---> java.lang.StringBuffer::getComponent(int) [0 time(s)]

	---> java.lang.StringBuffer::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [2 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [1 time(s)]

	---> structural.facade.BankAccount::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [5 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [1 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> java.lang.StringBuffer::setWelcomeMessage() [1 time(s)]

	---> java.lang.StringBuffer::setWelcomeMessage() [2 time(s)]

	---> java.lang.StringBuffer::setWelcomeMessage() [3 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [4 time(s)]

	---> java.lang.StringBuffer::setWelcomeMessage() [5 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [6 time(s)]

	---> java.lang.StringBuffer::setWelcomeMessage() [7 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [1 time(s)]

	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [2 time(s)]

	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [3 time(s)]

	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [4 time(s)]

	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [4 time(s)]

	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [5 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> java.lang.StringBuffer::getCircle(java.lang.String) [0 time(s)]

	---> java.lang.StringBuffer::getCircle(java.lang.String) [0 time(s)]

	---> java.lang.StringBuffer::getCircle(java.lang.String) [0 time(s)]

structural.flyweight.Test:
	---> java.lang.StringBuffer::main(java.lang.String[]) [0 time(s)]

	---> java.lang.StringBuffer::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::getClass() [0 time(s)]

	---> ::wait(long) [0 time(s)]

	---> ::wait(long,int) [0 time(s)]

	---> ::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getFilePath() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setFilePath(java.lang.String) [0 time(s)]

behavioral.chain_of_responsibility.ILogger:
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

behavioral.chain_of_responsibility.LogRequest:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getMessage() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setLevel(behavioral.chain_of_responsibility.LogRequestLevel) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setMessage(java.lang.String) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getLevel() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.LogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::value() [0 time(s)]

behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::compareTo(java.lang.Enum) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::describeConstable() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getDeclaringClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::name() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::ordinal() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::readObject(java.io.ObjectInputStream) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::readObjectNoData() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::value() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::valueOf(java.lang.String) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::values() [0 time(s)]

behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notifyAll() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::equals(java.lang.Object) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::registerNatives() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::notify() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::hashCode() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::finalize() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::toString() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::clone() [0 time(s)]

behavioral.command.Command:
	---> behavioral.chain_of_responsibility.ILogger::getName() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::undo() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::execute() [0 time(s)]

behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getClass() [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait(long,int) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::wait() [0 time(s)]

	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.Class::notifyAll() [0 time(s)]

	---> java.lang.Class::equals(java.lang.Object) [0 time(s)]

	---> java.lang.Class::registerNatives() [0 time(s)]

	---> java.lang.Class::history() [0 time(s)]

	---> behavioral.command.Command::redo() [2 time(s)]

	---> behavioral.command.Command::notify() [0 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [2 time(s)]

	---> behavioral.command.Command::hashCode() [0 time(s)]

	---> behavioral.command.Command::undo() [2 time(s)]

	---> behavioral.command.Command::finalize() [0 time(s)]

	---> behavioral.command.Command::toString() [0 time(s)]

	---> behavioral.command.Command::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.TV::registerNatives() [0 time(s)]

	---> behavioral.command.TV::notify() [0 time(s)]

	---> behavioral.command.TV::execute() [2 time(s)]

	---> behavioral.command.TV::hashCode() [0 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

	---> behavioral.command.TV::finalize() [0 time(s)]

	---> behavioral.command.TV::toString() [0 time(s)]

	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.TV::registerNatives() [0 time(s)]

	---> behavioral.command.TV::notify() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::hashCode() [0 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::finalize() [0 time(s)]

	---> behavioral.command.TV::toString() [0 time(s)]

	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.TV::registerNatives() [0 time(s)]

	---> behavioral.command.TV::notify() [0 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::hashCode() [0 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::finalize() [0 time(s)]

	---> behavioral.command.TV::toString() [0 time(s)]

	---> behavioral.command.TV::clone() [0 time(s)]

behavioral.command.TV:
	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.TV::switchChannel(int) [0 time(s)]

	---> behavioral.command.TV::registerNatives() [0 time(s)]

	---> behavioral.command.TV::notify() [0 time(s)]

	---> behavioral.command.TV::switchOff() [0 time(s)]

	---> behavioral.command.TV::hashCode() [0 time(s)]

	---> behavioral.command.TV::getChannel() [0 time(s)]

	---> behavioral.command.TV::isOn() [0 time(s)]

	---> behavioral.command.TV::finalize() [0 time(s)]

	---> behavioral.command.TV::toString() [0 time(s)]

	---> behavioral.command.TV::clone() [0 time(s)]

	---> behavioral.command.TV::switchOn() [0 time(s)]

behavioral.command.Test:
	---> behavioral.command.TV::getClass() [0 time(s)]

	---> behavioral.command.TV::wait(long) [0 time(s)]

	---> behavioral.command.TV::wait(long,int) [0 time(s)]

	---> behavioral.command.TV::wait() [0 time(s)]

	---> behavioral.command.TV::notifyAll() [0 time(s)]

	---> behavioral.command.TV::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

	---> behavioral.command.CommandManager::registerNatives() [0 time(s)]

	---> behavioral.command.CommandManager::notify() [0 time(s)]

	---> behavioral.command.CommandManager::hashCode() [0 time(s)]

	---> behavioral.command.CommandManager::finalize() [0 time(s)]

	---> behavioral.command.CommandManager::toString() [0 time(s)]

	---> behavioral.command.CommandManager::clone() [0 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.command.CommandManager::getClass() [0 time(s)]

	---> behavioral.command.CommandManager::wait(long) [0 time(s)]

	---> behavioral.command.CommandManager::wait(long,int) [0 time(s)]

	---> behavioral.command.CommandManager::wait() [0 time(s)]

	---> behavioral.command.CommandManager::notifyAll() [0 time(s)]

	---> behavioral.command.CommandManager::equals(java.lang.Object) [0 time(s)]

	---> behavioral.command.CommandManager::registerNatives() [0 time(s)]

	---> behavioral.command.CommandManager::notify() [0 time(s)]

	---> behavioral.command.CommandManager::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.BinaryExpression:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

	---> behavioral.interpreter.Expression::notify() [0 time(s)]

	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.Expression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [0 time(s)]

behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

	---> behavioral.interpreter.Expression::notify() [0 time(s)]

	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> behavioral.interpreter.Expression::notifyAll() [0 time(s)]

	---> behavioral.interpreter.Expression::equals(java.lang.Object) [0 time(s)]

	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

	---> behavioral.interpreter.Expression::notify() [0 time(s)]

	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

	---> java.lang.String::interpret(java.lang.String) [1 time(s)]

	---> java.lang.String::finalize() [0 time(s)]

	---> java.lang.String::toString() [0 time(s)]

	---> java.lang.String::clone() [0 time(s)]

behavioral.interpreter.Test:
	---> java.lang.String::getClass() [0 time(s)]

	---> java.lang.String::wait(long) [0 time(s)]

	---> java.lang.String::wait(long,int) [0 time(s)]

	---> java.lang.String::wait() [0 time(s)]

	---> java.lang.String::notifyAll() [0 time(s)]

	---> java.lang.String::getIsFemaleExpression() [0 time(s)]

	---> java.lang.String::equals(java.lang.Object) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::registerNatives() [0 time(s)]

	---> behavioral.interpreter.Expression::notify() [0 time(s)]

	---> behavioral.interpreter.Expression::hashCode() [0 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

	---> behavioral.interpreter.Expression::finalize() [0 time(s)]

	---> behavioral.interpreter.Expression::toString() [0 time(s)]

	---> behavioral.interpreter.Expression::clone() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> behavioral.interpreter.Expression::getClass() [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long) [0 time(s)]

	---> behavioral.interpreter.Expression::wait(long,int) [0 time(s)]

	---> behavioral.interpreter.Expression::wait() [0 time(s)]

	---> structural.composite.Song::displaySongs() [1 time(s)]

	---> structural.composite.Song::notifyAll() [0 time(s)]

	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.Song::registerNatives() [0 time(s)]

	---> structural.composite.Song::notify() [0 time(s)]

	---> structural.composite.Song::hashCode() [0 time(s)]

	---> structural.composite.Song::finalize() [0 time(s)]

	---> structural.composite.Song::toString() [0 time(s)]

	---> structural.composite.Song::clone() [0 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::getClass() [0 time(s)]

	---> structural.composite.Song::wait(long) [0 time(s)]

	---> structural.composite.Song::wait(long,int) [0 time(s)]

	---> structural.composite.Song::wait() [0 time(s)]

	---> structural.composite.Song::notifyAll() [0 time(s)]

	---> structural.composite.Song::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.Song::registerNatives() [0 time(s)]

	---> structural.composite.Song::getSongName() [0 time(s)]

	---> structural.composite.Song::notify() [0 time(s)]

	---> structural.composite.Song::hashCode() [0 time(s)]

	---> structural.composite.Song::getBandName() [0 time(s)]

	---> java.lang.StringBuffer::toString() [4 time(s)]

	---> java.lang.StringBuffer::finalize() [0 time(s)]

	---> java.lang.StringBuffer::clone() [0 time(s)]

	---> java.lang.StringBuffer::getYearReleased() [0 time(s)]

behavioral.iterator.SongAggregate:
	---> java.lang.StringBuffer::iterator() [0 time(s)]

	---> java.lang.StringBuffer::spliterator() [0 time(s)]

	---> java.lang.StringBuffer::forEach(java.util.function.Consumer) [0 time(s)]

	---> java.lang.StringBuffer::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongArray:
	---> java.lang.StringBuffer::getClass() [0 time(s)]

	---> java.lang.StringBuffer::wait(long) [0 time(s)]

	---> java.lang.StringBuffer::wait(long,int) [0 time(s)]

	---> java.lang.StringBuffer::wait() [0 time(s)]

	---> java.lang.StringBuffer::spliterator() [0 time(s)]

	---> java.lang.StringBuffer::notifyAll() [0 time(s)]

	---> java.lang.StringBuffer::forEach(java.util.function.Consumer) [0 time(s)]

	---> java.lang.StringBuffer::equals(java.lang.Object) [0 time(s)]

	---> java.lang.StringBuffer::length() [0 time(s)]

	---> java.lang.StringBuffer::registerNatives() [0 time(s)]

	---> java.lang.StringBuffer::notify() [0 time(s)]

	---> java.lang.StringBuffer::hashCode() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

	---> behavioral.iterator.SongArray::toString() [0 time(s)]

	---> behavioral.iterator.SongArray::clone() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

	---> behavioral.iterator.SongArray::wait() [0 time(s)]

	---> behavioral.iterator.SongArray::spliterator() [0 time(s)]

	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

	---> behavioral.iterator.SongArray::forEach(java.util.function.Consumer) [0 time(s)]

	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

	---> behavioral.iterator.SongArray::registerNatives() [0 time(s)]

	---> behavioral.iterator.SongArray::notify() [0 time(s)]

	---> behavioral.iterator.SongArray::hashCode() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

	---> behavioral.iterator.SongArray::toString() [0 time(s)]

	---> behavioral.iterator.SongArray::clone() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

	---> behavioral.iterator.SongArray::wait() [0 time(s)]

	---> behavioral.iterator.SongArray::spliterator() [0 time(s)]

	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

	---> behavioral.iterator.SongArray::forEach(java.util.function.Consumer) [0 time(s)]

	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

	---> behavioral.iterator.SongArray::registerNatives() [0 time(s)]

	---> behavioral.iterator.SongArray::notify() [0 time(s)]

	---> behavioral.iterator.SongArray::hashCode() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::finalize() [0 time(s)]

	---> behavioral.iterator.SongArray::toString() [0 time(s)]

	---> behavioral.iterator.SongArray::clone() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongArray::getClass() [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long) [0 time(s)]

	---> behavioral.iterator.SongArray::wait(long,int) [0 time(s)]

	---> behavioral.iterator.SongArray::wait() [0 time(s)]

	---> behavioral.iterator.SongArray::notifyAll() [0 time(s)]

	---> behavioral.iterator.SongArray::equals(java.lang.Object) [0 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.DiscJockey::registerNatives() [0 time(s)]

	---> behavioral.iterator.DiscJockey::notify() [0 time(s)]

	---> behavioral.iterator.DiscJockey::hashCode() [0 time(s)]

	---> behavioral.iterator.DiscJockey::finalize() [0 time(s)]

	---> behavioral.iterator.DiscJockey::toString() [0 time(s)]

	---> behavioral.iterator.DiscJockey::clone() [0 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::getClass() [0 time(s)]

	---> behavioral.iterator.DiscJockey::wait(long) [0 time(s)]

	---> behavioral.iterator.DiscJockey::wait(long,int) [0 time(s)]

	---> behavioral.iterator.DiscJockey::wait() [0 time(s)]

	---> behavioral.iterator.DiscJockey::notifyAll() [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [1 time(s)]

	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::getName() [0 time(s)]

	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::notifyAll() [0 time(s)]

	---> behavioral.mediator.ChatUser::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.ChatUser::getId() [0 time(s)]

	---> behavioral.mediator.ChatUser::registerNatives() [0 time(s)]

	---> behavioral.mediator.ChatUser::notify() [0 time(s)]

	---> behavioral.mediator.ChatUser::hashCode() [0 time(s)]

	---> behavioral.mediator.ChatUser::getRoom() [0 time(s)]

	---> behavioral.mediator.ChatUser::finalize() [0 time(s)]

	---> behavioral.mediator.ChatUser::toString() [0 time(s)]

	---> behavioral.mediator.ChatUser::clone() [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [3 time(s)]

behavioral.mediator.IChatRoom:
	---> behavioral.mediator.ChatUser::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::addUser(behavioral.mediator.User) [0 time(s)]

behavioral.mediator.Test:
	---> behavioral.mediator.ChatUser::getClass() [0 time(s)]

	---> behavioral.mediator.ChatUser::wait(long) [0 time(s)]

	---> behavioral.mediator.ChatUser::wait(long,int) [0 time(s)]

	---> behavioral.mediator.ChatUser::wait() [0 time(s)]

	---> behavioral.mediator.ChatUser::notifyAll() [0 time(s)]

	---> behavioral.mediator.ChatUser::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.mediator.User:
	---> behavioral.mediator.User::getName() [0 time(s)]

	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::notifyAll() [0 time(s)]

	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::getId() [0 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::getRoom() [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

	---> behavioral.mediator.User::send(java.lang.String,java.lang.String) [0 time(s)]

behavioral.memento.CareTaker:
	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.mediator.User::notifyAll() [0 time(s)]

	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.mediator.User::get(int) [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.memento.Memento:
	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.mediator.User::notifyAll() [0 time(s)]

	---> behavioral.mediator.User::equals(java.lang.Object) [0 time(s)]

	---> behavioral.mediator.User::registerNatives() [0 time(s)]

	---> behavioral.mediator.User::notify() [0 time(s)]

	---> behavioral.mediator.User::hashCode() [0 time(s)]

	---> behavioral.mediator.User::getState() [0 time(s)]

	---> behavioral.mediator.User::finalize() [0 time(s)]

	---> behavioral.mediator.User::toString() [0 time(s)]

	---> behavioral.mediator.User::clone() [0 time(s)]

behavioral.memento.Originator:
	---> behavioral.mediator.User::getClass() [0 time(s)]

	---> behavioral.mediator.User::wait(long) [0 time(s)]

	---> behavioral.mediator.User::wait(long,int) [0 time(s)]

	---> behavioral.mediator.User::wait() [0 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [2 time(s)]

	---> behavioral.memento.Memento::setState(java.lang.String) [0 time(s)]

	---> behavioral.memento.Memento::notifyAll() [0 time(s)]

	---> behavioral.memento.Memento::equals(java.lang.Object) [0 time(s)]

	---> behavioral.memento.Memento::registerNatives() [0 time(s)]

	---> behavioral.memento.Memento::notify() [0 time(s)]

	---> behavioral.memento.Memento::hashCode() [0 time(s)]

	---> behavioral.memento.Memento::getState() [0 time(s)]

	---> behavioral.memento.Memento::externalizeState() [0 time(s)]

	---> behavioral.memento.Memento::finalize() [0 time(s)]

	---> behavioral.memento.Memento::toString() [0 time(s)]

	---> behavioral.memento.Memento::clone() [0 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Memento::getClass() [0 time(s)]

	---> behavioral.memento.Memento::wait(long) [0 time(s)]

	---> behavioral.memento.Memento::wait(long,int) [0 time(s)]

	---> behavioral.memento.Memento::wait() [0 time(s)]

	---> behavioral.memento.Memento::notifyAll() [0 time(s)]

	---> behavioral.memento.Memento::equals(java.lang.Object) [0 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

	---> behavioral.memento.Originator::registerNatives() [0 time(s)]

	---> behavioral.memento.Originator::notify() [0 time(s)]

	---> behavioral.memento.Originator::hashCode() [0 time(s)]

	---> behavioral.memento.Originator::finalize() [0 time(s)]

	---> behavioral.memento.Originator::toString() [0 time(s)]

	---> behavioral.memento.Originator::clone() [0 time(s)]

behavioral.observer.Observer:
	---> behavioral.memento.Originator::update() [0 time(s)]

behavioral.observer.StockGrabber:
	---> behavioral.memento.Originator::getClass() [0 time(s)]

	---> behavioral.memento.Originator::wait(long) [0 time(s)]

	---> behavioral.memento.Originator::wait(long,int) [0 time(s)]

	---> behavioral.memento.Originator::wait() [0 time(s)]

	---> behavioral.observer.StockGrabber::setGoogleStock(double) [1 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [1 time(s)]

	---> behavioral.observer.Observer::notifyAll() [0 time(s)]

	---> behavioral.observer.Observer::getIBMStock() [0 time(s)]

	---> behavioral.observer.Observer::equals(java.lang.Object) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::registerNatives() [0 time(s)]

	---> behavioral.observer.Observer::notify() [0 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::getGoogleStock() [0 time(s)]

	---> behavioral.observer.StockGrabber::hashCode() [0 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::getAppleStock() [0 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockGrabber::finalize() [0 time(s)]

	---> behavioral.observer.StockGrabber::toString() [0 time(s)]

	---> behavioral.observer.StockGrabber::clone() [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::getClass() [0 time(s)]

	---> behavioral.observer.StockGrabber::wait(long) [0 time(s)]

	---> behavioral.observer.StockGrabber::wait(long,int) [0 time(s)]

	---> behavioral.observer.StockGrabber::wait() [0 time(s)]

	---> behavioral.observer.StockGrabber::notifyAll() [0 time(s)]

	---> behavioral.observer.StockGrabber::equals(java.lang.Object) [0 time(s)]

	---> behavioral.observer.StockGrabber::registerNatives() [0 time(s)]

	---> behavioral.observer.StockObserver::update() [4 time(s)]

	---> java.lang.StringBuffer::displayPrices() [5 time(s)]

	---> java.lang.StringBuffer::notify() [0 time(s)]

	---> java.lang.StringBuffer::hashCode() [0 time(s)]

	---> java.lang.StringBuffer::finalize() [0 time(s)]

	---> java.lang.StringBuffer::toString() [0 time(s)]

	---> java.lang.StringBuffer::clone() [0 time(s)]

behavioral.observer.Subject:
	---> java.lang.StringBuffer::notifyObserver() [0 time(s)]

	---> java.lang.StringBuffer::register(behavioral.observer.Observer) [0 time(s)]

	---> java.lang.StringBuffer::unregister(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.Test:
	---> java.lang.StringBuffer::getClass() [0 time(s)]

	---> java.lang.StringBuffer::wait(long) [0 time(s)]

	---> java.lang.StringBuffer::wait(long,int) [0 time(s)]

	---> java.lang.StringBuffer::wait() [0 time(s)]

	---> java.lang.StringBuffer::notifyAll() [0 time(s)]

	---> java.lang.StringBuffer::equals(java.lang.Object) [0 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

	---> behavioral.observer.StockGrabber::registerNatives() [0 time(s)]

	---> behavioral.observer.StockGrabber::notify() [0 time(s)]

	---> behavioral.observer.StockGrabber::hashCode() [0 time(s)]

	---> behavioral.observer.StockGrabber::finalize() [0 time(s)]

	---> behavioral.observer.StockGrabber::toString() [0 time(s)]

	---> behavioral.observer.StockGrabber::clone() [0 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.observer.StockGrabber::getClass() [0 time(s)]

	---> behavioral.observer.StockGrabber::getCashInMachine() [0 time(s)]

	---> behavioral.observer.StockGrabber::wait(long) [0 time(s)]

	---> behavioral.observer.StockGrabber::wait(long,int) [0 time(s)]

	---> behavioral.observer.StockGrabber::wait() [0 time(s)]

	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMState::notifyAll() [0 time(s)]

	---> behavioral.state.ATMState::setATMState(behavioral.state.ATMState) [0 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMState::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMState::registerNatives() [0 time(s)]

	---> behavioral.state.ATMState::getATMState() [0 time(s)]

	---> behavioral.state.ATMState::getNoCardState() [0 time(s)]

	---> behavioral.state.ATMState::notify() [0 time(s)]

	---> behavioral.state.ATMState::getHasCardState() [0 time(s)]

	---> behavioral.state.ATMState::hashCode() [0 time(s)]

	---> behavioral.state.ATMState::getNoCashState() [0 time(s)]

	---> behavioral.state.ATMState::getCorrectPinState() [0 time(s)]

	---> behavioral.state.ATMState::finalize() [0 time(s)]

	---> behavioral.state.ATMState::toString() [0 time(s)]

	---> behavioral.state.ATMState::clone() [0 time(s)]

	---> behavioral.state.ATMState::setCashInMachine(int) [0 time(s)]

behavioral.state.ATMState:
	---> behavioral.state.ATMState::getClass() [0 time(s)]

	---> behavioral.state.ATMState::wait(long) [0 time(s)]

	---> behavioral.state.ATMState::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMState::wait() [0 time(s)]

	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMState::notifyAll() [0 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMState::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMState::registerNatives() [0 time(s)]

	---> behavioral.state.ATMState::notify() [0 time(s)]

	---> behavioral.state.ATMState::hashCode() [0 time(s)]

	---> behavioral.state.ATMState::finalize() [0 time(s)]

	---> behavioral.state.ATMState::toString() [0 time(s)]

	---> behavioral.state.ATMState::clone() [0 time(s)]

behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::getClass() [0 time(s)]

	---> behavioral.state.ATMState::wait(long) [0 time(s)]

	---> behavioral.state.ATMState::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMState::wait() [0 time(s)]

	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

	---> behavioral.state.ATMMachine::notify() [0 time(s)]

	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

	---> behavioral.state.ATMMachine::toString() [0 time(s)]

	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMMachine::wait() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

	---> behavioral.state.HasCard::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.HasCard::registerNatives() [0 time(s)]

	---> behavioral.state.HasCard::notify() [0 time(s)]

	---> behavioral.state.HasCard::hashCode() [0 time(s)]

	---> behavioral.state.HasCard::finalize() [0 time(s)]

	---> behavioral.state.HasCard::toString() [0 time(s)]

	---> behavioral.state.HasCard::clone() [0 time(s)]

behavioral.state.IATMState:
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.HasCard::ejectCard() [0 time(s)]

	---> behavioral.state.HasCard::requestCash(int) [0 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [0 time(s)]

behavioral.state.NoCard:
	---> behavioral.state.HasCard::getClass() [0 time(s)]

	---> behavioral.state.HasCard::wait(long) [0 time(s)]

	---> behavioral.state.HasCard::wait(long,int) [0 time(s)]

	---> behavioral.state.HasCard::wait() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::notifyAll() [0 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.NoCard::registerNatives() [0 time(s)]

	---> behavioral.state.NoCard::notify() [0 time(s)]

	---> behavioral.state.NoCard::hashCode() [0 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

	---> behavioral.state.NoCard::finalize() [0 time(s)]

	---> behavioral.state.NoCard::toString() [0 time(s)]

	---> behavioral.state.NoCard::clone() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCard::getClass() [0 time(s)]

	---> behavioral.state.NoCard::wait(long) [0 time(s)]

	---> behavioral.state.NoCard::wait(long,int) [0 time(s)]

	---> behavioral.state.NoCard::wait() [0 time(s)]

	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::notifyAll() [0 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.NoCash::registerNatives() [0 time(s)]

	---> behavioral.state.NoCash::notify() [0 time(s)]

	---> behavioral.state.NoCash::hashCode() [0 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

	---> behavioral.state.NoCash::finalize() [0 time(s)]

	---> behavioral.state.NoCash::toString() [0 time(s)]

	---> behavioral.state.NoCash::clone() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.NoCash::getClass() [0 time(s)]

	---> behavioral.state.NoCash::wait(long) [0 time(s)]

	---> behavioral.state.NoCash::wait(long,int) [0 time(s)]

	---> behavioral.state.NoCash::wait() [0 time(s)]

	---> behavioral.state.NoCash::notifyAll() [0 time(s)]

	---> behavioral.state.NoCash::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

	---> behavioral.state.ATMMachine::notify() [0 time(s)]

	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

	---> behavioral.state.ATMMachine::toString() [0 time(s)]

	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.strategy.Add:
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMMachine::wait() [0 time(s)]

	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

	---> behavioral.state.ATMMachine::notify() [0 time(s)]

	---> behavioral.state.ATMMachine::execute(int,int) [0 time(s)]

	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

	---> behavioral.state.ATMMachine::finalize() [0 time(s)]

	---> behavioral.state.ATMMachine::toString() [0 time(s)]

	---> behavioral.state.ATMMachine::clone() [0 time(s)]

behavioral.strategy.ArithmeticOperation:
	---> behavioral.state.ATMMachine::execute(int,int) [0 time(s)]

behavioral.strategy.Calculator:
	---> behavioral.state.ATMMachine::getClass() [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long) [0 time(s)]

	---> behavioral.state.ATMMachine::wait(long,int) [0 time(s)]

	---> behavioral.state.ATMMachine::wait() [0 time(s)]

	---> behavioral.state.ATMMachine::reset() [0 time(s)]

	---> behavioral.state.ATMMachine::notifyAll() [0 time(s)]

	---> behavioral.state.ATMMachine::equals(java.lang.Object) [0 time(s)]

	---> behavioral.state.ATMMachine::registerNatives() [0 time(s)]

	---> behavioral.state.ATMMachine::notify() [0 time(s)]

	---> behavioral.state.ATMMachine::getResult() [0 time(s)]

	---> behavioral.state.ATMMachine::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::setOperation(behavioral.strategy.ArithmeticOperation) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Divide:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Modulo:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Multiply:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Subtract:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::execute(int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait(long,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::wait() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notifyAll() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::equals(java.lang.Object) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::registerNatives() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::notify() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::hashCode() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::finalize() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::toString() [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::clone() [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.strategy.ArithmeticOperation::getClass() [0 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.template_method.Game::hashCode() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::finalize() [0 time(s)]

	---> behavioral.template_method.Game::toString() [0 time(s)]

	---> behavioral.template_method.Game::clone() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::getClass() [0 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.template_method.Game::hashCode() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::finalize() [0 time(s)]

	---> behavioral.template_method.Game::toString() [0 time(s)]

	---> behavioral.template_method.Game::clone() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::getClass() [0 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.template_method.Game::hashCode() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::finalize() [0 time(s)]

	---> behavioral.template_method.Game::toString() [0 time(s)]

	---> behavioral.template_method.Game::clone() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::getClass() [0 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.template_method.Game::hashCode() [0 time(s)]

	---> behavioral.template_method.Game::finalize() [0 time(s)]

	---> behavioral.template_method.Game::toString() [0 time(s)]

	---> behavioral.template_method.Game::clone() [0 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.template_method.Game::getName() [0 time(s)]

	---> behavioral.template_method.Game::getClass() [0 time(s)]

	---> behavioral.template_method.Game::wait(long) [0 time(s)]

	---> behavioral.template_method.Game::wait(long,int) [0 time(s)]

	---> behavioral.template_method.Game::wait() [0 time(s)]

	---> behavioral.template_method.Game::setName(java.lang.String) [0 time(s)]

	---> behavioral.template_method.Game::setPrice(double) [0 time(s)]

	---> behavioral.template_method.Game::notifyAll() [0 time(s)]

	---> behavioral.template_method.Game::equals(java.lang.Object) [0 time(s)]

	---> behavioral.template_method.Game::getPrice() [0 time(s)]

	---> behavioral.template_method.Game::registerNatives() [0 time(s)]

	---> behavioral.template_method.Game::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::getName() [0 time(s)]

	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.Visitor::wait() [0 time(s)]

	---> behavioral.visitor.Visitor::setName(java.lang.String) [0 time(s)]

	---> behavioral.visitor.Visitor::setPrice(double) [0 time(s)]

	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.Visitor::getPrice() [0 time(s)]

	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.Visitor::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Product:
	---> behavioral.visitor.Visitor::getName() [0 time(s)]

	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.Visitor::wait() [0 time(s)]

	---> behavioral.visitor.Visitor::setName(java.lang.String) [0 time(s)]

	---> behavioral.visitor.Visitor::setPrice(double) [0 time(s)]

	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.Visitor::getPrice() [0 time(s)]

	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.Visitor::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.Visitor::wait() [0 time(s)]

	---> behavioral.visitor.Visitor::getComputedTax() [0 time(s)]

	---> behavioral.visitor.Visitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.Visitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.Visitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.Visitor::notify() [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::getTaxRate() [0 time(s)]

	---> behavioral.visitor.Product::hashCode() [0 time(s)]

	---> behavioral.visitor.Product::finalize() [0 time(s)]

	---> behavioral.visitor.Product::toString() [0 time(s)]

	---> behavioral.visitor.Product::clone() [0 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::getComputedTax() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::getTaxRate() [0 time(s)]

	---> behavioral.visitor.Product::hashCode() [0 time(s)]

	---> behavioral.visitor.Product::finalize() [0 time(s)]

	---> behavioral.visitor.Product::toString() [0 time(s)]

	---> behavioral.visitor.Product::clone() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::hashCode() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::finalize() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::toString() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::clone() [0 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.TaxVisitor::getName() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::getClass() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::wait() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::setName(java.lang.String) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::setPrice(double) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notifyAll() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::equals(java.lang.Object) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::getPrice() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::registerNatives() [0 time(s)]

	---> behavioral.visitor.TaxVisitor::notify() [0 time(s)]

	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

	---> behavioral.visitor.Visitor::hashCode() [0 time(s)]

	---> behavioral.visitor.Visitor::finalize() [0 time(s)]

	---> behavioral.visitor.Visitor::toString() [0 time(s)]

	---> behavioral.visitor.Visitor::clone() [0 time(s)]

behavioral.visitor.Visitable:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [0 time(s)]

behavioral.visitor.Visitor:
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Liquor) [0 time(s)]

	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Tobacco) [0 time(s)]

	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Necessity) [0 time(s)]

creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getClass() [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long) [0 time(s)]

	---> behavioral.visitor.Visitor::wait(long,int) [0 time(s)]

	---> behavioral.visitor.Visitor::wait() [0 time(s)]

	---> behavioral.visitor.Visitor::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.Class::notifyAll() [0 time(s)]

	---> java.lang.Class::equals(java.lang.Object) [0 time(s)]

	---> java.lang.Class::registerNatives() [0 time(s)]

	---> java.lang.Class::notify() [0 time(s)]

	---> java.lang.Class::hashCode() [0 time(s)]

	---> java.lang.Class::finalize() [0 time(s)]

	---> java.lang.Class::toString() [0 time(s)]

	---> java.lang.Class::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.Class::notifyAll() [0 time(s)]

	---> java.lang.Class::equals(java.lang.Object) [0 time(s)]

	---> java.lang.Class::registerNatives() [0 time(s)]

	---> java.lang.Class::notify() [0 time(s)]

	---> java.lang.Class::hashCode() [0 time(s)]

	---> java.lang.Class::finalize() [0 time(s)]

	---> java.lang.Class::toString() [0 time(s)]

	---> java.lang.Class::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.abstract_factory.RoundedShapeType:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.abstract_factory.Shape:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.ShapeFactoryType:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::createShape(creational.abstract_factory.ShapeType) [0 time(s)]

	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.Class::notifyAll() [0 time(s)]

	---> java.lang.Class::equals(java.lang.Object) [0 time(s)]

	---> java.lang.Class::registerNatives() [0 time(s)]

	---> java.lang.Class::notify() [0 time(s)]

	---> java.lang.Class::hashCode() [0 time(s)]

	---> java.lang.Class::finalize() [0 time(s)]

	---> java.lang.Class::toString() [0 time(s)]

	---> java.lang.Class::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.abstract_factory.StandardShapeType:
	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::compareTo(java.lang.Enum) [0 time(s)]

	---> creational.singleton.SingletonRegistry::describeConstable() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getDeclaringClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::name() [0 time(s)]

	---> creational.singleton.SingletonRegistry::ordinal() [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObject(java.io.ObjectInputStream) [0 time(s)]

	---> creational.singleton.SingletonRegistry::readObjectNoData() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.Class,java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::valueOf(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::values() [0 time(s)]

creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

	---> creational.abstract_factory.Shape::notify() [0 time(s)]

	---> creational.abstract_factory.Shape::hashCode() [0 time(s)]

	---> creational.abstract_factory.Shape::finalize() [0 time(s)]

	---> creational.abstract_factory.Shape::toString() [0 time(s)]

	---> creational.abstract_factory.Shape::clone() [0 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::getClass() [0 time(s)]

	---> creational.abstract_factory.Shape::wait(long) [0 time(s)]

	---> creational.abstract_factory.Shape::wait(long,int) [0 time(s)]

	---> creational.abstract_factory.Shape::wait() [0 time(s)]

	---> creational.abstract_factory.Shape::notifyAll() [0 time(s)]

	---> creational.abstract_factory.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

	---> creational.abstract_factory.Shape::draw() [0 time(s)]

	---> creational.abstract_factory.Shape::notify() [0 time(s)]

	---> creational.abstract_factory.Shape::hashCode() [0 time(s)]

	---> creational.abstract_factory.Shape::finalize() [0 time(s)]

	---> creational.abstract_factory.Shape::toString() [0 time(s)]

	---> creational.abstract_factory.Shape::clone() [0 time(s)]

creational.builder.IRobot:
	---> creational.abstract_factory.Shape::setTorso(java.lang.String) [0 time(s)]

	---> creational.abstract_factory.Shape::setArms(java.lang.String) [0 time(s)]

	---> creational.abstract_factory.Shape::setLegs(java.lang.String) [0 time(s)]

	---> creational.abstract_factory.Shape::setHead(java.lang.String) [0 time(s)]

creational.builder.IRobotBuilder:
	---> creational.abstract_factory.Shape::buildArms() [0 time(s)]

	---> creational.abstract_factory.Shape::buildHead() [0 time(s)]

	---> creational.abstract_factory.Shape::getRobot() [0 time(s)]

	---> creational.abstract_factory.Shape::buildTorso() [0 time(s)]

	---> creational.abstract_factory.Shape::buildLegs() [0 time(s)]

creational.builder.OldRobotBuilder:
	---> creational.abstract_factory.Shape::getClass() [0 time(s)]

	---> creational.abstract_factory.Shape::wait(long) [0 time(s)]

	---> creational.abstract_factory.Shape::wait(long,int) [0 time(s)]

	---> creational.abstract_factory.Shape::wait() [0 time(s)]

	---> creational.abstract_factory.Shape::notifyAll() [0 time(s)]

	---> creational.abstract_factory.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.abstract_factory.Shape::registerNatives() [0 time(s)]

	---> creational.abstract_factory.Shape::getRobot() [0 time(s)]

	---> creational.abstract_factory.Shape::notify() [0 time(s)]

	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::hashCode() [0 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::finalize() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::clone() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::getClass() [0 time(s)]

	---> creational.builder.Robot::wait(long) [0 time(s)]

	---> creational.builder.Robot::wait(long,int) [0 time(s)]

	---> creational.builder.Robot::wait() [0 time(s)]

	---> creational.builder.Robot::setLegs(java.lang.String) [0 time(s)]

	---> creational.builder.Robot::notifyAll() [0 time(s)]

	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.Robot::setHead(java.lang.String) [0 time(s)]

	---> creational.builder.Robot::registerNatives() [0 time(s)]

	---> creational.builder.Robot::getTorso() [0 time(s)]

	---> creational.builder.Robot::notify() [0 time(s)]

	---> creational.builder.Robot::setTorso(java.lang.String) [0 time(s)]

	---> creational.builder.Robot::hashCode() [0 time(s)]

	---> creational.builder.Robot::setArms(java.lang.String) [0 time(s)]

	---> creational.builder.Robot::getArms() [0 time(s)]

	---> creational.builder.Robot::getHead() [0 time(s)]

	---> java.lang.StringBuffer::toString() [5 time(s)]

	---> java.lang.StringBuffer::finalize() [0 time(s)]

	---> java.lang.StringBuffer::clone() [0 time(s)]

	---> java.lang.StringBuffer::getLegs() [0 time(s)]

creational.builder.RobotBuilder:
	---> java.lang.StringBuffer::getClass() [0 time(s)]

	---> java.lang.StringBuffer::wait(long) [0 time(s)]

	---> java.lang.StringBuffer::wait(long,int) [0 time(s)]

	---> java.lang.StringBuffer::wait() [0 time(s)]

	---> java.lang.StringBuffer::notifyAll() [0 time(s)]

	---> java.lang.StringBuffer::equals(java.lang.Object) [0 time(s)]

	---> java.lang.StringBuffer::registerNatives() [0 time(s)]

	---> java.lang.StringBuffer::getRobot() [0 time(s)]

	---> java.lang.StringBuffer::notify() [0 time(s)]

	---> java.lang.StringBuffer::buildLegs() [0 time(s)]

	---> java.lang.StringBuffer::buildArms() [0 time(s)]

	---> java.lang.StringBuffer::hashCode() [0 time(s)]

	---> java.lang.StringBuffer::buildHead() [0 time(s)]

	---> java.lang.StringBuffer::finalize() [0 time(s)]

	---> java.lang.StringBuffer::toString() [0 time(s)]

	---> java.lang.StringBuffer::clone() [0 time(s)]

	---> java.lang.StringBuffer::buildTorso() [0 time(s)]

creational.builder.RobotEngineer:
	---> java.lang.StringBuffer::getClass() [0 time(s)]

	---> java.lang.StringBuffer::wait(long) [0 time(s)]

	---> java.lang.StringBuffer::wait(long,int) [0 time(s)]

	---> java.lang.StringBuffer::wait() [0 time(s)]

	---> java.lang.StringBuffer::notifyAll() [0 time(s)]

	---> java.lang.StringBuffer::equals(java.lang.Object) [0 time(s)]

	---> java.lang.StringBuffer::registerNatives() [0 time(s)]

	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::notify() [0 time(s)]

	---> creational.builder.IRobotBuilder::hashCode() [0 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [4 time(s)]

	---> creational.builder.IRobotBuilder::setRobotBuilder(creational.builder.IRobotBuilder) [0 time(s)]

	---> creational.builder.IRobotBuilder::finalize() [0 time(s)]

	---> creational.builder.IRobotBuilder::toString() [0 time(s)]

	---> creational.builder.IRobotBuilder::clone() [0 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.IRobotBuilder::getClass() [0 time(s)]

	---> creational.builder.IRobotBuilder::wait(long) [0 time(s)]

	---> creational.builder.IRobotBuilder::wait(long,int) [0 time(s)]

	---> creational.builder.IRobotBuilder::wait() [0 time(s)]

	---> creational.builder.IRobotBuilder::notifyAll() [0 time(s)]

	---> creational.builder.IRobotBuilder::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.IRobotBuilder::registerNatives() [0 time(s)]

	---> creational.builder.IRobotBuilder::getRobot() [0 time(s)]

	---> creational.builder.IRobotBuilder::notify() [0 time(s)]

	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::hashCode() [0 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::finalize() [0 time(s)]

	---> creational.builder.Robot::toString() [0 time(s)]

	---> creational.builder.Robot::clone() [0 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.Robot::getClass() [0 time(s)]

	---> creational.builder.Robot::wait(long) [0 time(s)]

	---> creational.builder.Robot::wait(long,int) [0 time(s)]

	---> creational.builder.Robot::wait() [0 time(s)]

	---> creational.builder.Robot::notifyAll() [0 time(s)]

	---> creational.builder.Robot::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

	---> creational.builder.RobotEngineer::notify() [0 time(s)]

	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

	---> creational.builder.RobotEngineer::toString() [0 time(s)]

	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::getName() [0 time(s)]

	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

	---> creational.builder.RobotEngineer::wait() [0 time(s)]

	---> creational.builder.RobotEngineer::setName(java.lang.String) [0 time(s)]

	---> creational.builder.RobotEngineer::getAmtDamage() [0 time(s)]

	---> creational.builder.RobotEngineer::setAmtDamage(double) [0 time(s)]

	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

	---> creational.builder.RobotEngineer::notify() [0 time(s)]

	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

	---> creational.builder.RobotEngineer::toString() [0 time(s)]

	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::getName() [0 time(s)]

	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

	---> creational.builder.RobotEngineer::wait() [0 time(s)]

	---> creational.builder.RobotEngineer::setName(java.lang.String) [0 time(s)]

	---> creational.builder.RobotEngineer::getAmtDamage() [0 time(s)]

	---> creational.builder.RobotEngineer::setAmtDamage(double) [0 time(s)]

	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

	---> creational.builder.RobotEngineer::notify() [0 time(s)]

	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

	---> creational.builder.RobotEngineer::toString() [0 time(s)]

	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShipFactory:
	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

	---> creational.builder.RobotEngineer::wait() [0 time(s)]

	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

	---> creational.builder.RobotEngineer::registerNatives() [0 time(s)]

	---> creational.builder.RobotEngineer::notify() [0 time(s)]

	---> creational.builder.RobotEngineer::hashCode() [0 time(s)]

	---> creational.builder.RobotEngineer::createEnemyShip(java.lang.String) [0 time(s)]

	---> creational.builder.RobotEngineer::finalize() [0 time(s)]

	---> creational.builder.RobotEngineer::toString() [0 time(s)]

	---> creational.builder.RobotEngineer::clone() [0 time(s)]

creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::getClass() [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long) [0 time(s)]

	---> creational.builder.RobotEngineer::wait(long,int) [0 time(s)]

	---> creational.builder.RobotEngineer::wait() [0 time(s)]

	---> creational.builder.RobotEngineer::notifyAll() [0 time(s)]

	---> creational.builder.RobotEngineer::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShipFactory::notify() [0 time(s)]

	---> creational.factory.EnemyShipFactory::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

	---> creational.factory.EnemyShip::finalize() [0 time(s)]

	---> creational.factory.EnemyShip::toString() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::getName() [0 time(s)]

	---> creational.factory.EnemyShip::getClass() [0 time(s)]

	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

	---> creational.factory.EnemyShip::wait() [0 time(s)]

	---> creational.factory.EnemyShip::setName(java.lang.String) [0 time(s)]

	---> creational.factory.EnemyShip::getAmtDamage() [0 time(s)]

	---> creational.factory.EnemyShip::setAmtDamage(double) [0 time(s)]

	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShip::notify() [0 time(s)]

	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

	---> creational.factory.EnemyShip::finalize() [0 time(s)]

	---> creational.factory.EnemyShip::toString() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::getClass() [0 time(s)]

	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

	---> creational.factory.EnemyShip::wait() [0 time(s)]

	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShipFactory::notify() [0 time(s)]

	---> creational.factory.EnemyShipFactory::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

	---> creational.factory.EnemyShip::finalize() [0 time(s)]

	---> creational.factory.EnemyShip::toString() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::getName() [0 time(s)]

	---> creational.factory.EnemyShip::getClass() [0 time(s)]

	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

	---> creational.factory.EnemyShip::wait() [0 time(s)]

	---> creational.factory.EnemyShip::setName(java.lang.String) [0 time(s)]

	---> creational.factory.EnemyShip::getAmtDamage() [0 time(s)]

	---> creational.factory.EnemyShip::setAmtDamage(double) [0 time(s)]

	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShip::notify() [0 time(s)]

	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

	---> creational.factory.EnemyShip::finalize() [0 time(s)]

	---> creational.factory.EnemyShip::toString() [0 time(s)]

	---> creational.factory.EnemyShip::clone() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::getClass() [0 time(s)]

	---> creational.factory.EnemyShip::wait(long) [0 time(s)]

	---> creational.factory.EnemyShip::wait(long,int) [0 time(s)]

	---> creational.factory.EnemyShip::wait() [0 time(s)]

	---> creational.factory.EnemyShip::notifyAll() [0 time(s)]

	---> creational.factory.EnemyShip::equals(java.lang.Object) [0 time(s)]

	---> creational.factory.EnemyShip::getId() [0 time(s)]

	---> creational.factory.EnemyShip::setPosition(creational.prototype.Position) [0 time(s)]

	---> creational.factory.EnemyShip::registerNatives() [0 time(s)]

	---> creational.factory.EnemyShip::draw() [0 time(s)]

	---> creational.factory.EnemyShip::getPosition() [0 time(s)]

	---> creational.factory.EnemyShip::notify() [0 time(s)]

	---> creational.factory.EnemyShip::hashCode() [0 time(s)]

	---> creational.factory.EnemyShip::getType() [0 time(s)]

	---> creational.factory.EnemyShip::setId(java.lang.String) [0 time(s)]

	---> java.lang.CloneNotSupportedException::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::setX(double) [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::setY(double) [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::getX() [0 time(s)]

	---> creational.prototype.Shape::getY() [0 time(s)]

	---> java.lang.Object::clone() [1 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

	---> creational.prototype.Position::finalize() [0 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::getClass() [0 time(s)]

	---> creational.prototype.Position::wait(long) [0 time(s)]

	---> creational.prototype.Position::wait(long,int) [0 time(s)]

	---> creational.prototype.Position::wait() [0 time(s)]

	---> creational.prototype.Position::notifyAll() [0 time(s)]

	---> creational.prototype.Position::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Position::getId() [0 time(s)]

	---> creational.prototype.Position::setPosition(creational.prototype.Position) [0 time(s)]

	---> creational.prototype.Position::registerNatives() [0 time(s)]

	---> creational.prototype.Position::draw() [0 time(s)]

	---> creational.prototype.Position::getPosition() [0 time(s)]

	---> creational.prototype.Position::notify() [0 time(s)]

	---> creational.prototype.Position::hashCode() [0 time(s)]

	---> creational.prototype.Position::getType() [0 time(s)]

	---> creational.prototype.Position::setId(java.lang.String) [0 time(s)]

	---> java.lang.CloneNotSupportedException::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::getId() [0 time(s)]

	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::draw() [0 time(s)]

	---> creational.prototype.Shape::getPosition() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::getType() [0 time(s)]

	---> creational.prototype.Shape::setId(java.lang.String) [0 time(s)]

	---> java.lang.CloneNotSupportedException::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [1 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

	---> creational.prototype.Rectangle::loadCache() [9 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::getClass() [0 time(s)]

	---> creational.prototype.Rectangle::wait(long) [0 time(s)]

	---> creational.prototype.Rectangle::wait(long,int) [0 time(s)]

	---> creational.prototype.Rectangle::wait() [0 time(s)]

	---> creational.prototype.Rectangle::notifyAll() [0 time(s)]

	---> creational.prototype.Rectangle::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

	---> creational.prototype.Shape::toString() [0 time(s)]

	---> creational.prototype.Shape::clone() [0 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> creational.prototype.Shape::notifyAll() [0 time(s)]

	---> creational.prototype.Shape::equals(java.lang.Object) [0 time(s)]

	---> creational.prototype.Shape::getId() [0 time(s)]

	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [0 time(s)]

	---> creational.prototype.Shape::registerNatives() [0 time(s)]

	---> creational.prototype.Shape::draw() [0 time(s)]

	---> creational.prototype.Shape::getPosition() [0 time(s)]

	---> creational.prototype.Shape::notify() [0 time(s)]

	---> creational.prototype.Shape::hashCode() [0 time(s)]

	---> creational.prototype.Shape::getType() [0 time(s)]

	---> creational.prototype.Shape::setId(java.lang.String) [0 time(s)]

	---> java.lang.CloneNotSupportedException::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

	---> creational.prototype.Shape::finalize() [0 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getClass() [0 time(s)]

	---> creational.prototype.Shape::wait(long) [0 time(s)]

	---> creational.prototype.Shape::wait(long,int) [0 time(s)]

	---> creational.prototype.Shape::wait() [0 time(s)]

	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.Class::notifyAll() [0 time(s)]

	---> java.lang.Class::equals(java.lang.Object) [0 time(s)]

	---> java.lang.Class::registerNatives() [0 time(s)]

	---> java.lang.Class::notify() [0 time(s)]

	---> java.lang.Class::hashCode() [0 time(s)]

	---> java.lang.Class::finalize() [0 time(s)]

	---> java.lang.Class::toString() [0 time(s)]

	---> java.lang.Class::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.Class::notifyAll() [0 time(s)]

	---> java.lang.Class::equals(java.lang.Object) [0 time(s)]

	---> java.lang.Class::registerNatives() [0 time(s)]

	---> java.lang.Class::notify() [0 time(s)]

	---> java.lang.Class::hashCode() [0 time(s)]

	---> java.lang.Class::finalize() [0 time(s)]

	---> java.lang.Class::toString() [0 time(s)]

	---> java.lang.Class::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.Class::notifyAll() [0 time(s)]

	---> java.lang.Class::equals(java.lang.Object) [0 time(s)]

	---> java.lang.Class::registerNatives() [0 time(s)]

	---> java.lang.Class::notify() [0 time(s)]

	---> java.lang.Class::hashCode() [0 time(s)]

	---> java.lang.Class::finalize() [0 time(s)]

	---> java.lang.Class::toString() [0 time(s)]

	---> java.lang.Class::clone() [0 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.SingletonRegistry::registerNatives() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notify() [0 time(s)]

	---> creational.singleton.SingletonRegistry::hashCode() [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::finalize() [0 time(s)]

	---> creational.singleton.SingletonRegistry::toString() [0 time(s)]

	---> creational.singleton.SingletonRegistry::clone() [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::getClass() [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait(long,int) [0 time(s)]

	---> creational.singleton.SingletonRegistry::wait() [0 time(s)]

	---> creational.singleton.SingletonRegistry::notifyAll() [0 time(s)]

	---> creational.singleton.SingletonRegistry::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

	---> creational.singleton.ExtendedSingleton2::registerNatives() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::notify() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::hashCode() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::finalize() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::toString() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::clone() [0 time(s)]

structural.adapter.EnemyAttacker:
	---> creational.singleton.ExtendedSingleton2::fireWeapon() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::driveForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::getClass() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait(long) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait(long,int) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::notifyAll() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::equals(java.lang.Object) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::registerNatives() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::notify() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::hashCode() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::finalize() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::toString() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::clone() [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> creational.singleton.ExtendedSingleton2::getClass() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait(long) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait(long,int) [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::wait() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

	---> structural.adapter.EnemyRobot::registerNatives() [0 time(s)]

	---> structural.adapter.EnemyRobot::notify() [0 time(s)]

	---> structural.adapter.EnemyRobot::setRobot(structural.adapter.EnemyRobot) [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::hashCode() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

	---> structural.adapter.EnemyRobot::finalize() [0 time(s)]

	---> structural.adapter.EnemyRobot::toString() [0 time(s)]

	---> structural.adapter.EnemyRobot::clone() [0 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::getClass() [0 time(s)]

	---> structural.adapter.EnemyRobot::wait(long) [0 time(s)]

	---> structural.adapter.EnemyRobot::wait(long,int) [0 time(s)]

	---> structural.adapter.EnemyRobot::wait() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

	---> structural.adapter.EnemyRobot::registerNatives() [0 time(s)]

	---> structural.adapter.EnemyRobot::notify() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::hashCode() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

	---> structural.adapter.EnemyRobot::finalize() [0 time(s)]

	---> structural.adapter.EnemyRobot::toString() [0 time(s)]

	---> structural.adapter.EnemyRobot::clone() [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::getClass() [0 time(s)]

	---> structural.adapter.EnemyRobot::wait(long) [0 time(s)]

	---> structural.adapter.EnemyRobot::wait(long,int) [0 time(s)]

	---> structural.adapter.EnemyRobot::wait() [0 time(s)]

	---> structural.adapter.EnemyRobot::notifyAll() [0 time(s)]

	---> structural.adapter.EnemyRobot::equals(java.lang.Object) [0 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyAttacker::registerNatives() [0 time(s)]

	---> structural.adapter.EnemyAttacker::notify() [0 time(s)]

	---> structural.adapter.EnemyAttacker::hashCode() [0 time(s)]

	---> structural.adapter.EnemyAttacker::finalize() [0 time(s)]

	---> structural.adapter.EnemyAttacker::toString() [0 time(s)]

	---> structural.adapter.EnemyAttacker::clone() [0 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::getClass() [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait(long) [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait(long,int) [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait() [0 time(s)]

	---> structural.adapter.EnemyAttacker::notifyAll() [0 time(s)]

	---> structural.adapter.EnemyAttacker::equals(java.lang.Object) [0 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyAttacker::registerNatives() [0 time(s)]

	---> structural.adapter.EnemyAttacker::notify() [0 time(s)]

	---> structural.adapter.EnemyAttacker::hashCode() [0 time(s)]

	---> structural.adapter.EnemyAttacker::finalize() [0 time(s)]

	---> structural.adapter.EnemyAttacker::toString() [0 time(s)]

	---> structural.adapter.EnemyAttacker::clone() [0 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.adapter.EnemyAttacker::getClass() [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait(long) [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait(long,int) [0 time(s)]

	---> structural.adapter.EnemyAttacker::wait() [0 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::mute() [3 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.Device:
	---> structural.bridge.Device::getName() [0 time(s)]

	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::setChannel(int) [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::setVolume(int) [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::enable() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::getVolume() [0 time(s)]

	---> structural.bridge.Device::getChannel() [0 time(s)]

	---> structural.bridge.Device::disable() [0 time(s)]

	---> structural.bridge.Device::isEnabled() [0 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Radio:
	---> structural.bridge.Device::getName() [0 time(s)]

	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::setChannel(int) [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::setVolume(int) [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::enable() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::getVolume() [0 time(s)]

	---> structural.bridge.Device::getChannel() [0 time(s)]

	---> structural.bridge.Device::disable() [0 time(s)]

	---> structural.bridge.Device::isEnabled() [0 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Remote:
	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV:
	---> structural.bridge.Device::getName() [0 time(s)]

	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::setChannel(int) [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::setVolume(int) [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::enable() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Device::getVolume() [0 time(s)]

	---> structural.bridge.Device::getChannel() [0 time(s)]

	---> structural.bridge.Device::disable() [0 time(s)]

	---> structural.bridge.Device::isEnabled() [0 time(s)]

	---> structural.bridge.Device::finalize() [0 time(s)]

	---> structural.bridge.Device::toString() [0 time(s)]

	---> structural.bridge.Device::clone() [0 time(s)]

structural.bridge.Test:
	---> structural.bridge.Device::getClass() [0 time(s)]

	---> structural.bridge.Device::wait(long) [0 time(s)]

	---> structural.bridge.Device::wait(long,int) [0 time(s)]

	---> structural.bridge.Device::wait() [0 time(s)]

	---> structural.bridge.Device::notifyAll() [0 time(s)]

	---> structural.bridge.Device::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::registerNatives() [0 time(s)]

	---> structural.bridge.Device::notify() [0 time(s)]

	---> structural.bridge.Device::hashCode() [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

	---> structural.bridge.AdvancedRemote::finalize() [0 time(s)]

	---> structural.bridge.AdvancedRemote::toString() [0 time(s)]

	---> structural.bridge.AdvancedRemote::clone() [0 time(s)]

structural.composite.DiscJockey:
	---> structural.bridge.AdvancedRemote::getClass() [0 time(s)]

	---> structural.bridge.AdvancedRemote::wait(long) [0 time(s)]

	---> structural.bridge.AdvancedRemote::wait(long,int) [0 time(s)]

	---> structural.bridge.AdvancedRemote::wait() [0 time(s)]

	---> structural.bridge.AdvancedRemote::notifyAll() [0 time(s)]

	---> structural.bridge.AdvancedRemote::equals(java.lang.Object) [0 time(s)]

	---> structural.bridge.AdvancedRemote::registerNatives() [0 time(s)]

	---> structural.bridge.AdvancedRemote::notify() [0 time(s)]

	---> structural.bridge.AdvancedRemote::hashCode() [0 time(s)]

	---> structural.bridge.AdvancedRemote::getSongList() [0 time(s)]

	---> structural.composite.SongComponent::displaySongList() [1 time(s)]

	---> structural.composite.SongComponent::finalize() [0 time(s)]

	---> structural.composite.SongComponent::toString() [0 time(s)]

	---> structural.composite.SongComponent::clone() [0 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

	---> structural.composite.SongComponent::wait(long) [0 time(s)]

	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

	---> structural.composite.SongComponent::wait() [0 time(s)]

	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> java.lang.StringBuilder::getInfo() [7 time(s)]

	---> java.lang.StringBuilder::notifyAll() [0 time(s)]

	---> java.lang.StringBuilder::equals(java.lang.Object) [0 time(s)]

	---> java.lang.StringBuilder::registerNatives() [0 time(s)]

	---> java.lang.StringBuilder::getSongName() [0 time(s)]

	---> java.lang.StringBuilder::notify() [0 time(s)]

	---> java.lang.StringBuilder::remove(structural.composite.SongComponent) [0 time(s)]

	---> java.lang.StringBuilder::hashCode() [0 time(s)]

	---> java.lang.StringBuilder::getBandName() [0 time(s)]

	---> java.lang.StringBuilder::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::finalize() [0 time(s)]

	---> structural.composite.SongComponent::toString() [0 time(s)]

	---> structural.composite.SongComponent::clone() [0 time(s)]

	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

	---> structural.composite.SongComponent::wait(long) [0 time(s)]

	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

	---> structural.composite.SongComponent::wait() [0 time(s)]

	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::getInfo() [0 time(s)]

	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.SongComponent::registerNatives() [0 time(s)]

	---> structural.composite.SongComponent::getSongName() [0 time(s)]

	---> structural.composite.SongComponent::notify() [0 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [0 time(s)]

	---> structural.composite.SongComponent::hashCode() [0 time(s)]

	---> structural.composite.SongComponent::getBandName() [0 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::finalize() [0 time(s)]

	---> structural.composite.SongComponent::toString() [0 time(s)]

	---> structural.composite.SongComponent::clone() [0 time(s)]

	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

	---> structural.composite.SongComponent::wait(long) [0 time(s)]

	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

	---> structural.composite.SongComponent::wait() [0 time(s)]

	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> java.lang.StringBuffer::getInfo() [14 time(s)]

	---> java.lang.StringBuffer::notifyAll() [0 time(s)]

	---> java.lang.StringBuffer::equals(java.lang.Object) [0 time(s)]

	---> java.lang.StringBuffer::registerNatives() [0 time(s)]

	---> java.lang.StringBuffer::getSongName() [0 time(s)]

	---> java.lang.StringBuffer::notify() [0 time(s)]

	---> java.lang.StringBuffer::remove(structural.composite.SongComponent) [0 time(s)]

	---> java.lang.StringBuffer::getGroupName() [0 time(s)]

	---> java.lang.StringBuffer::hashCode() [0 time(s)]

	---> java.lang.StringBuffer::getBandName() [0 time(s)]

	---> java.lang.StringBuffer::getComponent(int) [0 time(s)]

	---> java.lang.StringBuffer::getGroupDescription() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::finalize() [0 time(s)]

	---> structural.composite.SongComponent::toString() [0 time(s)]

	---> structural.composite.SongComponent::clone() [0 time(s)]

	---> structural.composite.SongComponent::getReleaseYear() [0 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::getClass() [0 time(s)]

	---> structural.composite.SongComponent::wait(long) [0 time(s)]

	---> structural.composite.SongComponent::wait(long,int) [0 time(s)]

	---> structural.composite.SongComponent::wait() [0 time(s)]

	---> structural.composite.SongComponent::notifyAll() [0 time(s)]

	---> structural.composite.SongComponent::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

	---> structural.composite.DiscJockey::notify() [0 time(s)]

	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

	---> structural.composite.DiscJockey::finalize() [0 time(s)]

	---> structural.composite.DiscJockey::toString() [0 time(s)]

	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.composite.Test:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

	---> structural.composite.DiscJockey::wait() [0 time(s)]

	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

	---> structural.composite.DiscJockey::notify() [0 time(s)]

	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

	---> structural.composite.DiscJockey::finalize() [0 time(s)]

	---> structural.composite.DiscJockey::toString() [0 time(s)]

	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.Beverage:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

	---> structural.composite.DiscJockey::wait() [0 time(s)]

	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

	---> structural.composite.DiscJockey::description() [0 time(s)]

	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

	---> structural.composite.DiscJockey::notify() [0 time(s)]

	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

	---> structural.composite.DiscJockey::price() [0 time(s)]

	---> structural.composite.DiscJockey::finalize() [0 time(s)]

	---> structural.composite.DiscJockey::toString() [0 time(s)]

	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.BeverageDecorator:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

	---> structural.composite.DiscJockey::wait() [0 time(s)]

	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

	---> structural.composite.DiscJockey::description() [0 time(s)]

	---> structural.composite.DiscJockey::equals(java.lang.Object) [0 time(s)]

	---> structural.composite.DiscJockey::registerNatives() [0 time(s)]

	---> structural.composite.DiscJockey::notify() [0 time(s)]

	---> structural.composite.DiscJockey::hashCode() [0 time(s)]

	---> structural.composite.DiscJockey::price() [0 time(s)]

	---> structural.composite.DiscJockey::finalize() [0 time(s)]

	---> structural.composite.DiscJockey::toString() [0 time(s)]

	---> structural.composite.DiscJockey::clone() [0 time(s)]

structural.decorator.CaramelDecorator:
	---> structural.composite.DiscJockey::getClass() [0 time(s)]

	---> structural.composite.DiscJockey::wait(long) [0 time(s)]

	---> structural.composite.DiscJockey::wait(long,int) [0 time(s)]

	---> structural.composite.DiscJockey::wait() [0 time(s)]

	---> structural.composite.DiscJockey::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Espresso:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.IBeverage:
	---> structural.decorator.Beverage::price() [0 time(s)]

	---> structural.decorator.Beverage::description() [0 time(s)]

structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Tea:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::description() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::price() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

structural.decorator.Test:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [2 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.decorator.Beverage::equals(java.lang.Object) [0 time(s)]

	---> structural.decorator.Beverage::setNumber(int) [0 time(s)]

	---> structural.decorator.Beverage::registerNatives() [0 time(s)]

	---> structural.decorator.Beverage::notify() [0 time(s)]

	---> structural.decorator.Beverage::getNumber() [0 time(s)]

	---> structural.decorator.Beverage::setSecurityCode(int) [0 time(s)]

	---> structural.decorator.Beverage::hashCode() [0 time(s)]

	---> structural.decorator.Beverage::getBalance() [0 time(s)]

	---> structural.decorator.Beverage::getSecurityCode() [0 time(s)]

	---> structural.decorator.Beverage::finalize() [0 time(s)]

	---> structural.decorator.Beverage::toString() [0 time(s)]

	---> structural.decorator.Beverage::clone() [0 time(s)]

	---> structural.decorator.Beverage::setBalance(double) [0 time(s)]

structural.facade.BankAccountBalanceSystem:
	---> structural.decorator.Beverage::getClass() [0 time(s)]

	---> structural.decorator.Beverage::wait(long) [0 time(s)]

	---> structural.decorator.Beverage::wait(long,int) [0 time(s)]

	---> structural.decorator.Beverage::wait() [0 time(s)]

	---> structural.decorator.Beverage::notifyAll() [0 time(s)]

	---> structural.facade.BankAccount::canWithdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [1 time(s)]

	---> structural.facade.BankAccount::notify() [0 time(s)]

	---> structural.facade.BankAccount::hashCode() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::finalize() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::toString() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::clone() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [5 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountBalanceSystem::getClass() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait(long) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::notify() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::hashCode() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::getSecurityCode() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::getAccountNumber() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::fetchBankAccount() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::finalize() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::toString() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::clone() [0 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountBalanceSystem::getClass() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait(long) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::wait() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountBalanceSystem::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccountNumberChecker::notify() [0 time(s)]

	---> structural.facade.BankAccountNumberChecker::hashCode() [0 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [1 time(s)]

	---> structural.facade.BankAccount::finalize() [0 time(s)]

	---> structural.facade.BankAccount::toString() [0 time(s)]

	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccount::getClass() [0 time(s)]

	---> structural.facade.BankAccount::wait(long) [0 time(s)]

	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccount::wait() [0 time(s)]

	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::notify() [0 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::hashCode() [0 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [1 time(s)]

	---> structural.facade.BankAccount::finalize() [0 time(s)]

	---> structural.facade.BankAccount::toString() [0 time(s)]

	---> structural.facade.BankAccount::clone() [0 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::getClass() [0 time(s)]

	---> structural.facade.BankAccount::wait(long) [0 time(s)]

	---> structural.facade.BankAccount::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccount::wait() [0 time(s)]

	---> structural.facade.BankAccount::notifyAll() [0 time(s)]

	---> structural.facade.BankAccount::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccount::registerNatives() [0 time(s)]

	---> structural.facade.BankAccount::notify() [0 time(s)]

	---> structural.facade.BankAccount::hashCode() [0 time(s)]

	---> java.lang.StringBuffer::setWelcomeMessage() [7 time(s)]

	---> java.lang.StringBuffer::finalize() [0 time(s)]

	---> java.lang.StringBuffer::toString() [0 time(s)]

	---> java.lang.StringBuffer::clone() [0 time(s)]

structural.facade.Test:
	---> java.lang.StringBuffer::getClass() [0 time(s)]

	---> java.lang.StringBuffer::wait(long) [0 time(s)]

	---> java.lang.StringBuffer::wait(long,int) [0 time(s)]

	---> java.lang.StringBuffer::wait() [0 time(s)]

	---> java.lang.StringBuffer::notifyAll() [0 time(s)]

	---> java.lang.StringBuffer::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

	---> structural.facade.BankAccountFacade::notify() [0 time(s)]

	---> structural.facade.BankAccountFacade::hashCode() [0 time(s)]

	---> structural.facade.BankAccountFacade::finalize() [0 time(s)]

	---> structural.facade.BankAccountFacade::toString() [0 time(s)]

	---> structural.facade.BankAccountFacade::clone() [0 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::getClass() [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait(long,int) [0 time(s)]

	---> structural.facade.BankAccountFacade::wait() [0 time(s)]

	---> structural.facade.BankAccountFacade::notifyAll() [0 time(s)]

	---> structural.facade.BankAccountFacade::equals(java.lang.Object) [0 time(s)]

	---> structural.facade.BankAccountFacade::registerNatives() [0 time(s)]

	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [5 time(s)]

	---> java.lang.StringBuffer::getRadius() [0 time(s)]

	---> java.lang.StringBuffer::notify() [0 time(s)]

	---> java.lang.StringBuffer::setRadius(int) [0 time(s)]

	---> java.lang.StringBuffer::hashCode() [0 time(s)]

	---> java.lang.StringBuffer::finalize() [0 time(s)]

	---> java.lang.StringBuffer::toString() [0 time(s)]

	---> java.lang.StringBuffer::clone() [0 time(s)]

structural.flyweight.Position:
	---> java.lang.StringBuffer::getClass() [0 time(s)]

	---> java.lang.StringBuffer::wait(long) [0 time(s)]

	---> java.lang.StringBuffer::wait(long,int) [0 time(s)]

	---> java.lang.StringBuffer::wait() [0 time(s)]

	---> java.lang.StringBuffer::setX(double) [0 time(s)]

	---> java.lang.StringBuffer::notifyAll() [0 time(s)]

	---> java.lang.StringBuffer::equals(java.lang.Object) [0 time(s)]

	---> java.lang.StringBuffer::registerNatives() [0 time(s)]

	---> java.lang.StringBuffer::setY(double) [0 time(s)]

	---> java.lang.StringBuffer::notify() [0 time(s)]

	---> java.lang.StringBuffer::hashCode() [0 time(s)]

	---> java.lang.StringBuffer::getX() [0 time(s)]

	---> java.lang.StringBuffer::getY() [0 time(s)]

	---> java.lang.StringBuffer::toString() [0 time(s)]

	---> java.lang.StringBuffer::finalize() [0 time(s)]

	---> java.lang.StringBuffer::clone() [0 time(s)]

structural.flyweight.Shape:
	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [0 time(s)]

structural.flyweight.ShapeFactory:
	---> java.lang.StringBuffer::getClass() [0 time(s)]

	---> java.lang.StringBuffer::wait(long) [0 time(s)]

	---> java.lang.StringBuffer::wait(long,int) [0 time(s)]

	---> java.lang.StringBuffer::wait() [0 time(s)]

	---> java.lang.StringBuffer::getCircle(java.lang.String) [0 time(s)]

	---> java.lang.StringBuffer::notifyAll() [0 time(s)]

	---> java.lang.StringBuffer::equals(java.lang.Object) [0 time(s)]

	---> java.lang.StringBuffer::registerNatives() [0 time(s)]

	---> java.lang.StringBuffer::notify() [0 time(s)]

	---> java.lang.StringBuffer::hashCode() [0 time(s)]

	---> java.lang.StringBuffer::finalize() [0 time(s)]

	---> java.lang.StringBuffer::toString() [0 time(s)]

	---> java.lang.StringBuffer::clone() [0 time(s)]

structural.flyweight.Test:
	---> java.lang.StringBuffer::getClass() [0 time(s)]

	---> java.lang.StringBuffer::wait(long) [0 time(s)]

	---> java.lang.StringBuffer::wait(long,int) [0 time(s)]

	---> java.lang.StringBuffer::wait() [0 time(s)]

	---> java.lang.StringBuffer::notifyAll() [0 time(s)]

	---> java.lang.StringBuffer::equals(java.lang.Object) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::registerNatives() [0 time(s)]

	---> structural.flyweight.Circle::notify() [0 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

	---> structural.flyweight.Circle::hashCode() [0 time(s)]

	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

	---> structural.flyweight.Circle::finalize() [0 time(s)]

	---> structural.flyweight.Circle::toString() [0 time(s)]

	---> structural.flyweight.Circle::clone() [0 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::getClass() [0 time(s)]

	---> structural.flyweight.Circle::wait(long) [0 time(s)]

	---> structural.flyweight.Circle::wait(long,int) [0 time(s)]

	---> structural.flyweight.Circle::wait() [0 time(s)]

	---> structural.flyweight.Circle::notifyAll() [0 time(s)]

	---> structural.flyweight.Circle::equals(java.lang.Object) [0 time(s)]

	---> structural.flyweight.Circle::registerNatives() [0 time(s)]

	---> structural.flyweight.Circle::notify() [0 time(s)]

	---> structural.flyweight.Circle::hashCode() [0 time(s)]

	---> structural.flyweight.Circle::finalize() [0 time(s)]

	---> structural.flyweight.Circle::toString() [0 time(s)]

	---> structural.flyweight.Circle::clone() [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::getClass() [0 time(s)]

	---> structural.proxy.Internet::wait(long) [0 time(s)]

	---> structural.proxy.Internet::wait(long,int) [0 time(s)]

	---> structural.proxy.Internet::wait() [0 time(s)]

	---> structural.proxy.Internet::notifyAll() [0 time(s)]

	---> structural.proxy.Internet::equals(java.lang.Object) [0 time(s)]

	---> structural.proxy.Internet::registerNatives() [0 time(s)]

	---> structural.proxy.Internet::notify() [0 time(s)]

	---> structural.proxy.Internet::hashCode() [0 time(s)]

	---> structural.proxy.Internet::finalize() [0 time(s)]

	---> structural.proxy.Internet::toString() [0 time(s)]

	---> structural.proxy.Internet::clone() [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::getClass() [0 time(s)]

	---> structural.proxy.Internet::wait(long) [0 time(s)]

	---> structural.proxy.Internet::wait(long,int) [0 time(s)]

	---> structural.proxy.Internet::wait() [0 time(s)]

	---> structural.proxy.Internet::notifyAll() [0 time(s)]

	---> structural.proxy.Internet::equals(java.lang.Object) [0 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]

	---> structural.proxy.Internet::registerNatives() [0 time(s)]

	---> structural.proxy.Internet::notify() [0 time(s)]

	---> structural.proxy.Internet::hashCode() [0 time(s)]

	---> structural.proxy.Internet::finalize() [0 time(s)]

	---> structural.proxy.Internet::toString() [0 time(s)]

	---> structural.proxy.Internet::clone() [0 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [2 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.Class::history() [0 time(s)]

	---> java.lang.Class::redo() [0 time(s)]

	---> java.lang.Class::redo() [0 time(s)]

	---> java.lang.Class::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::redo() [2 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [2 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [2 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::execute() [2 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> java.lang.String::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.Test:
	---> java.lang.String::main(java.lang.String[]) [0 time(s)]

	---> java.lang.String::main(java.lang.String[]) [0 time(s)]

	---> java.lang.String::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [1 time(s)]

behavioral.iterator.Song:
	---> java.lang.StringBuffer::toString() [1 time(s)]

	---> java.lang.StringBuffer::toString() [2 time(s)]

	---> java.lang.StringBuffer::toString() [3 time(s)]

	---> java.lang.StringBuffer::toString() [4 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> java.lang.StringBuffer::iterator() [0 time(s)]

	---> java.lang.StringBuffer::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [1 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [1 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [3 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.mediator.User::get(int) [0 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [2 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [1 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockGrabber::update() [3 time(s)]

	---> behavioral.observer.StockObserver::update() [4 time(s)]

	---> java.lang.StringBuffer::displayPrices() [1 time(s)]

	---> java.lang.StringBuffer::displayPrices() [2 time(s)]

	---> java.lang.StringBuffer::displayPrices() [3 time(s)]

	---> java.lang.StringBuffer::displayPrices() [4 time(s)]

	---> java.lang.StringBuffer::displayPrices() [4 time(s)]

	---> java.lang.StringBuffer::displayPrices() [5 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [1 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [3 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [1 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> java.lang.Class::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> java.lang.Class::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [2 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Robot:
	---> java.lang.StringBuffer::toString() [1 time(s)]

	---> java.lang.StringBuffer::toString() [2 time(s)]

	---> java.lang.StringBuffer::toString() [3 time(s)]

	---> java.lang.StringBuffer::toString() [4 time(s)]

	---> java.lang.StringBuffer::toString() [5 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [4 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [0 time(s)]

	---> java.lang.Object::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> java.lang.CloneNotSupportedException::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Position:
	---> java.lang.Object::clone() [1 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [0 time(s)]

	---> java.lang.Object::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> java.lang.CloneNotSupportedException::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> java.lang.Object::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> java.lang.CloneNotSupportedException::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [1 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [3 time(s)]

	---> creational.prototype.Triangle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [6 time(s)]

	---> creational.prototype.Rectangle::loadCache() [7 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [9 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [0 time(s)]

	---> java.lang.Object::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> java.lang.CloneNotSupportedException::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.singleton.ExtendedSingleton2:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.singleton.Singleton:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [6 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::mute() [3 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [1 time(s)]

structural.composite.Song:
	---> java.lang.StringBuilder::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> java.lang.StringBuilder::getInfo() [3 time(s)]

	---> structural.composite.Song::getInfo() [4 time(s)]

	---> java.lang.StringBuilder::getInfo() [5 time(s)]

	---> structural.composite.Song::getInfo() [6 time(s)]

	---> java.lang.StringBuilder::getInfo() [7 time(s)]

	---> java.lang.StringBuilder::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> java.lang.StringBuffer::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> java.lang.StringBuffer::getInfo() [3 time(s)]

	---> structural.composite.SongGroup::getInfo() [4 time(s)]

	---> java.lang.String::getInfo() [5 time(s)]

	---> java.lang.StringBuffer::getInfo() [6 time(s)]

	---> java.lang.StringBuffer::getInfo() [7 time(s)]

	---> java.lang.StringBuffer::getInfo() [8 time(s)]

	---> java.lang.StringBuffer::getInfo() [9 time(s)]

	---> java.lang.StringBuffer::getInfo() [9 time(s)]

	---> java.lang.StringBuffer::getInfo() [9 time(s)]

	---> java.lang.StringBuffer::getInfo() [9 time(s)]

	---> java.lang.StringBuffer::getInfo() [10 time(s)]

	---> structural.composite.SongComponent::getInfo() [11 time(s)]

	---> java.lang.StringBuffer::getInfo() [12 time(s)]

	---> structural.composite.SongComponent::getInfo() [13 time(s)]

	---> java.lang.StringBuffer::getInfo() [14 time(s)]

	---> java.lang.StringBuffer::remove(structural.composite.SongComponent) [0 time(s)]

	---> java.lang.StringBuffer::getComponent(int) [0 time(s)]

	---> java.lang.StringBuffer::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [2 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [1 time(s)]

	---> structural.facade.BankAccount::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [5 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [1 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> java.lang.StringBuffer::setWelcomeMessage() [1 time(s)]

	---> java.lang.StringBuffer::setWelcomeMessage() [2 time(s)]

	---> java.lang.StringBuffer::setWelcomeMessage() [3 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [4 time(s)]

	---> java.lang.StringBuffer::setWelcomeMessage() [5 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [6 time(s)]

	---> java.lang.StringBuffer::setWelcomeMessage() [7 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [1 time(s)]

	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [2 time(s)]

	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [3 time(s)]

	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [4 time(s)]

	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [4 time(s)]

	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [5 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> java.lang.StringBuffer::getCircle(java.lang.String) [0 time(s)]

	---> java.lang.StringBuffer::getCircle(java.lang.String) [0 time(s)]

	---> java.lang.StringBuffer::getCircle(java.lang.String) [0 time(s)]

structural.flyweight.Test:
	---> java.lang.StringBuffer::main(java.lang.String[]) [0 time(s)]

	---> java.lang.StringBuffer::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [0 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [0 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [2 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.Class::history() [0 time(s)]

	---> java.lang.Class::redo() [0 time(s)]

	---> java.lang.Class::redo() [0 time(s)]

	---> java.lang.Class::redo() [0 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::redo() [1 time(s)]

	---> behavioral.command.Command::redo() [2 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [2 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [0 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [2 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::execute() [2 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [0 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> java.lang.String::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.Test:
	---> java.lang.String::main(java.lang.String[]) [0 time(s)]

	---> java.lang.String::main(java.lang.String[]) [0 time(s)]

	---> java.lang.String::main(java.lang.String[]) [0 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [0 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [1 time(s)]

behavioral.iterator.Song:
	---> java.lang.StringBuffer::toString() [1 time(s)]

	---> java.lang.StringBuffer::toString() [2 time(s)]

	---> java.lang.StringBuffer::toString() [3 time(s)]

	---> java.lang.StringBuffer::toString() [4 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> java.lang.StringBuffer::iterator() [0 time(s)]

	---> java.lang.StringBuffer::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [0 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [0 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [0 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [1 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [1 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [0 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [0 time(s)]

	---> behavioral.mediator.User::get(int) [0 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [1 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [13 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [1 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [0 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [0 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockGrabber::update() [3 time(s)]

	---> behavioral.observer.StockObserver::update() [1 time(s)]

	---> java.lang.StringBuffer::displayPrices() [1 time(s)]

	---> java.lang.StringBuffer::displayPrices() [2 time(s)]

	---> java.lang.StringBuffer::displayPrices() [3 time(s)]

	---> java.lang.StringBuffer::displayPrices() [4 time(s)]

	---> java.lang.StringBuffer::displayPrices() [4 time(s)]

	---> java.lang.StringBuffer::displayPrices() [5 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [1 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [0 time(s)]

	---> behavioral.state.ATMState::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [0 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [0 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [1 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [0 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [0 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [0 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [1 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [0 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [0 time(s)]

	---> behavioral.template_method.Game::initialize() [0 time(s)]

	---> behavioral.template_method.Game::end() [0 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> java.lang.Class::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [0 time(s)]

	---> java.lang.Class::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [0 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [2 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [0 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [0 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [7 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [0 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Robot:
	---> java.lang.StringBuffer::toString() [1 time(s)]

	---> java.lang.StringBuffer::toString() [2 time(s)]

	---> java.lang.StringBuffer::toString() [3 time(s)]

	---> java.lang.StringBuffer::toString() [4 time(s)]

	---> java.lang.StringBuffer::toString() [5 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [4 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [0 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [0 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [0 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [0 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [0 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [0 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [0 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [0 time(s)]

	---> java.lang.Object::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> java.lang.CloneNotSupportedException::clone() [1 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Position:
	---> java.lang.Object::clone() [1 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [0 time(s)]

	---> java.lang.Object::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> java.lang.CloneNotSupportedException::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> java.lang.Object::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> java.lang.CloneNotSupportedException::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [0 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [1 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [0 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [3 time(s)]

	---> creational.prototype.Triangle::loadCache() [1 time(s)]

	---> creational.prototype.Triangle::loadCache() [2 time(s)]

	---> creational.prototype.Triangle::loadCache() [2 time(s)]

	---> creational.prototype.Triangle::loadCache() [3 time(s)]

	---> creational.prototype.Rectangle::loadCache() [1 time(s)]

	---> creational.prototype.Rectangle::loadCache() [2 time(s)]

	---> creational.prototype.Rectangle::loadCache() [2 time(s)]

	---> creational.prototype.Rectangle::loadCache() [3 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [0 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [6 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [0 time(s)]

	---> java.lang.Object::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> java.lang.CloneNotSupportedException::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.singleton.ExtendedSingleton2:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.singleton.Singleton:
	---> java.lang.Class::getRegistryKey(java.lang.Class) [1 time(s)]

	---> java.lang.reflect.Constructor::getInstance(java.lang.Class) [1 time(s)]

	---> java.lang.Class::getInstance(java.lang.Class) [2 time(s)]

	---> java.lang.Exception::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [0 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [0 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [4 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [0 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [0 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [0 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [0 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [3 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [0 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [9 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::mute() [3 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [0 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [1 time(s)]

structural.composite.Song:
	---> java.lang.StringBuilder::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> java.lang.StringBuilder::getInfo() [3 time(s)]

	---> structural.composite.Song::getInfo() [4 time(s)]

	---> java.lang.StringBuilder::getInfo() [5 time(s)]

	---> structural.composite.Song::getInfo() [6 time(s)]

	---> java.lang.StringBuilder::getInfo() [7 time(s)]

	---> java.lang.StringBuilder::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [0 time(s)]

	---> java.lang.StringBuffer::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [1 time(s)]

	---> java.lang.StringBuffer::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [3 time(s)]

	---> java.lang.String::getInfo() [4 time(s)]

	---> java.lang.StringBuffer::getInfo() [5 time(s)]

	---> java.lang.StringBuffer::getInfo() [6 time(s)]

	---> java.lang.StringBuffer::getInfo() [7 time(s)]

	---> java.lang.StringBuffer::getInfo() [8 time(s)]

	---> java.lang.StringBuffer::getInfo() [8 time(s)]

	---> java.lang.StringBuffer::getInfo() [8 time(s)]

	---> java.lang.StringBuffer::getInfo() [8 time(s)]

	---> java.lang.StringBuffer::getInfo() [9 time(s)]

	---> structural.composite.SongComponent::getInfo() [10 time(s)]

	---> java.lang.StringBuffer::getInfo() [11 time(s)]

	---> structural.composite.SongComponent::getInfo() [12 time(s)]

	---> java.lang.StringBuffer::getInfo() [13 time(s)]

	---> java.lang.StringBuffer::remove(structural.composite.SongComponent) [0 time(s)]

	---> java.lang.StringBuffer::getComponent(int) [0 time(s)]

	---> java.lang.StringBuffer::displayInfo() [0 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [1 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [0 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [2 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [0 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [1 time(s)]

	---> structural.facade.BankAccount::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [5 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [1 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> java.lang.StringBuffer::setWelcomeMessage() [1 time(s)]

	---> java.lang.StringBuffer::setWelcomeMessage() [2 time(s)]

	---> java.lang.StringBuffer::setWelcomeMessage() [3 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [4 time(s)]

	---> java.lang.StringBuffer::setWelcomeMessage() [5 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [6 time(s)]

	---> java.lang.StringBuffer::setWelcomeMessage() [7 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [1 time(s)]

	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [2 time(s)]

	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [3 time(s)]

	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [4 time(s)]

	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [4 time(s)]

	---> java.lang.StringBuffer::draw(structural.flyweight.Position) [5 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> java.lang.StringBuffer::getCircle(java.lang.String) [0 time(s)]

	---> java.lang.StringBuffer::getCircle(java.lang.String) [0 time(s)]

	---> java.lang.StringBuffer::getCircle(java.lang.String) [0 time(s)]

structural.flyweight.Test:
	---> java.lang.StringBuffer::main(java.lang.String[]) [0 time(s)]

	---> java.lang.StringBuffer::main(java.lang.String[]) [0 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [1 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [0 time(s)]

	---> structural.flyweight.Circle::getRandomX() [0 time(s)]

	---> structural.flyweight.Circle::getRandomY() [0 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [0 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [0 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [0 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [2 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [3 time(s)]

	---> behavioral.command.Command::redo() [4 time(s)]

	---> behavioral.command.Command::redo() [5 time(s)]

	---> behavioral.command.Command::redo() [6 time(s)]

	---> behavioral.command.Command::redo() [7 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [2 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [3 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [4 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [2 time(s)]

	---> behavioral.command.Command::undo() [3 time(s)]

	---> behavioral.command.Command::undo() [4 time(s)]

	---> behavioral.command.Command::undo() [5 time(s)]

	---> behavioral.command.Command::undo() [6 time(s)]

	---> behavioral.command.Command::undo() [7 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::execute() [2 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [15 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [3 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [4 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [5 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [6 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [1 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [1 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [1 time(s)]

	---> structural.composite.Song::toString() [2 time(s)]

	---> structural.composite.Song::toString() [3 time(s)]

	---> structural.composite.Song::toString() [4 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [1 time(s)]

	---> structural.composite.Song::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::iterator() [3 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [13 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [14 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [15 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [16 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [17 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [18 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [1 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [2 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.mediator.User::get(int) [1 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [2 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [16 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [17 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [18 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [1 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [2 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [3 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [1 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockGrabber::update() [3 time(s)]

	---> behavioral.observer.StockObserver::update() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [1 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [2 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [5 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [6 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [1 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [8 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [9 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [3 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [4 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [5 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [3 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [1 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [1 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [5 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [3 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [3 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [5 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [3 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [1 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [2 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [9 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [10 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [1 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [1 time(s)]

	---> creational.builder.Robot::toString() [2 time(s)]

	---> creational.builder.Robot::toString() [3 time(s)]

	---> creational.builder.Robot::toString() [4 time(s)]

	---> creational.builder.Robot::toString() [5 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [4 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [6 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [7 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [8 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [2 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [1 time(s)]

	---> creational.factory.EnemyShip::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [1 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [2 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [1 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [3 time(s)]

	---> creational.prototype.Circle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [6 time(s)]

	---> creational.prototype.Triangle::loadCache() [7 time(s)]

	---> creational.prototype.Triangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [9 time(s)]

	---> creational.prototype.Rectangle::loadCache() [10 time(s)]

	---> creational.prototype.Rectangle::loadCache() [11 time(s)]

	---> creational.prototype.Rectangle::loadCache() [12 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [7 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [9 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [10 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [11 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [12 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [13 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [14 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [15 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [16 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [17 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [2 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [2 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [6 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [7 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [8 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [9 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [10 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [11 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [12 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [13 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [1 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [2 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [2 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::mute() [3 time(s)]

	---> structural.bridge.Device::mute() [4 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [1 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [2 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [3 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [13 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [11 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [1 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [3 time(s)]

	---> structural.composite.Song::getInfo() [4 time(s)]

	---> structural.composite.Song::getInfo() [5 time(s)]

	---> structural.composite.Song::getInfo() [6 time(s)]

	---> structural.composite.Song::getInfo() [7 time(s)]

	---> structural.composite.Song::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [3 time(s)]

	---> structural.composite.SongGroup::getInfo() [4 time(s)]

	---> structural.composite.SongGroup::getInfo() [5 time(s)]

	---> structural.composite.SongGroup::getInfo() [6 time(s)]

	---> structural.composite.SongGroup::getInfo() [7 time(s)]

	---> structural.composite.SongGroup::getInfo() [8 time(s)]

	---> structural.composite.SongGroup::getInfo() [9 time(s)]

	---> structural.composite.SongGroup::getInfo() [10 time(s)]

	---> structural.composite.SongGroup::getInfo() [11 time(s)]

	---> structural.composite.SongGroup::getInfo() [12 time(s)]

	---> structural.composite.SongGroup::getInfo() [13 time(s)]

	---> structural.composite.SongComponent::getInfo() [14 time(s)]

	---> structural.composite.SongComponent::getInfo() [15 time(s)]

	---> structural.composite.SongComponent::getInfo() [16 time(s)]

	---> structural.composite.SongComponent::getInfo() [17 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [2 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [3 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [4 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [1 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [2 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [3 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [1 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [2 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [1 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [2 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [4 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [1 time(s)]

	---> structural.facade.BankAccount::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [6 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [7 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [8 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [5 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [6 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [1 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [2 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [3 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [4 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [5 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [6 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [7 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [1 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [2 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [3 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [4 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [5 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [6 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [1 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [2 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [3 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [3 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [4 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [5 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [6 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [7 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [1 time(s)]

	---> structural.flyweight.Circle::getRandomX() [1 time(s)]

	---> structural.flyweight.Circle::getRandomY() [1 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [1 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [1 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [2 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [3 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [2 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [3 time(s)]

	---> behavioral.command.Command::redo() [4 time(s)]

	---> behavioral.command.Command::redo() [5 time(s)]

	---> behavioral.command.Command::redo() [6 time(s)]

	---> behavioral.command.Command::redo() [7 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [2 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [3 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [4 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [2 time(s)]

	---> behavioral.command.Command::undo() [3 time(s)]

	---> behavioral.command.Command::undo() [4 time(s)]

	---> behavioral.command.Command::undo() [5 time(s)]

	---> behavioral.command.Command::undo() [6 time(s)]

	---> behavioral.command.Command::undo() [7 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::execute() [2 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [15 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [3 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [4 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [5 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [6 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [1 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [1 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [1 time(s)]

	---> structural.composite.Song::toString() [2 time(s)]

	---> structural.composite.Song::toString() [3 time(s)]

	---> structural.composite.Song::toString() [4 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [1 time(s)]

	---> structural.composite.Song::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::iterator() [3 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [13 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [14 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [15 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [16 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [17 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [18 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [1 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [2 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.mediator.User::get(int) [1 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [2 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [16 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [17 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [18 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [1 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [2 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [3 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [1 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockGrabber::update() [3 time(s)]

	---> behavioral.observer.StockObserver::update() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [1 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [2 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [5 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [6 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [1 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [8 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [9 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [3 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [4 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [5 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [3 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [1 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [1 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [5 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [3 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [3 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [5 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [3 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [1 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [2 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [9 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [10 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [1 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [1 time(s)]

	---> creational.builder.Robot::toString() [2 time(s)]

	---> creational.builder.Robot::toString() [3 time(s)]

	---> creational.builder.Robot::toString() [4 time(s)]

	---> creational.builder.Robot::toString() [5 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [4 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [6 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [7 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [8 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [2 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [1 time(s)]

	---> creational.factory.EnemyShip::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [1 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [2 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [1 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [3 time(s)]

	---> creational.prototype.Circle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [6 time(s)]

	---> creational.prototype.Triangle::loadCache() [7 time(s)]

	---> creational.prototype.Triangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [9 time(s)]

	---> creational.prototype.Rectangle::loadCache() [10 time(s)]

	---> creational.prototype.Rectangle::loadCache() [11 time(s)]

	---> creational.prototype.Rectangle::loadCache() [12 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [7 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [9 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [10 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [11 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [12 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [13 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [14 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [15 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [16 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [17 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [2 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [2 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [6 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [7 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [8 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [9 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [10 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [11 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [12 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [13 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [1 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [2 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [2 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::mute() [3 time(s)]

	---> structural.bridge.Device::mute() [4 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [1 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [2 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [3 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [13 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [11 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [1 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [3 time(s)]

	---> structural.composite.Song::getInfo() [4 time(s)]

	---> structural.composite.Song::getInfo() [5 time(s)]

	---> structural.composite.Song::getInfo() [6 time(s)]

	---> structural.composite.Song::getInfo() [7 time(s)]

	---> structural.composite.Song::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [3 time(s)]

	---> structural.composite.SongGroup::getInfo() [4 time(s)]

	---> structural.composite.SongGroup::getInfo() [5 time(s)]

	---> structural.composite.SongGroup::getInfo() [6 time(s)]

	---> structural.composite.SongGroup::getInfo() [7 time(s)]

	---> structural.composite.SongGroup::getInfo() [8 time(s)]

	---> structural.composite.SongGroup::getInfo() [9 time(s)]

	---> structural.composite.SongGroup::getInfo() [10 time(s)]

	---> structural.composite.SongGroup::getInfo() [11 time(s)]

	---> structural.composite.SongGroup::getInfo() [12 time(s)]

	---> structural.composite.SongGroup::getInfo() [13 time(s)]

	---> structural.composite.SongComponent::getInfo() [14 time(s)]

	---> structural.composite.SongComponent::getInfo() [15 time(s)]

	---> structural.composite.SongComponent::getInfo() [16 time(s)]

	---> structural.composite.SongComponent::getInfo() [17 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [2 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [3 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [4 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [1 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [2 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [3 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [1 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [2 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [1 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [2 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [4 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [1 time(s)]

	---> structural.facade.BankAccount::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [6 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [7 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [8 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [5 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [6 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [1 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [2 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [3 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [4 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [5 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [6 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [7 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [1 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [2 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [3 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [4 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [5 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [6 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [1 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [2 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [3 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [3 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [4 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [5 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [6 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [7 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [1 time(s)]

	---> structural.flyweight.Circle::getRandomX() [1 time(s)]

	---> structural.flyweight.Circle::getRandomY() [1 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [1 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [1 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [2 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [3 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [2 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [3 time(s)]

	---> behavioral.command.Command::redo() [4 time(s)]

	---> behavioral.command.Command::redo() [5 time(s)]

	---> behavioral.command.Command::redo() [6 time(s)]

	---> behavioral.command.Command::redo() [7 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [2 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [3 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [4 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [2 time(s)]

	---> behavioral.command.Command::undo() [3 time(s)]

	---> behavioral.command.Command::undo() [4 time(s)]

	---> behavioral.command.Command::undo() [5 time(s)]

	---> behavioral.command.Command::undo() [6 time(s)]

	---> behavioral.command.Command::undo() [7 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::execute() [2 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [15 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [3 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [4 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [5 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [6 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [1 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [1 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [1 time(s)]

	---> structural.composite.Song::toString() [2 time(s)]

	---> structural.composite.Song::toString() [3 time(s)]

	---> structural.composite.Song::toString() [4 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [1 time(s)]

	---> structural.composite.Song::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::iterator() [3 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [13 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [14 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [15 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [16 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [17 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [18 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [1 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [2 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.mediator.User::get(int) [1 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [2 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [16 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [17 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [18 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [1 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [2 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [3 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [1 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockGrabber::update() [3 time(s)]

	---> behavioral.observer.StockObserver::update() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [1 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [2 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [5 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [6 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [1 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [8 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [9 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [3 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [4 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [5 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [3 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [1 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [1 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [5 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [3 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [3 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [5 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [3 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [1 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [2 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [9 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [10 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [1 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [1 time(s)]

	---> creational.builder.Robot::toString() [2 time(s)]

	---> creational.builder.Robot::toString() [3 time(s)]

	---> creational.builder.Robot::toString() [4 time(s)]

	---> creational.builder.Robot::toString() [5 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [4 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [6 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [7 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [8 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [2 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [1 time(s)]

	---> creational.factory.EnemyShip::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [1 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [2 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [1 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [3 time(s)]

	---> creational.prototype.Circle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [6 time(s)]

	---> creational.prototype.Triangle::loadCache() [7 time(s)]

	---> creational.prototype.Triangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [9 time(s)]

	---> creational.prototype.Rectangle::loadCache() [10 time(s)]

	---> creational.prototype.Rectangle::loadCache() [11 time(s)]

	---> creational.prototype.Rectangle::loadCache() [12 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [7 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [9 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [10 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [11 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [12 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [13 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [14 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [15 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [16 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [17 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [2 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [2 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [6 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [7 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [8 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [9 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [10 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [11 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [12 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [13 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [1 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [2 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [2 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::mute() [3 time(s)]

	---> structural.bridge.Device::mute() [4 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [1 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [2 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [3 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [13 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [11 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [1 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [3 time(s)]

	---> structural.composite.Song::getInfo() [4 time(s)]

	---> structural.composite.Song::getInfo() [5 time(s)]

	---> structural.composite.Song::getInfo() [6 time(s)]

	---> structural.composite.Song::getInfo() [7 time(s)]

	---> structural.composite.Song::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [3 time(s)]

	---> structural.composite.SongGroup::getInfo() [4 time(s)]

	---> structural.composite.SongGroup::getInfo() [5 time(s)]

	---> structural.composite.SongGroup::getInfo() [6 time(s)]

	---> structural.composite.SongGroup::getInfo() [7 time(s)]

	---> structural.composite.SongGroup::getInfo() [8 time(s)]

	---> structural.composite.SongGroup::getInfo() [9 time(s)]

	---> structural.composite.SongGroup::getInfo() [10 time(s)]

	---> structural.composite.SongGroup::getInfo() [11 time(s)]

	---> structural.composite.SongGroup::getInfo() [12 time(s)]

	---> structural.composite.SongGroup::getInfo() [13 time(s)]

	---> structural.composite.SongComponent::getInfo() [14 time(s)]

	---> structural.composite.SongComponent::getInfo() [15 time(s)]

	---> structural.composite.SongComponent::getInfo() [16 time(s)]

	---> structural.composite.SongComponent::getInfo() [17 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [2 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [3 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [4 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [1 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [2 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [3 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [1 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [2 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [1 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [2 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [4 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [1 time(s)]

	---> structural.facade.BankAccount::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [6 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [7 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [8 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [5 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [6 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [1 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [2 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [3 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [4 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [5 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [6 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [7 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [1 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [2 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [3 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [4 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [5 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [6 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [1 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [2 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [3 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [3 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [4 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [5 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [6 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [7 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [1 time(s)]

	---> structural.flyweight.Circle::getRandomX() [1 time(s)]

	---> structural.flyweight.Circle::getRandomY() [1 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [1 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [1 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [2 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [3 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 401.
Invocations: 424.0.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [2 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [3 time(s)]

	---> behavioral.command.Command::redo() [4 time(s)]

	---> behavioral.command.Command::redo() [5 time(s)]

	---> behavioral.command.Command::redo() [6 time(s)]

	---> behavioral.command.Command::redo() [7 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [2 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [3 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [4 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [2 time(s)]

	---> behavioral.command.Command::undo() [3 time(s)]

	---> behavioral.command.Command::undo() [4 time(s)]

	---> behavioral.command.Command::undo() [5 time(s)]

	---> behavioral.command.Command::undo() [6 time(s)]

	---> behavioral.command.Command::undo() [7 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::execute() [2 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [15 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [3 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [4 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [5 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [6 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [1 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [1 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [1 time(s)]

	---> structural.composite.Song::toString() [2 time(s)]

	---> structural.composite.Song::toString() [3 time(s)]

	---> structural.composite.Song::toString() [4 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [1 time(s)]

	---> structural.composite.Song::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::iterator() [3 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [13 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [14 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [15 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [16 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [17 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [18 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [1 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [2 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.mediator.User::get(int) [1 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [2 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [16 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [17 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [18 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [1 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [2 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [3 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [1 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockGrabber::update() [3 time(s)]

	---> behavioral.observer.StockObserver::update() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [1 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [2 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [5 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [6 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [1 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [8 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [9 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [3 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [4 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [5 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [3 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [1 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [1 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [5 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [3 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [3 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [5 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [3 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [1 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [2 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [9 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [10 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [1 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [1 time(s)]

	---> creational.builder.Robot::toString() [2 time(s)]

	---> creational.builder.Robot::toString() [3 time(s)]

	---> creational.builder.Robot::toString() [4 time(s)]

	---> creational.builder.Robot::toString() [5 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [4 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [6 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [7 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [8 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [2 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [1 time(s)]

	---> creational.factory.EnemyShip::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [1 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [2 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [1 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [3 time(s)]

	---> creational.prototype.Circle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [6 time(s)]

	---> creational.prototype.Triangle::loadCache() [7 time(s)]

	---> creational.prototype.Triangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [9 time(s)]

	---> creational.prototype.Rectangle::loadCache() [10 time(s)]

	---> creational.prototype.Rectangle::loadCache() [11 time(s)]

	---> creational.prototype.Rectangle::loadCache() [12 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [7 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [9 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [10 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [11 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [12 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [13 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [14 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [15 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [16 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [17 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [2 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [2 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [6 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [7 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [8 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [9 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [10 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [11 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [12 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [13 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [1 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [2 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [2 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::mute() [3 time(s)]

	---> structural.bridge.Device::mute() [4 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [1 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [2 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [3 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [13 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [11 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [1 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [3 time(s)]

	---> structural.composite.Song::getInfo() [4 time(s)]

	---> structural.composite.Song::getInfo() [5 time(s)]

	---> structural.composite.Song::getInfo() [6 time(s)]

	---> structural.composite.Song::getInfo() [7 time(s)]

	---> structural.composite.Song::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [3 time(s)]

	---> structural.composite.SongGroup::getInfo() [4 time(s)]

	---> structural.composite.SongGroup::getInfo() [5 time(s)]

	---> structural.composite.SongGroup::getInfo() [6 time(s)]

	---> structural.composite.SongGroup::getInfo() [7 time(s)]

	---> structural.composite.SongGroup::getInfo() [8 time(s)]

	---> structural.composite.SongGroup::getInfo() [9 time(s)]

	---> structural.composite.SongGroup::getInfo() [10 time(s)]

	---> structural.composite.SongGroup::getInfo() [11 time(s)]

	---> structural.composite.SongGroup::getInfo() [12 time(s)]

	---> structural.composite.SongGroup::getInfo() [13 time(s)]

	---> structural.composite.SongComponent::getInfo() [14 time(s)]

	---> structural.composite.SongComponent::getInfo() [15 time(s)]

	---> structural.composite.SongComponent::getInfo() [16 time(s)]

	---> structural.composite.SongComponent::getInfo() [17 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [2 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [3 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [4 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [1 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [2 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [3 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [1 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [2 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [1 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [2 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [4 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [1 time(s)]

	---> structural.facade.BankAccount::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [6 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [7 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [8 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [5 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [6 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [1 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [2 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [3 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [4 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [5 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [6 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [7 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [1 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [2 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [3 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [4 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [5 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [6 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [1 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [2 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [3 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [3 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [4 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [5 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [6 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [7 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [1 time(s)]

	---> structural.flyweight.Circle::getRandomX() [1 time(s)]

	---> structural.flyweight.Circle::getRandomY() [1 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [1 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [1 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [2 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [3 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 401.
Invocations: 424.0.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [2 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [3 time(s)]

	---> behavioral.command.Command::redo() [4 time(s)]

	---> behavioral.command.Command::redo() [5 time(s)]

	---> behavioral.command.Command::redo() [6 time(s)]

	---> behavioral.command.Command::redo() [7 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [2 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [3 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [4 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [2 time(s)]

	---> behavioral.command.Command::undo() [3 time(s)]

	---> behavioral.command.Command::undo() [4 time(s)]

	---> behavioral.command.Command::undo() [5 time(s)]

	---> behavioral.command.Command::undo() [6 time(s)]

	---> behavioral.command.Command::undo() [7 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::execute() [2 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [15 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [3 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [4 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [5 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [6 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [1 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [1 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [1 time(s)]

	---> structural.composite.Song::toString() [2 time(s)]

	---> structural.composite.Song::toString() [3 time(s)]

	---> structural.composite.Song::toString() [4 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [1 time(s)]

	---> structural.composite.Song::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::iterator() [3 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [13 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [14 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [15 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [16 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [17 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [18 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [1 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [2 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.mediator.User::get(int) [1 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [2 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [16 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [17 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [18 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [1 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [2 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [3 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [1 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockGrabber::update() [3 time(s)]

	---> behavioral.observer.StockObserver::update() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [1 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [2 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [5 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [6 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [1 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [8 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [9 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [3 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [4 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [5 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [3 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [1 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [1 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [5 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [3 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [3 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [5 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [3 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [1 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [2 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [9 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [10 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [1 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [1 time(s)]

	---> creational.builder.Robot::toString() [2 time(s)]

	---> creational.builder.Robot::toString() [3 time(s)]

	---> creational.builder.Robot::toString() [4 time(s)]

	---> creational.builder.Robot::toString() [5 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [4 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [6 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [7 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [8 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [2 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [1 time(s)]

	---> creational.factory.EnemyShip::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [1 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [2 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [1 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [3 time(s)]

	---> creational.prototype.Circle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [6 time(s)]

	---> creational.prototype.Triangle::loadCache() [7 time(s)]

	---> creational.prototype.Triangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [9 time(s)]

	---> creational.prototype.Rectangle::loadCache() [10 time(s)]

	---> creational.prototype.Rectangle::loadCache() [11 time(s)]

	---> creational.prototype.Rectangle::loadCache() [12 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [7 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [9 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [10 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [11 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [12 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [13 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [14 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [15 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [16 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [17 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [2 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [2 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [6 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [7 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [8 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [9 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [10 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [11 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [12 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [13 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [1 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [2 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [2 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::mute() [3 time(s)]

	---> structural.bridge.Device::mute() [4 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [1 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [2 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [3 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [13 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [11 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [1 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [3 time(s)]

	---> structural.composite.Song::getInfo() [4 time(s)]

	---> structural.composite.Song::getInfo() [5 time(s)]

	---> structural.composite.Song::getInfo() [6 time(s)]

	---> structural.composite.Song::getInfo() [7 time(s)]

	---> structural.composite.Song::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [3 time(s)]

	---> structural.composite.SongGroup::getInfo() [4 time(s)]

	---> structural.composite.SongGroup::getInfo() [5 time(s)]

	---> structural.composite.SongGroup::getInfo() [6 time(s)]

	---> structural.composite.SongGroup::getInfo() [7 time(s)]

	---> structural.composite.SongGroup::getInfo() [8 time(s)]

	---> structural.composite.SongGroup::getInfo() [9 time(s)]

	---> structural.composite.SongGroup::getInfo() [10 time(s)]

	---> structural.composite.SongGroup::getInfo() [11 time(s)]

	---> structural.composite.SongGroup::getInfo() [12 time(s)]

	---> structural.composite.SongGroup::getInfo() [13 time(s)]

	---> structural.composite.SongComponent::getInfo() [14 time(s)]

	---> structural.composite.SongComponent::getInfo() [15 time(s)]

	---> structural.composite.SongComponent::getInfo() [16 time(s)]

	---> structural.composite.SongComponent::getInfo() [17 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [2 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [3 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [4 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [1 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [2 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [3 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [1 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [2 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [1 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [2 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [4 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [1 time(s)]

	---> structural.facade.BankAccount::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [6 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [7 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [8 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [5 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [6 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [1 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [2 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [3 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [4 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [5 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [6 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [7 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [1 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [2 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [3 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [4 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [5 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [6 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [1 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [2 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [3 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [3 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [4 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [5 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [6 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [7 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [1 time(s)]

	---> structural.flyweight.Circle::getRandomX() [1 time(s)]

	---> structural.flyweight.Circle::getRandomY() [1 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [1 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [1 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [2 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [3 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.0.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [2 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [3 time(s)]

	---> behavioral.command.Command::redo() [4 time(s)]

	---> behavioral.command.Command::redo() [5 time(s)]

	---> behavioral.command.Command::redo() [6 time(s)]

	---> behavioral.command.Command::redo() [7 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [2 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [3 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [4 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [2 time(s)]

	---> behavioral.command.Command::undo() [3 time(s)]

	---> behavioral.command.Command::undo() [4 time(s)]

	---> behavioral.command.Command::undo() [5 time(s)]

	---> behavioral.command.Command::undo() [6 time(s)]

	---> behavioral.command.Command::undo() [7 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::execute() [2 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [15 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [3 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [4 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [5 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [6 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [1 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [1 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [1 time(s)]

	---> structural.composite.Song::toString() [2 time(s)]

	---> structural.composite.Song::toString() [3 time(s)]

	---> structural.composite.Song::toString() [4 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [1 time(s)]

	---> structural.composite.Song::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::iterator() [3 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [13 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [14 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [15 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [16 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [17 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [18 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [1 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [2 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.mediator.User::get(int) [1 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [2 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [16 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [17 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [18 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [1 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [2 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [3 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [1 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockGrabber::update() [3 time(s)]

	---> behavioral.observer.StockObserver::update() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [1 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [2 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [5 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [6 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [1 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [8 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [9 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [3 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [4 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [5 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [3 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [1 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [1 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [5 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [3 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [3 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [5 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [3 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [1 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [2 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [9 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [10 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [1 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [1 time(s)]

	---> creational.builder.Robot::toString() [2 time(s)]

	---> creational.builder.Robot::toString() [3 time(s)]

	---> creational.builder.Robot::toString() [4 time(s)]

	---> creational.builder.Robot::toString() [5 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [4 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [6 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [7 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [8 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [2 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [1 time(s)]

	---> creational.factory.EnemyShip::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [1 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [2 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [1 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [3 time(s)]

	---> creational.prototype.Circle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [6 time(s)]

	---> creational.prototype.Triangle::loadCache() [7 time(s)]

	---> creational.prototype.Triangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [9 time(s)]

	---> creational.prototype.Rectangle::loadCache() [10 time(s)]

	---> creational.prototype.Rectangle::loadCache() [11 time(s)]

	---> creational.prototype.Rectangle::loadCache() [12 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [7 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [9 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [10 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [11 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [12 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [13 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [14 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [15 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [16 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [17 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [2 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [2 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [6 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [7 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [8 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [9 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [10 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [11 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [12 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [13 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [1 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [2 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [2 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::mute() [3 time(s)]

	---> structural.bridge.Device::mute() [4 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [1 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [2 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [3 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [13 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [11 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [1 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [3 time(s)]

	---> structural.composite.Song::getInfo() [4 time(s)]

	---> structural.composite.Song::getInfo() [5 time(s)]

	---> structural.composite.Song::getInfo() [6 time(s)]

	---> structural.composite.Song::getInfo() [7 time(s)]

	---> structural.composite.Song::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [3 time(s)]

	---> structural.composite.SongGroup::getInfo() [4 time(s)]

	---> structural.composite.SongGroup::getInfo() [5 time(s)]

	---> structural.composite.SongGroup::getInfo() [6 time(s)]

	---> structural.composite.SongGroup::getInfo() [7 time(s)]

	---> structural.composite.SongGroup::getInfo() [8 time(s)]

	---> structural.composite.SongGroup::getInfo() [9 time(s)]

	---> structural.composite.SongGroup::getInfo() [10 time(s)]

	---> structural.composite.SongGroup::getInfo() [11 time(s)]

	---> structural.composite.SongGroup::getInfo() [12 time(s)]

	---> structural.composite.SongGroup::getInfo() [13 time(s)]

	---> structural.composite.SongComponent::getInfo() [14 time(s)]

	---> structural.composite.SongComponent::getInfo() [15 time(s)]

	---> structural.composite.SongComponent::getInfo() [16 time(s)]

	---> structural.composite.SongComponent::getInfo() [17 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [2 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [3 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [4 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [1 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [2 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [3 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [1 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [2 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [1 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [2 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [4 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [1 time(s)]

	---> structural.facade.BankAccount::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [6 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [7 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [8 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [5 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [6 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [1 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [2 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [3 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [4 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [5 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [6 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [7 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [1 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [2 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [3 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [4 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [5 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [6 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [1 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [2 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [3 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [3 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [4 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [5 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [6 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [7 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [1 time(s)]

	---> structural.flyweight.Circle::getRandomX() [1 time(s)]

	---> structural.flyweight.Circle::getRandomY() [1 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [1 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [1 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [2 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [3 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.0.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [2 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [3 time(s)]

	---> behavioral.command.Command::redo() [4 time(s)]

	---> behavioral.command.Command::redo() [5 time(s)]

	---> behavioral.command.Command::redo() [6 time(s)]

	---> behavioral.command.Command::redo() [7 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [2 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [3 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [4 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [2 time(s)]

	---> behavioral.command.Command::undo() [3 time(s)]

	---> behavioral.command.Command::undo() [4 time(s)]

	---> behavioral.command.Command::undo() [5 time(s)]

	---> behavioral.command.Command::undo() [6 time(s)]

	---> behavioral.command.Command::undo() [7 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::execute() [2 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [15 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [3 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [4 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [5 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [6 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [1 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [1 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [1 time(s)]

	---> structural.composite.Song::toString() [2 time(s)]

	---> structural.composite.Song::toString() [3 time(s)]

	---> structural.composite.Song::toString() [4 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [1 time(s)]

	---> structural.composite.Song::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::iterator() [3 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [13 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [14 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [15 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [16 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [17 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [18 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [1 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [2 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.mediator.User::get(int) [1 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [2 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [16 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [17 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [18 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [1 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [2 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [3 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [1 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockGrabber::update() [3 time(s)]

	---> behavioral.observer.StockObserver::update() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [1 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [2 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [5 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [6 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [1 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [8 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [9 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [3 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [4 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [5 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [3 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [1 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [1 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [5 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [3 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [3 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [5 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [3 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [1 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [2 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [9 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [10 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [1 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [1 time(s)]

	---> creational.builder.Robot::toString() [2 time(s)]

	---> creational.builder.Robot::toString() [3 time(s)]

	---> creational.builder.Robot::toString() [4 time(s)]

	---> creational.builder.Robot::toString() [5 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [4 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [6 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [7 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [8 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [2 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [1 time(s)]

	---> creational.factory.EnemyShip::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [1 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [2 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [1 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [3 time(s)]

	---> creational.prototype.Circle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [6 time(s)]

	---> creational.prototype.Triangle::loadCache() [7 time(s)]

	---> creational.prototype.Triangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [9 time(s)]

	---> creational.prototype.Rectangle::loadCache() [10 time(s)]

	---> creational.prototype.Rectangle::loadCache() [11 time(s)]

	---> creational.prototype.Rectangle::loadCache() [12 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [7 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [9 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [10 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [11 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [12 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [13 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [14 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [15 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [16 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [17 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [2 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [2 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [6 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [7 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [8 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [9 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [10 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [11 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [12 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [13 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [1 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [2 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [2 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::mute() [3 time(s)]

	---> structural.bridge.Device::mute() [4 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [1 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [2 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [3 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [13 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [11 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [1 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [3 time(s)]

	---> structural.composite.Song::getInfo() [4 time(s)]

	---> structural.composite.Song::getInfo() [5 time(s)]

	---> structural.composite.Song::getInfo() [6 time(s)]

	---> structural.composite.Song::getInfo() [7 time(s)]

	---> structural.composite.Song::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [3 time(s)]

	---> structural.composite.SongGroup::getInfo() [4 time(s)]

	---> structural.composite.SongGroup::getInfo() [5 time(s)]

	---> structural.composite.SongGroup::getInfo() [6 time(s)]

	---> structural.composite.SongGroup::getInfo() [7 time(s)]

	---> structural.composite.SongGroup::getInfo() [8 time(s)]

	---> structural.composite.SongGroup::getInfo() [9 time(s)]

	---> structural.composite.SongGroup::getInfo() [10 time(s)]

	---> structural.composite.SongGroup::getInfo() [11 time(s)]

	---> structural.composite.SongGroup::getInfo() [12 time(s)]

	---> structural.composite.SongGroup::getInfo() [13 time(s)]

	---> structural.composite.SongComponent::getInfo() [14 time(s)]

	---> structural.composite.SongComponent::getInfo() [15 time(s)]

	---> structural.composite.SongComponent::getInfo() [16 time(s)]

	---> structural.composite.SongComponent::getInfo() [17 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [2 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [3 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [4 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [1 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [2 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [3 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [1 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [2 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [1 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [2 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [4 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [1 time(s)]

	---> structural.facade.BankAccount::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [6 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [7 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [8 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [5 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [6 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [1 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [2 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [3 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [4 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [5 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [6 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [7 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [1 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [2 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [3 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [4 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [5 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [6 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [1 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [2 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [3 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [3 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [4 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [5 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [6 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [7 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [1 time(s)]

	---> structural.flyweight.Circle::getRandomX() [1 time(s)]

	---> structural.flyweight.Circle::getRandomY() [1 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [1 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [1 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [2 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [3 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 401.
Invocations: 424.0.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [2 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [3 time(s)]

	---> behavioral.command.Command::redo() [4 time(s)]

	---> behavioral.command.Command::redo() [5 time(s)]

	---> behavioral.command.Command::redo() [6 time(s)]

	---> behavioral.command.Command::redo() [7 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [2 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [3 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [4 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [2 time(s)]

	---> behavioral.command.Command::undo() [3 time(s)]

	---> behavioral.command.Command::undo() [4 time(s)]

	---> behavioral.command.Command::undo() [5 time(s)]

	---> behavioral.command.Command::undo() [6 time(s)]

	---> behavioral.command.Command::undo() [7 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::execute() [2 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [15 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [3 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [4 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [5 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [6 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [1 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [1 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [1 time(s)]

	---> structural.composite.Song::toString() [2 time(s)]

	---> structural.composite.Song::toString() [3 time(s)]

	---> structural.composite.Song::toString() [4 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [1 time(s)]

	---> structural.composite.Song::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::iterator() [3 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [13 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [14 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [15 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [16 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [17 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [18 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [1 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [2 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.mediator.User::get(int) [1 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [2 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [16 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [17 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [18 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [1 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [2 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [3 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [1 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockGrabber::update() [3 time(s)]

	---> behavioral.observer.StockObserver::update() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [1 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [2 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [5 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [6 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [1 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [8 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [9 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [3 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [4 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [5 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [3 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [1 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [1 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [5 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [3 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [3 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [5 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [3 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [1 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [2 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [9 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [10 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [1 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [1 time(s)]

	---> creational.builder.Robot::toString() [2 time(s)]

	---> creational.builder.Robot::toString() [3 time(s)]

	---> creational.builder.Robot::toString() [4 time(s)]

	---> creational.builder.Robot::toString() [5 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [4 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [6 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [7 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [8 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [2 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [1 time(s)]

	---> creational.factory.EnemyShip::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [1 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [2 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [1 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [3 time(s)]

	---> creational.prototype.Circle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [6 time(s)]

	---> creational.prototype.Triangle::loadCache() [7 time(s)]

	---> creational.prototype.Triangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [9 time(s)]

	---> creational.prototype.Rectangle::loadCache() [10 time(s)]

	---> creational.prototype.Rectangle::loadCache() [11 time(s)]

	---> creational.prototype.Rectangle::loadCache() [12 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [7 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [9 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [10 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [11 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [12 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [13 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [14 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [15 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [16 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [17 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [2 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [2 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [6 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [7 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [8 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [9 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [10 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [11 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [12 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [13 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [1 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [2 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [2 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::mute() [3 time(s)]

	---> structural.bridge.Device::mute() [4 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [1 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [2 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [3 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [13 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [11 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [1 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [3 time(s)]

	---> structural.composite.Song::getInfo() [4 time(s)]

	---> structural.composite.Song::getInfo() [5 time(s)]

	---> structural.composite.Song::getInfo() [6 time(s)]

	---> structural.composite.Song::getInfo() [7 time(s)]

	---> structural.composite.Song::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [3 time(s)]

	---> structural.composite.SongGroup::getInfo() [4 time(s)]

	---> structural.composite.SongGroup::getInfo() [5 time(s)]

	---> structural.composite.SongGroup::getInfo() [6 time(s)]

	---> structural.composite.SongGroup::getInfo() [7 time(s)]

	---> structural.composite.SongGroup::getInfo() [8 time(s)]

	---> structural.composite.SongGroup::getInfo() [9 time(s)]

	---> structural.composite.SongGroup::getInfo() [10 time(s)]

	---> structural.composite.SongGroup::getInfo() [11 time(s)]

	---> structural.composite.SongGroup::getInfo() [12 time(s)]

	---> structural.composite.SongGroup::getInfo() [13 time(s)]

	---> structural.composite.SongComponent::getInfo() [14 time(s)]

	---> structural.composite.SongComponent::getInfo() [15 time(s)]

	---> structural.composite.SongComponent::getInfo() [16 time(s)]

	---> structural.composite.SongComponent::getInfo() [17 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [2 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [3 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [4 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [1 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [2 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [3 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [1 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [2 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [1 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [2 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [4 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [1 time(s)]

	---> structural.facade.BankAccount::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [6 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [7 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [8 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [5 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [6 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [1 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [2 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [3 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [4 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [5 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [6 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [7 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [1 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [2 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [3 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [4 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [5 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [6 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [1 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [2 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [3 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [3 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [4 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [5 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [6 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [7 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [1 time(s)]

	---> structural.flyweight.Circle::getRandomX() [1 time(s)]

	---> structural.flyweight.Circle::getRandomY() [1 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [1 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [1 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [2 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [3 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


Static Call Graph
Methods: 399.
Invocations: 424.0.
Class: 131.
behavioral.chain_of_responsibility.ConsoleLogger:
	---> ::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ErrorLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.FileLogger:
	---> behavioral.chain_of_responsibility.ILogger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::write(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.ILogger:
behavioral.chain_of_responsibility.LogRequest:
behavioral.chain_of_responsibility.LogRequestLevel:
behavioral.chain_of_responsibility.Logger:
	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

	---> behavioral.chain_of_responsibility.LogRequestLevel::log(behavioral.chain_of_responsibility.LogRequest) [2 time(s)]

	---> behavioral.chain_of_responsibility.LogRequest::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

	---> behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [5 time(s)]

behavioral.chain_of_responsibility.StandardLogRequestLevel:
behavioral.chain_of_responsibility.Test:
	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [3 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::main(java.lang.String[]) [4 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::getChainOfLoggers() [2 time(s)]

behavioral.command.Command:
behavioral.command.CommandManager:
	---> behavioral.chain_of_responsibility.ILogger::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::history() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [1 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [2 time(s)]

	---> behavioral.chain_of_responsibility.ILogger::redo() [3 time(s)]

	---> behavioral.command.Command::redo() [4 time(s)]

	---> behavioral.command.Command::redo() [5 time(s)]

	---> behavioral.command.Command::redo() [6 time(s)]

	---> behavioral.command.Command::redo() [7 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [1 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [2 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [3 time(s)]

	---> behavioral.command.Command::execute(behavioral.command.Command) [4 time(s)]

	---> behavioral.command.Command::undo() [1 time(s)]

	---> behavioral.command.Command::undo() [2 time(s)]

	---> behavioral.command.Command::undo() [3 time(s)]

	---> behavioral.command.Command::undo() [4 time(s)]

	---> behavioral.command.Command::undo() [5 time(s)]

	---> behavioral.command.Command::undo() [6 time(s)]

	---> behavioral.command.Command::undo() [7 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.command.Command::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

behavioral.command.SwitchChannelCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::execute() [2 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

	---> behavioral.command.TV::undo() [2 time(s)]

behavioral.command.SwitchOffCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.SwitchOnCommand:
	---> behavioral.command.TV::getName() [1 time(s)]

	---> behavioral.command.TV::execute() [1 time(s)]

	---> behavioral.command.TV::undo() [1 time(s)]

behavioral.command.TV:
behavioral.command.Test:
	---> behavioral.command.TV::main(java.lang.String[]) [1 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [2 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [3 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [4 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [5 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [6 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [7 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [8 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [9 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [10 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [11 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [12 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [13 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [14 time(s)]

	---> behavioral.command.CommandManager::main(java.lang.String[]) [15 time(s)]

behavioral.interpreter.AndExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.BinaryExpression:
behavioral.interpreter.Expression:
behavioral.interpreter.OrExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.TerminalExpression:
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [1 time(s)]

behavioral.interpreter.Test:
	---> behavioral.interpreter.Expression::main(java.lang.String[]) [1 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [2 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [3 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [4 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [5 time(s)]

	---> behavioral.interpreter.Expression::main(java.lang.String[]) [6 time(s)]

	---> behavioral.interpreter.Expression::getIsMarriedWomanExpression() [1 time(s)]

behavioral.iterator.DiscJockey:
	---> structural.composite.Song::displaySongs() [1 time(s)]

behavioral.iterator.Song:
	---> structural.composite.Song::toString() [1 time(s)]

	---> structural.composite.Song::toString() [2 time(s)]

	---> structural.composite.Song::toString() [3 time(s)]

	---> structural.composite.Song::toString() [4 time(s)]

behavioral.iterator.SongAggregate:
behavioral.iterator.SongArray:
	---> structural.composite.Song::iterator() [1 time(s)]

	---> structural.composite.Song::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::iterator() [3 time(s)]

	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

behavioral.iterator.SongHashtable:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::iterator() [2 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.SongList:
	---> behavioral.iterator.SongArray::iterator() [1 time(s)]

	---> behavioral.iterator.SongArray::addSong(java.lang.String,java.lang.String,int) [1 time(s)]

behavioral.iterator.Test:
	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [1 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [2 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [3 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [4 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [5 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [6 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [7 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [8 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [9 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [10 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [11 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [12 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [13 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [14 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [15 time(s)]

	---> behavioral.iterator.SongAggregate::main(java.lang.String[]) [16 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [17 time(s)]

	---> behavioral.iterator.DiscJockey::main(java.lang.String[]) [18 time(s)]

behavioral.mediator.ChatRoom:
	---> behavioral.iterator.DiscJockey::addUser(behavioral.mediator.User) [1 time(s)]

	---> behavioral.mediator.User::addUser(behavioral.mediator.User) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.User::sendMessage(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.ChatUser:
	---> behavioral.mediator.User::receive(java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::receive(java.lang.String) [2 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [1 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [2 time(s)]

	---> behavioral.mediator.IChatRoom::send(java.lang.String,java.lang.String) [3 time(s)]

	---> behavioral.mediator.ChatUser::send(java.lang.String,java.lang.String) [4 time(s)]

behavioral.mediator.IChatRoom:
behavioral.mediator.Test:
	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [1 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [2 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [3 time(s)]

	---> behavioral.mediator.IChatRoom::main(java.lang.String[]) [4 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [5 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [6 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [7 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [8 time(s)]

	---> behavioral.mediator.User::main(java.lang.String[]) [9 time(s)]

behavioral.mediator.User:
behavioral.memento.CareTaker:
	---> behavioral.mediator.User::addMemento(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.mediator.User::get(int) [1 time(s)]

behavioral.memento.Memento:
behavioral.memento.Originator:
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [1 time(s)]

	---> behavioral.memento.Memento::restoreState(behavioral.memento.Memento) [2 time(s)]

behavioral.memento.Test:
	---> behavioral.memento.Originator::main(java.lang.String[]) [1 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [2 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [3 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [4 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [5 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [6 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [7 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [8 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [9 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [10 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [11 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [12 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [13 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [14 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [15 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [16 time(s)]

	---> behavioral.memento.CareTaker::main(java.lang.String[]) [17 time(s)]

	---> behavioral.memento.Originator::main(java.lang.String[]) [18 time(s)]

behavioral.observer.Observer:
behavioral.observer.StockGrabber:
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [1 time(s)]

	---> behavioral.observer.Observer::notifyObserver() [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [1 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [2 time(s)]

	---> behavioral.observer.Observer::unregister(behavioral.observer.Observer) [3 time(s)]

	---> behavioral.observer.StockGrabber::setAppleStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::setIBMStock(double) [1 time(s)]

	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [1 time(s)]

behavioral.observer.StockObserver:
	---> behavioral.observer.StockGrabber::update() [1 time(s)]

	---> behavioral.observer.StockGrabber::update() [2 time(s)]

	---> behavioral.observer.StockGrabber::update() [3 time(s)]

	---> behavioral.observer.StockObserver::update() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [1 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [2 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [3 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [4 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [5 time(s)]

	---> behavioral.observer.StockObserver::displayPrices() [6 time(s)]

behavioral.observer.Subject:
behavioral.observer.Test:
	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [1 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [2 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [3 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [4 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [5 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [6 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [7 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [8 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [9 time(s)]

	---> behavioral.observer.StockGrabber::main(java.lang.String[]) [10 time(s)]

behavioral.state.ATMMachine:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMState::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMState::insertPin(int) [1 time(s)]

behavioral.state.ATMState:
behavioral.state.CorrectPin:
	---> behavioral.state.ATMState::insertCard() [1 time(s)]

	---> behavioral.state.ATMState::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [4 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [5 time(s)]

	---> behavioral.state.CorrectPin::requestCash(int) [6 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [7 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [8 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [9 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

behavioral.state.HasCard:
	---> behavioral.state.ATMMachine::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [2 time(s)]

	---> behavioral.state.ATMMachine::ejectCard() [3 time(s)]

	---> behavioral.state.ATMMachine::requestCash(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [1 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [2 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [3 time(s)]

	---> behavioral.state.ATMMachine::insertPin(int) [4 time(s)]

	---> behavioral.state.HasCard::insertPin(int) [5 time(s)]

behavioral.state.IATMState:
behavioral.state.NoCard:
	---> behavioral.state.HasCard::insertCard() [1 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [2 time(s)]

	---> behavioral.state.ATMMachine::insertCard() [3 time(s)]

	---> behavioral.state.NoCard::ejectCard() [1 time(s)]

	---> behavioral.state.NoCard::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCard::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCard::defaultMessage() [1 time(s)]

behavioral.state.NoCash:
	---> behavioral.state.NoCash::insertCard() [1 time(s)]

	---> behavioral.state.NoCash::ejectCard() [1 time(s)]

	---> behavioral.state.NoCash::requestCash(int) [1 time(s)]

	---> behavioral.state.NoCash::insertPin(int) [1 time(s)]

	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.Test:
	---> behavioral.state.ATMMachine::main(java.lang.String[]) [1 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [2 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [3 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [4 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [5 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [6 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [7 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [8 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [9 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [10 time(s)]

	---> behavioral.state.ATMMachine::main(java.lang.String[]) [11 time(s)]

behavioral.strategy.Add:
behavioral.strategy.ArithmeticOperation:
behavioral.strategy.Calculator:
	---> behavioral.strategy.ArithmeticOperation::computeOperation(int,int) [1 time(s)]

behavioral.strategy.Divide:
behavioral.strategy.Modulo:
behavioral.strategy.Multiply:
behavioral.strategy.Subtract:
behavioral.strategy.Test:
	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::computeAndDisplay(behavioral.strategy.ArithmeticOperation,java.lang.String,int,int) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [1 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [2 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [3 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [4 time(s)]

	---> behavioral.strategy.ArithmeticOperation::main(java.lang.String[]) [5 time(s)]

behavioral.template_method.Basketball:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Football:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

	---> behavioral.template_method.Game::start() [1 time(s)]

	---> behavioral.template_method.Game::initialize() [1 time(s)]

	---> behavioral.template_method.Game::end() [1 time(s)]

behavioral.template_method.Game:
	---> behavioral.template_method.Game::play() [1 time(s)]

	---> behavioral.template_method.Game::play() [2 time(s)]

	---> behavioral.template_method.Game::play() [3 time(s)]

behavioral.template_method.Test:
	---> behavioral.template_method.Game::main(java.lang.String[]) [1 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [2 time(s)]

	---> behavioral.template_method.Game::main(java.lang.String[]) [3 time(s)]

behavioral.visitor.Liquor:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Necessity:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Product:
behavioral.visitor.TaxHolidayVisitor:
	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.Visitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.TaxVisitor:
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [2 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [3 time(s)]

	---> behavioral.visitor.Product::computeTax(behavioral.visitor.Product) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Test:
	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [1 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [3 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [4 time(s)]

	---> behavioral.visitor.TaxVisitor::main(java.lang.String[]) [5 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [1 time(s)]

	---> behavioral.visitor.Product::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [2 time(s)]

	---> behavioral.visitor.TaxVisitor::computeTaxForProducts(java.util.List,behavioral.visitor.TaxVisitor) [3 time(s)]

behavioral.visitor.Tobacco:
	---> behavioral.visitor.Visitor::accept(behavioral.visitor.Visitor) [1 time(s)]

behavioral.visitor.Visitable:
behavioral.visitor.Visitor:
creational.abstract_factory.AbstractShapeFactory:
	---> behavioral.visitor.Visitor::getRegistryKey(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [1 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [2 time(s)]

	---> behavioral.visitor.Visitor::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.Rectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedRectangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.RoundedShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.RoundedShapeType:
creational.abstract_factory.RoundedTriangle:
	---> creational.singleton.SingletonRegistry::draw() [1 time(s)]

creational.abstract_factory.Shape:
creational.abstract_factory.ShapeFactoryType:
creational.abstract_factory.ShapeProducer:
	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [1 time(s)]

	---> creational.singleton.SingletonRegistry::createFactory(creational.abstract_factory.ShapeFactoryType) [2 time(s)]

creational.abstract_factory.ShapeType:
creational.abstract_factory.StandardShapeFactory:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.abstract_factory.StandardShapeType:
creational.abstract_factory.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [2 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [3 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [5 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [6 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.abstract_factory.AbstractShapeFactory::main(java.lang.String[]) [9 time(s)]

	---> creational.abstract_factory.Shape::main(java.lang.String[]) [10 time(s)]

creational.abstract_factory.Triangle:
	---> creational.abstract_factory.Shape::draw() [1 time(s)]

creational.builder.IRobot:
creational.builder.IRobotBuilder:
creational.builder.OldRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Robot:
	---> creational.builder.Robot::toString() [1 time(s)]

	---> creational.builder.Robot::toString() [2 time(s)]

	---> creational.builder.Robot::toString() [3 time(s)]

	---> creational.builder.Robot::toString() [4 time(s)]

	---> creational.builder.Robot::toString() [5 time(s)]

creational.builder.RobotBuilder:
creational.builder.RobotEngineer:
	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [1 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [2 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [3 time(s)]

	---> creational.builder.IRobotBuilder::constructRobot() [4 time(s)]

creational.builder.SophisticatedRobotBuilder:
	---> creational.builder.Robot::buildLegs() [1 time(s)]

	---> creational.builder.Robot::buildArms() [1 time(s)]

	---> creational.builder.Robot::buildHead() [1 time(s)]

	---> creational.builder.Robot::buildTorso() [1 time(s)]

creational.builder.Test:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [4 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [5 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [6 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [7 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [8 time(s)]

creational.factory.BigUFOEnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShip:
	---> creational.builder.RobotEngineer::followHeroShip() [1 time(s)]

	---> creational.builder.RobotEngineer::enemyShipShoots() [1 time(s)]

	---> creational.builder.RobotEngineer::displayEnemyShip() [1 time(s)]

creational.factory.EnemyShipFactory:
creational.factory.EnemyShipTesting:
	---> creational.builder.RobotEngineer::main(java.lang.String[]) [1 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [2 time(s)]

	---> creational.builder.RobotEngineer::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [7 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.RocketEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.factory.Test:
	---> creational.factory.EnemyShip::main(java.lang.String[]) [1 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [2 time(s)]

	---> creational.factory.EnemyShip::main(java.lang.String[]) [3 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [4 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [5 time(s)]

	---> creational.factory.EnemyShipFactory::main(java.lang.String[]) [6 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [2 time(s)]

	---> creational.factory.EnemyShip::doStuffEnemy(creational.factory.EnemyShip) [3 time(s)]

creational.factory.UFOEnemyShip:
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]

	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]

creational.prototype.Circle:
	---> creational.factory.EnemyShip::draw() [1 time(s)]

	---> creational.factory.EnemyShip::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Position:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Position::toString() [1 time(s)]

creational.prototype.Rectangle:
	---> creational.prototype.Position::draw() [1 time(s)]

	---> creational.prototype.Position::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.Shape:
	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.prototype.ShapeCache:
	---> creational.prototype.Shape::getShape(java.lang.String) [1 time(s)]

	---> creational.prototype.Shape::getShape(java.lang.String) [2 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [1 time(s)]

	---> creational.prototype.Shape::displayCacheContent() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [1 time(s)]

	---> creational.prototype.Circle::loadCache() [2 time(s)]

	---> creational.prototype.Circle::loadCache() [3 time(s)]

	---> creational.prototype.Circle::loadCache() [4 time(s)]

	---> creational.prototype.Triangle::loadCache() [5 time(s)]

	---> creational.prototype.Triangle::loadCache() [6 time(s)]

	---> creational.prototype.Triangle::loadCache() [7 time(s)]

	---> creational.prototype.Triangle::loadCache() [8 time(s)]

	---> creational.prototype.Rectangle::loadCache() [9 time(s)]

	---> creational.prototype.Rectangle::loadCache() [10 time(s)]

	---> creational.prototype.Rectangle::loadCache() [11 time(s)]

	---> creational.prototype.Rectangle::loadCache() [12 time(s)]

creational.prototype.Test:
	---> creational.prototype.Rectangle::main(java.lang.String[]) [1 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [2 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [3 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [4 time(s)]

	---> creational.prototype.Rectangle::main(java.lang.String[]) [5 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [6 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [7 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [8 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [9 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [10 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [11 time(s)]

	---> creational.prototype.Position::main(java.lang.String[]) [12 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [13 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [14 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [15 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [16 time(s)]

	---> creational.prototype.Shape::main(java.lang.String[]) [17 time(s)]

creational.prototype.Triangle:
	---> creational.prototype.Shape::draw() [1 time(s)]

	---> creational.prototype.Shape::clone() [1 time(s)]

	---> creational.prototype.Shape::clone() [2 time(s)]

	---> creational.prototype.Position::clone() [3 time(s)]

	---> creational.prototype.Shape::clone() [4 time(s)]

	---> creational.prototype.Shape::clone() [5 time(s)]

	---> creational.prototype.Shape::toString() [1 time(s)]

creational.singleton.ExtendedSingleton:
	---> creational.prototype.Shape::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [1 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [2 time(s)]

	---> creational.prototype.Shape::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.ExtendedSingleton2:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.Singleton:
	---> creational.singleton.SingletonRegistry::getRegistryKey(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [1 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [2 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [3 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [4 time(s)]

	---> creational.singleton.SingletonRegistry::getInstance(java.lang.Class) [5 time(s)]

creational.singleton.SingletonRegistry:
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [1 time(s)]

	---> creational.singleton.SingletonRegistry::register(java.lang.String,creational.singleton.Singleton) [2 time(s)]

creational.singleton.Test:
	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [1 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [2 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [3 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [4 time(s)]

	---> creational.singleton.SingletonRegistry::main(java.lang.String[]) [5 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [6 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [7 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [8 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [9 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [10 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [11 time(s)]

	---> creational.singleton.ExtendedSingleton::main(java.lang.String[]) [12 time(s)]

	---> creational.singleton.ExtendedSingleton2::main(java.lang.String[]) [13 time(s)]

structural.adapter.EnemyAttacker:
structural.adapter.EnemyRobot:
	---> creational.singleton.ExtendedSingleton2::smashwithHands() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::smashwithHands() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [1 time(s)]

	---> creational.singleton.ExtendedSingleton2::walkForward() [2 time(s)]

	---> creational.singleton.ExtendedSingleton2::reactToHuman(java.lang.String) [1 time(s)]

structural.adapter.EnemyRobotAdapter:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.EnemyTank:
	---> structural.adapter.EnemyRobot::driveForward() [1 time(s)]

	---> structural.adapter.EnemyRobot::driveForward() [2 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [1 time(s)]

	---> structural.adapter.EnemyRobot::fireWeapon() [2 time(s)]

	---> structural.adapter.EnemyRobot::assignDriver(java.lang.String) [1 time(s)]

structural.adapter.Test:
	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.adapter.TestEnemyAttackers:
	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [1 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [2 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [3 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [4 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [5 time(s)]

	---> structural.adapter.EnemyRobot::main(java.lang.String[]) [6 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [7 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [8 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [9 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [10 time(s)]

	---> structural.adapter.EnemyTank::main(java.lang.String[]) [11 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [12 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [13 time(s)]

	---> structural.adapter.EnemyAttacker::main(java.lang.String[]) [14 time(s)]

structural.bridge.AdvancedRemote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::mute() [1 time(s)]

	---> structural.bridge.Device::mute() [2 time(s)]

	---> structural.bridge.Device::mute() [3 time(s)]

	---> structural.bridge.Device::mute() [4 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.Device:
structural.bridge.Radio:
structural.bridge.Remote:
	---> structural.bridge.Device::togglePower() [1 time(s)]

	---> structural.bridge.Device::togglePower() [2 time(s)]

	---> structural.bridge.Device::togglePower() [3 time(s)]

	---> structural.bridge.Device::togglePower() [4 time(s)]

	---> structural.bridge.Device::togglePower() [5 time(s)]

	---> structural.bridge.Device::togglePower() [6 time(s)]

	---> structural.bridge.Device::channelDown() [1 time(s)]

	---> structural.bridge.Device::channelDown() [2 time(s)]

	---> structural.bridge.Device::channelDown() [3 time(s)]

	---> structural.bridge.Device::channelDown() [4 time(s)]

	---> structural.bridge.Device::volumeDown() [1 time(s)]

	---> structural.bridge.Device::volumeDown() [2 time(s)]

	---> structural.bridge.Device::volumeDown() [3 time(s)]

	---> structural.bridge.Device::volumeDown() [4 time(s)]

	---> structural.bridge.Device::volumeUp() [1 time(s)]

	---> structural.bridge.Device::volumeUp() [2 time(s)]

	---> structural.bridge.Device::volumeUp() [3 time(s)]

	---> structural.bridge.Device::volumeUp() [4 time(s)]

	---> structural.bridge.Device::channelUp() [1 time(s)]

	---> structural.bridge.Device::channelUp() [2 time(s)]

	---> structural.bridge.Device::channelUp() [3 time(s)]

	---> structural.bridge.Device::channelUp() [4 time(s)]

structural.bridge.TV:
structural.bridge.Test:
	---> structural.bridge.Device::main(java.lang.String[]) [1 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [2 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [3 time(s)]

	---> structural.bridge.Device::main(java.lang.String[]) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [1 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [3 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [4 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [5 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [6 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [7 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [8 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [9 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [10 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [11 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [12 time(s)]

	---> structural.bridge.Remote::ordinaryRemoteTest(structural.bridge.Remote) [13 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [1 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [3 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [4 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [5 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [6 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [7 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [8 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [9 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [10 time(s)]

	---> structural.bridge.AdvancedRemote::advancedRemoteTest(structural.bridge.AdvancedRemote) [11 time(s)]

structural.composite.DiscJockey:
	---> structural.composite.SongComponent::displaySongList() [1 time(s)]

structural.composite.Song:
	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.Song::getInfo() [2 time(s)]

	---> structural.composite.Song::getInfo() [3 time(s)]

	---> structural.composite.Song::getInfo() [4 time(s)]

	---> structural.composite.Song::getInfo() [5 time(s)]

	---> structural.composite.Song::getInfo() [6 time(s)]

	---> structural.composite.Song::getInfo() [7 time(s)]

	---> structural.composite.Song::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongComponent:
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongGroup:
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getInfo() [1 time(s)]

	---> structural.composite.SongGroup::getInfo() [2 time(s)]

	---> structural.composite.SongGroup::getInfo() [3 time(s)]

	---> structural.composite.SongGroup::getInfo() [4 time(s)]

	---> structural.composite.SongGroup::getInfo() [5 time(s)]

	---> structural.composite.SongGroup::getInfo() [6 time(s)]

	---> structural.composite.SongGroup::getInfo() [7 time(s)]

	---> structural.composite.SongGroup::getInfo() [8 time(s)]

	---> structural.composite.SongGroup::getInfo() [9 time(s)]

	---> structural.composite.SongGroup::getInfo() [10 time(s)]

	---> structural.composite.SongGroup::getInfo() [11 time(s)]

	---> structural.composite.SongGroup::getInfo() [12 time(s)]

	---> structural.composite.SongGroup::getInfo() [13 time(s)]

	---> structural.composite.SongComponent::getInfo() [14 time(s)]

	---> structural.composite.SongComponent::getInfo() [15 time(s)]

	---> structural.composite.SongComponent::getInfo() [16 time(s)]

	---> structural.composite.SongComponent::getInfo() [17 time(s)]

	---> structural.composite.SongComponent::remove(structural.composite.SongComponent) [1 time(s)]

	---> structural.composite.SongComponent::getComponent(int) [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

	---> structural.composite.SongComponent::displayInfo() [2 time(s)]

structural.composite.SongListGenerator:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.composite.Test:
	---> structural.composite.SongComponent::main(java.lang.String[]) [1 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [2 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [3 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [4 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [5 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [6 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [7 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [8 time(s)]

	---> structural.composite.SongComponent::main(java.lang.String[]) [9 time(s)]

	---> structural.composite.DiscJockey::main(java.lang.String[]) [10 time(s)]

structural.decorator.Beverage:
structural.decorator.BeverageDecorator:
structural.decorator.CaramelDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Espresso:
structural.decorator.IBeverage:
structural.decorator.SugarDecorator:
	---> structural.decorator.Beverage::description() [1 time(s)]

	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Tea:
structural.decorator.Test:
	---> structural.decorator.Beverage::main(java.lang.String[]) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [1 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [2 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [3 time(s)]

	---> structural.decorator.Beverage::displayOrder(structural.decorator.Beverage) [4 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [1 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [2 time(s)]

	---> structural.decorator.Beverage::beveragesMenu() [3 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectBeverage(java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [1 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [2 time(s)]

	---> structural.decorator.Beverage::selectAdditionalIngredients(structural.decorator.Beverage,java.util.Scanner) [3 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [1 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [2 time(s)]

	---> structural.decorator.Beverage::orderBeverage() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [1 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [2 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [3 time(s)]

	---> structural.decorator.Beverage::additionalIngredientsMenu() [4 time(s)]

structural.facade.BankAccount:
structural.facade.BankAccountBalanceSystem:
	---> structural.facade.BankAccount::canWithdraw(double) [1 time(s)]

	---> structural.facade.BankAccount::getAccountBalance() [1 time(s)]

	---> structural.facade.BankAccount::deposit(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::deposit(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [4 time(s)]

	---> structural.facade.BankAccount::withdraw(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [6 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [7 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [8 time(s)]

structural.facade.BankAccountFacade:
	---> structural.facade.BankAccountNumberChecker::depositCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::depositCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::depositCash(double) [5 time(s)]

	---> structural.facade.BankAccountNumberChecker::withdrawCash(double) [1 time(s)]

	---> structural.facade.BankAccountSecurityCodeChecker::withdrawCash(double) [2 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [3 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [4 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [5 time(s)]

	---> structural.facade.BankAccountBalanceSystem::withdrawCash(double) [6 time(s)]

structural.facade.BankAccountNumberChecker:
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountNumber() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker:
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]

	---> structural.facade.BankAccount::getAccountSecurityCode() [1 time(s)]

structural.facade.BankAccountWelcomeWindow:
	---> structural.facade.BankAccount::setWelcomeMessage() [1 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [2 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [3 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [4 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [5 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [6 time(s)]

	---> structural.facade.BankAccount::setWelcomeMessage() [7 time(s)]

structural.facade.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [3 time(s)]

structural.flyweight.Circle:
	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [1 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [2 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [3 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [4 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [5 time(s)]

	---> structural.facade.BankAccountFacade::draw(structural.flyweight.Position) [6 time(s)]

structural.flyweight.Position:
structural.flyweight.Shape:
structural.flyweight.ShapeFactory:
	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [1 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [2 time(s)]

	---> structural.facade.BankAccountFacade::getCircle(java.lang.String) [3 time(s)]

structural.flyweight.Test:
	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [1 time(s)]

	---> structural.facade.BankAccountFacade::main(java.lang.String[]) [2 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [3 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [4 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [5 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [6 time(s)]

	---> structural.flyweight.Circle::main(java.lang.String[]) [7 time(s)]

	---> structural.flyweight.Circle::getRandomRadius() [1 time(s)]

	---> structural.flyweight.Circle::getRandomX() [1 time(s)]

	---> structural.flyweight.Circle::getRandomY() [1 time(s)]

	---> structural.flyweight.Circle::getRandomColor() [1 time(s)]

structural.proxy.Internet:
structural.proxy.ProxyInternet:
	---> structural.flyweight.Circle::connectTo(java.lang.String) [1 time(s)]

	---> structural.flyweight.Circle::connectTo(java.lang.String) [2 time(s)]

	---> structural.proxy.Internet::connectTo(java.lang.String) [3 time(s)]

structural.proxy.RealInternet:
	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.Test:
	---> structural.proxy.Internet::main(java.lang.String[]) [1 time(s)]

	---> structural.proxy.Internet::main(java.lang.String[]) [2 time(s)]


