Static Call Graph
Classes: 131.
Methods: 387.
Invocations: 411.
behavioral.chain_of_responsibility.ConsoleLogger::write(behavioral.chain_of_responsibility.LogRequest):
	---> behavioral.chain_of_responsibility.LogRequest::getMessage() [1 time(s)]

behavioral.chain_of_responsibility.ErrorLogger::write(behavioral.chain_of_responsibility.LogRequest):
	---> behavioral.chain_of_responsibility.LogRequest::getMessage() [1 time(s)]

behavioral.chain_of_responsibility.FileLogger::write(behavioral.chain_of_responsibility.LogRequest):
	---> behavioral.chain_of_responsibility.LogRequest::getMessage() [2 time(s)]

behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest):
	---> behavioral.chain_of_responsibility.LogRequest::getLevel() [1 time(s)]
	---> behavioral.chain_of_responsibility.LogRequestLevel::value() [2 time(s)]
	---> behavioral.chain_of_responsibility.Logger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

behavioral.chain_of_responsibility.Test::getChainOfLoggers():
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [2 time(s)]

behavioral.chain_of_responsibility.Test::main(java.lang.String[]):
	---> behavioral.chain_of_responsibility.Test::getChainOfLoggers() [1 time(s)]
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

behavioral.command.CommandManager::execute(behavioral.command.Command):
	---> behavioral.command.Command::execute() [1 time(s)]
	---> behavioral.command.Command::getName() [1 time(s)]

behavioral.command.CommandManager::redo():
	---> behavioral.command.Command::execute() [1 time(s)]
	---> behavioral.command.Command::getName() [1 time(s)]

behavioral.command.CommandManager::undo():
	---> behavioral.command.Command::getName() [1 time(s)]
	---> behavioral.command.Command::undo() [1 time(s)]

behavioral.command.SwitchChannelCommand::execute():
	---> behavioral.command.TV::getChannel() [1 time(s)]
	---> behavioral.command.TV::switchChannel(int) [1 time(s)]

behavioral.command.SwitchChannelCommand::getName():
	---> behavioral.command.TV::getChannel() [1 time(s)]

behavioral.command.SwitchChannelCommand::undo():
	---> behavioral.command.TV::getChannel() [1 time(s)]
	---> behavioral.command.TV::switchChannel(int) [1 time(s)]

behavioral.command.SwitchOffCommand::execute():
	---> behavioral.command.TV::switchOff() [1 time(s)]

behavioral.command.SwitchOffCommand::getName():
	---> behavioral.command.TV::isOn() [1 time(s)]

behavioral.command.SwitchOffCommand::undo():
	---> behavioral.command.TV::switchOn() [1 time(s)]

behavioral.command.SwitchOnCommand::execute():
	---> behavioral.command.TV::switchOn() [1 time(s)]

behavioral.command.SwitchOnCommand::getName():
	---> behavioral.command.TV::isOn() [1 time(s)]

behavioral.command.SwitchOnCommand::undo():
	---> behavioral.command.TV::switchOff() [1 time(s)]

behavioral.command.Test::main(java.lang.String[]):
	---> creational.singleton.Singleton::getInstance(java.lang.Class<? extends creational.singleton.Singleton>) [1 time(s)]
	---> behavioral.command.CommandManager::undo() [4 time(s)]
	---> behavioral.command.CommandManager::execute(behavioral.command.Command) [6 time(s)]
	---> behavioral.command.CommandManager::redo() [3 time(s)]
	---> behavioral.command.CommandManager::history() [1 time(s)]

behavioral.interpreter.AndExpression::interpret(java.lang.String):
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.OrExpression::interpret(java.lang.String):
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.Test::getIsMarriedWomanExpression():
	---> behavioral.interpreter.Test::getIsFemaleExpression() [1 time(s)]

behavioral.interpreter.Test::main(java.lang.String[]):
	---> behavioral.interpreter.Test::getIsFemaleExpression() [1 time(s)]
	---> behavioral.interpreter.Test::getIsMarriedWomanExpression() [1 time(s)]
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.iterator.DiscJockey::displaySongs():
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

behavioral.iterator.SongArray::getFilledArray():
	---> behavioral.iterator.SongArray::length() [1 time(s)]

behavioral.iterator.SongArray::iterator():
	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

behavioral.iterator.Test::main(java.lang.String[]):
	---> behavioral.iterator.SongAggregate::addSong(java.lang.String, java.lang.String, int) [9 time(s)]
	---> behavioral.iterator.DiscJockey::displaySongs() [3 time(s)]

behavioral.mediator.ChatRoom::addUser(behavioral.mediator.User):
	---> behavioral.mediator.User::getId() [1 time(s)]

behavioral.mediator.ChatRoom::sendMessage(java.lang.String, java.lang.String):
	---> behavioral.mediator.User::receive(java.lang.String) [1 time(s)]

behavioral.mediator.ChatUser::receive(java.lang.String):
	---> behavioral.mediator.User::getName() [1 time(s)]

behavioral.mediator.ChatUser::send(java.lang.String, java.lang.String):
	---> behavioral.mediator.User::getRoom() [1 time(s)]
	---> behavioral.mediator.User::getName() [1 time(s)]
	---> behavioral.mediator.IChatRoom::sendMessage(java.lang.String, java.lang.String) [1 time(s)]

behavioral.mediator.Test::main(java.lang.String[]):
	---> behavioral.mediator.User::getId() [2 time(s)]
	---> behavioral.mediator.User::send(java.lang.String, java.lang.String) [2 time(s)]
	---> behavioral.mediator.User::getName() [1 time(s)]
	---> behavioral.mediator.IChatRoom::addUser(behavioral.mediator.User) [4 time(s)]

behavioral.memento.Originator::restoreState(behavioral.memento.Memento):
	---> behavioral.memento.Memento::getState() [1 time(s)]
	---> behavioral.memento.Originator::setState(java.lang.String) [1 time(s)]

behavioral.memento.Test::main(java.lang.String[]):
	---> behavioral.memento.Originator::getState() [3 time(s)]
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [2 time(s)]
	---> behavioral.memento.CareTaker::addMemento(behavioral.memento.Memento) [2 time(s)]
	---> behavioral.memento.Originator::setState(java.lang.String) [4 time(s)]
	---> behavioral.memento.Originator::externalizeState() [2 time(s)]
	---> behavioral.memento.CareTaker::get(int) [2 time(s)]

behavioral.observer.StockGrabber::notifyObserver():
	---> behavioral.observer.Observer::update() [1 time(s)]

behavioral.observer.StockGrabber::setAppleStock(double):
	---> behavioral.observer.StockGrabber::notifyObserver() [1 time(s)]

behavioral.observer.StockGrabber::setGoogleStock(double):
	---> behavioral.observer.StockGrabber::notifyObserver() [1 time(s)]

behavioral.observer.StockGrabber::setIBMStock(double):
	---> behavioral.observer.StockGrabber::notifyObserver() [1 time(s)]

behavioral.observer.StockObserver::StockObserver(behavioral.observer.StockGrabber):
	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [1 time(s)]

behavioral.observer.StockObserver::update():
	---> behavioral.observer.StockGrabber::getIBMStock() [1 time(s)]
	---> behavioral.observer.StockGrabber::getAppleStock() [1 time(s)]
	---> behavioral.observer.StockGrabber::getGoogleStock() [1 time(s)]
	---> behavioral.observer.StockObserver::displayPrices() [1 time(s)]

behavioral.observer.Test::main(java.lang.String[]):
	---> behavioral.observer.StockGrabber::unregister(behavioral.observer.Observer) [1 time(s)]
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [3 time(s)]
	---> behavioral.observer.StockGrabber::setIBMStock(double) [3 time(s)]
	---> behavioral.observer.StockGrabber::setAppleStock(double) [3 time(s)]

behavioral.state.ATMMachine::ejectCard():
	---> behavioral.state.IATMState::ejectCard() [1 time(s)]

behavioral.state.ATMMachine::insertCard():
	---> behavioral.state.IATMState::insertCard() [1 time(s)]

behavioral.state.ATMMachine::insertPin(int):
	---> behavioral.state.IATMState::insertPin(int) [1 time(s)]

behavioral.state.ATMMachine::requestCash(int):
	---> behavioral.state.IATMState::requestCash(int) [1 time(s)]

behavioral.state.CorrectPin::ejectCard():
	---> behavioral.state.ATMMachine::getNoCardState() [1 time(s)]
	---> behavioral.state.ATMMachine::setATMState(behavioral.state.ATMState) [1 time(s)]

behavioral.state.CorrectPin::requestCash(int):
	---> behavioral.state.ATMMachine::getCashInMachine() [3 time(s)]
	---> behavioral.state.ATMMachine::getNoCashState() [1 time(s)]
	---> behavioral.state.ATMMachine::setCashInMachine(int) [1 time(s)]
	---> behavioral.state.ATMMachine::setATMState(behavioral.state.ATMState) [1 time(s)]
	---> behavioral.state.CorrectPin::ejectCard() [1 time(s)]

behavioral.state.HasCard::ejectCard():
	---> behavioral.state.ATMMachine::getNoCardState() [1 time(s)]
	---> behavioral.state.ATMMachine::setATMState(behavioral.state.ATMState) [1 time(s)]

behavioral.state.HasCard::insertPin(int):
	---> behavioral.state.HasCard::ejectCard() [1 time(s)]
	---> behavioral.state.ATMMachine::getCorrectPinState() [1 time(s)]
	---> behavioral.state.ATMMachine::setATMState(behavioral.state.ATMState) [1 time(s)]

behavioral.state.NoCard::ejectCard():
	---> behavioral.state.NoCard::defaultMessage() [1 time(s)]

behavioral.state.NoCard::insertCard():
	---> behavioral.state.ATMMachine::getHasCardState() [1 time(s)]
	---> behavioral.state.ATMMachine::setATMState(behavioral.state.ATMState) [1 time(s)]

behavioral.state.NoCard::insertPin(int):
	---> behavioral.state.NoCard::defaultMessage() [1 time(s)]

behavioral.state.NoCard::requestCash(int):
	---> behavioral.state.NoCard::defaultMessage() [1 time(s)]

behavioral.state.NoCash::ejectCard():
	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.NoCash::insertCard():
	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.NoCash::insertPin(int):
	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.NoCash::requestCash(int):
	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.Test::main(java.lang.String[]):
	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]
	---> behavioral.state.ATMMachine::insertCard() [5 time(s)]
	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]
	---> behavioral.state.ATMMachine::insertPin(int) [3 time(s)]

behavioral.strategy.Calculator::computeOperation(int, int):
	---> behavioral.strategy.ArithmeticOperation::execute(int, int) [1 time(s)]

behavioral.strategy.Test::computeAndDisplay(behavioral.strategy.ArithmeticOperation, java.lang.String, int, int):
	---> behavioral.strategy.Calculator::setOperation(behavioral.strategy.ArithmeticOperation) [1 time(s)]
	---> behavioral.strategy.Calculator::getResult() [1 time(s)]
	---> behavioral.strategy.Calculator::computeOperation(int, int) [1 time(s)]

behavioral.strategy.Test::main(java.lang.String[]):
	---> behavioral.strategy.Test::computeAndDisplay(behavioral.strategy.ArithmeticOperation, java.lang.String, int, int) [5 time(s)]

behavioral.template_method.Game::play():
	---> behavioral.template_method.Game::end() [1 time(s)]
	---> behavioral.template_method.Game::initialize() [1 time(s)]
	---> behavioral.template_method.Game::start() [1 time(s)]

behavioral.template_method.Test::main(java.lang.String[]):
	---> behavioral.template_method.Game::play() [2 time(s)]

behavioral.visitor.Liquor::accept(behavioral.visitor.Visitor):
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Liquor) [1 time(s)]

behavioral.visitor.Necessity::accept(behavioral.visitor.Visitor):
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Product::Product(java.lang.String, double):
	---> behavioral.visitor.Product::setName(java.lang.String) [1 time(s)]
	---> behavioral.visitor.Product::setPrice(double) [1 time(s)]

behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor):
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco):
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product):
	---> behavioral.visitor.Product::getPrice() [1 time(s)]

behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor):
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity):
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco):
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

behavioral.visitor.Test::computeTaxForProducts(java.util.List<behavioral.visitor.Product>, behavioral.visitor.TaxVisitor):
	---> behavioral.visitor.Visitable::accept(behavioral.visitor.Visitor) [1 time(s)]
	---> behavioral.visitor.TaxVisitor::getComputedTax() [1 time(s)]

behavioral.visitor.Test::main(java.lang.String[]):
	---> behavioral.visitor.Test::computeTaxForProducts(java.util.List<behavioral.visitor.Product>, behavioral.visitor.TaxVisitor) [2 time(s)]

behavioral.visitor.Tobacco::accept(behavioral.visitor.Visitor):
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

creational.abstract_factory.ShapeProducer::createFactory(creational.abstract_factory.ShapeFactoryType):
	---> creational.singleton.Singleton::getInstance(java.lang.Class<? extends creational.singleton.Singleton>) [2 time(s)]

creational.abstract_factory.Test::main(java.lang.String[]):
	---> creational.abstract_factory.ShapeProducer::createFactory(creational.abstract_factory.ShapeFactoryType) [2 time(s)]
	---> creational.abstract_factory.AbstractShapeFactory::createShape(creational.abstract_factory.ShapeType) [4 time(s)]
	---> creational.abstract_factory.Shape::draw() [4 time(s)]

creational.builder.OldRobotBuilder::buildArms():
	---> creational.builder.Robot::setArms(java.lang.String) [1 time(s)]

creational.builder.OldRobotBuilder::buildHead():
	---> creational.builder.Robot::setHead(java.lang.String) [1 time(s)]

creational.builder.OldRobotBuilder::buildLegs():
	---> creational.builder.Robot::setLegs(java.lang.String) [1 time(s)]

creational.builder.OldRobotBuilder::buildTorso():
	---> creational.builder.Robot::setTorso(java.lang.String) [1 time(s)]

creational.builder.RobotEngineer::RobotEngineer(creational.builder.IRobotBuilder):
	---> creational.builder.RobotEngineer::setRobotBuilder(creational.builder.IRobotBuilder) [1 time(s)]

creational.builder.RobotEngineer::constructRobot():
	---> creational.builder.IRobotBuilder::buildArms() [1 time(s)]
	---> creational.builder.IRobotBuilder::buildHead() [1 time(s)]
	---> creational.builder.IRobotBuilder::buildTorso() [1 time(s)]
	---> creational.builder.IRobotBuilder::buildLegs() [1 time(s)]

creational.builder.RobotEngineer::getRobot():
	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

creational.builder.SophisticatedRobotBuilder::buildArms():
	---> creational.builder.Robot::setArms(java.lang.String) [1 time(s)]

creational.builder.SophisticatedRobotBuilder::buildHead():
	---> creational.builder.Robot::setHead(java.lang.String) [1 time(s)]

creational.builder.SophisticatedRobotBuilder::buildLegs():
	---> creational.builder.Robot::setLegs(java.lang.String) [1 time(s)]

creational.builder.SophisticatedRobotBuilder::buildTorso():
	---> creational.builder.Robot::setTorso(java.lang.String) [1 time(s)]

creational.builder.Test::main(java.lang.String[]):
	---> creational.builder.RobotEngineer::getRobot() [2 time(s)]
	---> creational.builder.RobotEngineer::setRobotBuilder(creational.builder.IRobotBuilder) [1 time(s)]
	---> creational.builder.RobotEngineer::constructRobot() [2 time(s)]

creational.factory.EnemyShip::EnemyShip(java.lang.String, double):
	---> creational.factory.EnemyShip::setName(java.lang.String) [1 time(s)]
	---> creational.factory.EnemyShip::setAmtDamage(double) [1 time(s)]

creational.factory.EnemyShipTesting::doStuffEnemy(creational.factory.EnemyShip):
	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]
	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

creational.factory.EnemyShipTesting::main(java.lang.String[]):
	---> creational.factory.EnemyShipFactory::createEnemyShip(java.lang.String) [1 time(s)]
	---> creational.factory.EnemyShipTesting::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

creational.factory.Test::doStuffEnemy(creational.factory.EnemyShip):
	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]
	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

creational.factory.Test::main(java.lang.String[]):
	---> creational.factory.EnemyShipFactory::createEnemyShip(java.lang.String) [1 time(s)]
	---> creational.factory.Test::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

creational.prototype.Shape::clone():
	---> creational.prototype.Position::clone() [1 time(s)]
	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [1 time(s)]
	---> creational.prototype.Shape::getPosition() [1 time(s)]

creational.prototype.ShapeCache::getShape(java.lang.String):
	---> creational.prototype.Shape::clone() [1 time(s)]

creational.prototype.ShapeCache::loadCache():
	---> creational.prototype.Shape::setId(java.lang.String) [3 time(s)]
	---> creational.prototype.Shape::getId() [3 time(s)]
	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [3 time(s)]

creational.prototype.Test::main(java.lang.String[]):
	---> creational.prototype.ShapeCache::displayCacheContent() [1 time(s)]
	---> creational.prototype.ShapeCache::loadCache() [1 time(s)]
	---> creational.prototype.Position::setX(double) [2 time(s)]
	---> creational.prototype.Position::setY(double) [1 time(s)]
	---> creational.prototype.Shape::getPosition() [3 time(s)]
	---> creational.prototype.ShapeCache::getShape(java.lang.String) [3 time(s)]

creational.singleton.Singleton::Singleton():
	---> creational.singleton.Singleton::getRegistryKey(java.lang.Class<? extends creational.singleton.Singleton>) [1 time(s)]
	---> creational.singleton.SingletonRegistry::register(java.lang.String, creational.singleton.Singleton) [1 time(s)]

creational.singleton.Singleton::getInstance(java.lang.Class<? extends creational.singleton.Singleton>):
	---> creational.singleton.Singleton::getRegistryKey(java.lang.Class<? extends creational.singleton.Singleton>) [1 time(s)]
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [1 time(s)]

creational.singleton.Test::main(java.lang.String[]):
	---> creational.singleton.Singleton::getInstance(java.lang.Class<? extends creational.singleton.Singleton>) [4 time(s)]

structural.adapter.EnemyRobotAdapter::EnemyRobotAdapter(structural.adapter.EnemyRobot):
	---> structural.adapter.EnemyRobotAdapter::setRobot(structural.adapter.EnemyRobot) [1 time(s)]

structural.adapter.EnemyRobotAdapter::assignDriver(java.lang.String):
	---> structural.adapter.EnemyRobot::reactToHuman(java.lang.String) [1 time(s)]

structural.adapter.EnemyRobotAdapter::driveForward():
	---> structural.adapter.EnemyRobot::walkForward() [1 time(s)]

structural.adapter.EnemyRobotAdapter::fireWeapon():
	---> structural.adapter.EnemyRobot::smashwithHands() [1 time(s)]

structural.adapter.Test::main(java.lang.String[]):
	---> structural.adapter.EnemyRobot::reactToHuman(java.lang.String) [1 time(s)]
	---> structural.adapter.EnemyAttacker::driveForward() [1 time(s)]
	---> structural.adapter.EnemyTank::assignDriver(java.lang.String) [1 time(s)]
	---> structural.adapter.EnemyRobot::walkForward() [1 time(s)]
	---> structural.adapter.EnemyAttacker::assignDriver(java.lang.String) [1 time(s)]
	---> structural.adapter.EnemyAttacker::fireWeapon() [1 time(s)]
	---> structural.adapter.EnemyTank::driveForward() [1 time(s)]
	---> structural.adapter.EnemyRobot::smashwithHands() [1 time(s)]
	---> structural.adapter.EnemyTank::fireWeapon() [1 time(s)]

structural.adapter.TestEnemyAttackers::main(java.lang.String[]):
	---> structural.adapter.EnemyRobot::reactToHuman(java.lang.String) [1 time(s)]
	---> structural.adapter.EnemyAttacker::driveForward() [1 time(s)]
	---> structural.adapter.EnemyRobot::walkForward() [1 time(s)]
	---> structural.adapter.EnemyTank::assignDriver(java.lang.String) [1 time(s)]
	---> structural.adapter.EnemyAttacker::assignDriver(java.lang.String) [1 time(s)]
	---> structural.adapter.EnemyAttacker::fireWeapon() [1 time(s)]
	---> structural.adapter.EnemyRobot::smashwithHands() [1 time(s)]
	---> structural.adapter.EnemyTank::driveForward() [1 time(s)]
	---> structural.adapter.EnemyTank::fireWeapon() [1 time(s)]

structural.bridge.AdvancedRemote::mute():
	---> structural.bridge.Device::setVolume(int) [1 time(s)]
	---> structural.bridge.Device::getName() [1 time(s)]
	---> structural.bridge.Device::getVolume() [1 time(s)]

structural.bridge.Remote::channelDown():
	---> structural.bridge.Device::setChannel(int) [1 time(s)]
	---> structural.bridge.Device::getChannel() [2 time(s)]

structural.bridge.Remote::channelUp():
	---> structural.bridge.Device::setChannel(int) [1 time(s)]
	---> structural.bridge.Device::getChannel() [2 time(s)]

structural.bridge.Remote::togglePower():
	---> structural.bridge.Device::enable() [1 time(s)]
	---> structural.bridge.Device::getName() [1 time(s)]
	---> structural.bridge.Device::disable() [1 time(s)]
	---> structural.bridge.Device::isEnabled() [2 time(s)]

structural.bridge.Remote::volumeDown():
	---> structural.bridge.Device::setVolume(int) [1 time(s)]
	---> structural.bridge.Device::getVolume() [2 time(s)]

structural.bridge.Remote::volumeUp():
	---> structural.bridge.Device::setVolume(int) [1 time(s)]
	---> structural.bridge.Device::getVolume() [2 time(s)]

structural.bridge.Test::advancedRemoteTest(structural.bridge.AdvancedRemote):
	---> structural.bridge.Remote::channelUp() [2 time(s)]
	---> structural.bridge.Remote::togglePower() [2 time(s)]
	---> structural.bridge.Remote::channelDown() [1 time(s)]
	---> structural.bridge.AdvancedRemote::mute() [1 time(s)]
	---> structural.bridge.Remote::volumeUp() [3 time(s)]
	---> structural.bridge.Remote::volumeDown() [1 time(s)]

structural.bridge.Test::main(java.lang.String[]):
	---> structural.bridge.Test::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]
	---> structural.bridge.Test::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

structural.bridge.Test::ordinaryRemoteTest(structural.bridge.Remote):
	---> structural.bridge.Remote::channelUp() [3 time(s)]
	---> structural.bridge.Remote::togglePower() [2 time(s)]
	---> structural.bridge.Remote::channelDown() [1 time(s)]
	---> structural.bridge.Remote::volumeUp() [4 time(s)]
	---> structural.bridge.Remote::volumeDown() [2 time(s)]

structural.composite.DiscJockey::displaySongList():
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.Song::getInfo():
	---> structural.composite.Song::getSongName() [1 time(s)]
	---> structural.composite.Song::getBandName() [1 time(s)]
	---> structural.composite.Song::getReleaseYear() [1 time(s)]

structural.composite.SongComponent::displayInfo():
	---> structural.composite.SongComponent::getInfo() [1 time(s)]

structural.composite.SongGroup::getInfo():
	---> structural.composite.SongGroup::getGroupDescription() [1 time(s)]
	---> structural.composite.SongComponent::getInfo() [2 time(s)]
	---> structural.composite.SongGroup::getGroupName() [1 time(s)]

structural.composite.SongListGenerator::main(java.lang.String[]):
	---> structural.composite.DiscJockey::displaySongList() [1 time(s)]
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [9 time(s)]

structural.composite.Test::main(java.lang.String[]):
	---> structural.composite.DiscJockey::displaySongList() [1 time(s)]
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [9 time(s)]

structural.decorator.CaramelDecorator::description():
	---> structural.decorator.Beverage::description() [1 time(s)]

structural.decorator.CaramelDecorator::price():
	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.SugarDecorator::description():
	---> structural.decorator.Beverage::description() [1 time(s)]

structural.decorator.SugarDecorator::price():
	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Test::displayOrder(structural.decorator.Beverage):
	---> structural.decorator.Beverage::price() [1 time(s)]
	---> structural.decorator.Beverage::description() [1 time(s)]

structural.decorator.Test::main(java.lang.String[]):
	---> structural.decorator.Test::orderBeverage() [1 time(s)]

structural.decorator.Test::orderBeverage():
	---> structural.decorator.Test::selectAdditionalIngredients(structural.decorator.Beverage, java.util.Scanner) [1 time(s)]
	---> structural.decorator.Test::displayOrder(structural.decorator.Beverage) [1 time(s)]
	---> structural.decorator.Test::selectBeverage(java.util.Scanner) [1 time(s)]

structural.decorator.Test::selectAdditionalIngredients(structural.decorator.Beverage, java.util.Scanner):
	---> structural.decorator.Test::additionalIngredientsMenu() [1 time(s)]

structural.decorator.Test::selectBeverage(java.util.Scanner):
	---> structural.decorator.Test::beveragesMenu() [1 time(s)]

structural.facade.BankAccountBalanceSystem::canWithdraw(double):
	---> structural.facade.BankAccount::getBalance() [1 time(s)]

structural.facade.BankAccountBalanceSystem::deposit(double):
	---> structural.facade.BankAccountBalanceSystem::getAccountBalance() [2 time(s)]
	---> structural.facade.BankAccount::setBalance(double) [1 time(s)]

structural.facade.BankAccountBalanceSystem::getAccountBalance():
	---> structural.facade.BankAccount::getBalance() [1 time(s)]

structural.facade.BankAccountBalanceSystem::withdraw(double):
	---> structural.facade.BankAccountBalanceSystem::getAccountBalance() [3 time(s)]
	---> structural.facade.BankAccountBalanceSystem::canWithdraw(double) [1 time(s)]
	---> structural.facade.BankAccount::setBalance(double) [1 time(s)]

structural.facade.BankAccountFacade::BankAccountFacade(int, int):
	---> structural.facade.BankAccountFacade::fetchBankAccount() [1 time(s)]

structural.facade.BankAccountFacade::depositCash(double):
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]
	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

structural.facade.BankAccountFacade::withdrawCash(double):
	---> structural.facade.BankAccountBalanceSystem::canWithdraw(double) [1 time(s)]
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]
	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

structural.facade.BankAccountNumberChecker::getAccountNumber():
	---> structural.facade.BankAccount::getNumber() [1 time(s)]

structural.facade.BankAccountNumberChecker::match(int):
	---> structural.facade.BankAccountNumberChecker::getAccountNumber() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker::getAccountSecurityCode():
	---> structural.facade.BankAccount::getSecurityCode() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker::match(int):
	---> structural.facade.BankAccountSecurityCodeChecker::getAccountSecurityCode() [1 time(s)]

structural.facade.BankAccountWelcomeWindow::BankAccountWelcomeWindow(structural.facade.BankAccount):
	---> structural.facade.BankAccountWelcomeWindow::setWelcomeMessage() [1 time(s)]

structural.facade.BankAccountWelcomeWindow::setWelcomeMessage():
	---> structural.facade.BankAccount::getBalance() [1 time(s)]
	---> structural.facade.BankAccount::getNumber() [1 time(s)]

structural.facade.Test::main(java.lang.String[]):
	---> structural.facade.BankAccountFacade::withdrawCash(double) [2 time(s)]
	---> structural.facade.BankAccountFacade::depositCash(double) [1 time(s)]

structural.flyweight.Test::main(java.lang.String[]):
	---> structural.flyweight.ShapeFactory::getCircle(java.lang.String) [1 time(s)]
	---> structural.flyweight.Test::getRandomColor() [1 time(s)]
	---> structural.flyweight.Test::getRandomY() [1 time(s)]
	---> structural.flyweight.Test::getRandomX() [1 time(s)]
	---> structural.flyweight.Circle::setRadius(int) [1 time(s)]
	---> structural.flyweight.Circle::draw(structural.flyweight.Position) [1 time(s)]
	---> structural.flyweight.Test::getRandomRadius() [1 time(s)]

structural.proxy.ProxyInternet::connectTo(java.lang.String):
	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.Test::main(java.lang.String[]):
	---> structural.proxy.Internet::connectTo(java.lang.String) [2 time(s)]


Static Call Graph
Classes: 131.
Methods: 387.
Invocations: 411.
behavioral.chain_of_responsibility.ConsoleLogger::write(behavioral.chain_of_responsibility.LogRequest):
	---> behavioral.chain_of_responsibility.LogRequest::getMessage() [1 time(s)]

behavioral.chain_of_responsibility.ErrorLogger::write(behavioral.chain_of_responsibility.LogRequest):
	---> behavioral.chain_of_responsibility.LogRequest::getMessage() [1 time(s)]

behavioral.chain_of_responsibility.FileLogger::write(behavioral.chain_of_responsibility.LogRequest):
	---> behavioral.chain_of_responsibility.LogRequest::getMessage() [2 time(s)]

behavioral.chain_of_responsibility.Logger::log(behavioral.chain_of_responsibility.LogRequest):
	---> behavioral.chain_of_responsibility.LogRequest::getLevel() [1 time(s)]
	---> behavioral.chain_of_responsibility.LogRequestLevel::value() [2 time(s)]
	---> behavioral.chain_of_responsibility.Logger::write(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [1 time(s)]

behavioral.chain_of_responsibility.Test::getChainOfLoggers():
	---> behavioral.chain_of_responsibility.ILogger::setNextLogger(behavioral.chain_of_responsibility.ILogger) [2 time(s)]

behavioral.chain_of_responsibility.Test::main(java.lang.String[]):
	---> behavioral.chain_of_responsibility.Test::getChainOfLoggers() [1 time(s)]
	---> behavioral.chain_of_responsibility.ILogger::log(behavioral.chain_of_responsibility.LogRequest) [3 time(s)]

behavioral.command.CommandManager::execute(behavioral.command.Command):
	---> behavioral.command.Command::execute() [1 time(s)]
	---> behavioral.command.Command::getName() [1 time(s)]

behavioral.command.CommandManager::redo():
	---> behavioral.command.Command::execute() [1 time(s)]
	---> behavioral.command.Command::getName() [1 time(s)]

behavioral.command.CommandManager::undo():
	---> behavioral.command.Command::getName() [1 time(s)]
	---> behavioral.command.Command::undo() [1 time(s)]

behavioral.command.SwitchChannelCommand::execute():
	---> behavioral.command.TV::getChannel() [1 time(s)]
	---> behavioral.command.TV::switchChannel(int) [1 time(s)]

behavioral.command.SwitchChannelCommand::getName():
	---> behavioral.command.TV::getChannel() [1 time(s)]

behavioral.command.SwitchChannelCommand::undo():
	---> behavioral.command.TV::getChannel() [1 time(s)]
	---> behavioral.command.TV::switchChannel(int) [1 time(s)]

behavioral.command.SwitchOffCommand::execute():
	---> behavioral.command.TV::switchOff() [1 time(s)]

behavioral.command.SwitchOffCommand::getName():
	---> behavioral.command.TV::isOn() [1 time(s)]

behavioral.command.SwitchOffCommand::undo():
	---> behavioral.command.TV::switchOn() [1 time(s)]

behavioral.command.SwitchOnCommand::execute():
	---> behavioral.command.TV::switchOn() [1 time(s)]

behavioral.command.SwitchOnCommand::getName():
	---> behavioral.command.TV::isOn() [1 time(s)]

behavioral.command.SwitchOnCommand::undo():
	---> behavioral.command.TV::switchOff() [1 time(s)]

behavioral.command.Test::main(java.lang.String[]):
	---> creational.singleton.Singleton::getInstance(java.lang.Class<? extends creational.singleton.Singleton>) [1 time(s)]
	---> behavioral.command.CommandManager::undo() [4 time(s)]
	---> behavioral.command.CommandManager::execute(behavioral.command.Command) [6 time(s)]
	---> behavioral.command.CommandManager::redo() [3 time(s)]
	---> behavioral.command.CommandManager::history() [1 time(s)]

behavioral.interpreter.AndExpression::interpret(java.lang.String):
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.OrExpression::interpret(java.lang.String):
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.interpreter.Test::getIsMarriedWomanExpression():
	---> behavioral.interpreter.Test::getIsFemaleExpression() [1 time(s)]

behavioral.interpreter.Test::main(java.lang.String[]):
	---> behavioral.interpreter.Test::getIsFemaleExpression() [1 time(s)]
	---> behavioral.interpreter.Test::getIsMarriedWomanExpression() [1 time(s)]
	---> behavioral.interpreter.Expression::interpret(java.lang.String) [2 time(s)]

behavioral.iterator.DiscJockey::displaySongs():
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

behavioral.iterator.SongArray::getFilledArray():
	---> behavioral.iterator.SongArray::length() [1 time(s)]

behavioral.iterator.SongArray::iterator():
	---> behavioral.iterator.SongArray::getFilledArray() [1 time(s)]

behavioral.iterator.Test::main(java.lang.String[]):
	---> behavioral.iterator.SongAggregate::addSong(java.lang.String, java.lang.String, int) [9 time(s)]
	---> behavioral.iterator.DiscJockey::displaySongs() [3 time(s)]

behavioral.mediator.ChatRoom::addUser(behavioral.mediator.User):
	---> behavioral.mediator.User::getId() [1 time(s)]

behavioral.mediator.ChatRoom::sendMessage(java.lang.String, java.lang.String):
	---> behavioral.mediator.User::receive(java.lang.String) [1 time(s)]

behavioral.mediator.ChatUser::receive(java.lang.String):
	---> behavioral.mediator.User::getName() [1 time(s)]

behavioral.mediator.ChatUser::send(java.lang.String, java.lang.String):
	---> behavioral.mediator.User::getRoom() [1 time(s)]
	---> behavioral.mediator.User::getName() [1 time(s)]
	---> behavioral.mediator.IChatRoom::sendMessage(java.lang.String, java.lang.String) [1 time(s)]

behavioral.mediator.Test::main(java.lang.String[]):
	---> behavioral.mediator.User::getId() [2 time(s)]
	---> behavioral.mediator.User::send(java.lang.String, java.lang.String) [2 time(s)]
	---> behavioral.mediator.User::getName() [1 time(s)]
	---> behavioral.mediator.IChatRoom::addUser(behavioral.mediator.User) [4 time(s)]

behavioral.memento.Originator::restoreState(behavioral.memento.Memento):
	---> behavioral.memento.Memento::getState() [1 time(s)]
	---> behavioral.memento.Originator::setState(java.lang.String) [1 time(s)]

behavioral.memento.Test::main(java.lang.String[]):
	---> behavioral.memento.Originator::getState() [3 time(s)]
	---> behavioral.memento.Originator::restoreState(behavioral.memento.Memento) [2 time(s)]
	---> behavioral.memento.CareTaker::addMemento(behavioral.memento.Memento) [2 time(s)]
	---> behavioral.memento.Originator::setState(java.lang.String) [4 time(s)]
	---> behavioral.memento.Originator::externalizeState() [2 time(s)]
	---> behavioral.memento.CareTaker::get(int) [2 time(s)]

behavioral.observer.StockGrabber::notifyObserver():
	---> behavioral.observer.Observer::update() [1 time(s)]

behavioral.observer.StockGrabber::setAppleStock(double):
	---> behavioral.observer.StockGrabber::notifyObserver() [1 time(s)]

behavioral.observer.StockGrabber::setGoogleStock(double):
	---> behavioral.observer.StockGrabber::notifyObserver() [1 time(s)]

behavioral.observer.StockGrabber::setIBMStock(double):
	---> behavioral.observer.StockGrabber::notifyObserver() [1 time(s)]

behavioral.observer.StockObserver::StockObserver(behavioral.observer.StockGrabber):
	---> behavioral.observer.StockGrabber::register(behavioral.observer.Observer) [1 time(s)]

behavioral.observer.StockObserver::update():
	---> behavioral.observer.StockGrabber::getIBMStock() [1 time(s)]
	---> behavioral.observer.StockGrabber::getAppleStock() [1 time(s)]
	---> behavioral.observer.StockGrabber::getGoogleStock() [1 time(s)]
	---> behavioral.observer.StockObserver::displayPrices() [1 time(s)]

behavioral.observer.Test::main(java.lang.String[]):
	---> behavioral.observer.StockGrabber::unregister(behavioral.observer.Observer) [1 time(s)]
	---> behavioral.observer.StockGrabber::setGoogleStock(double) [3 time(s)]
	---> behavioral.observer.StockGrabber::setIBMStock(double) [3 time(s)]
	---> behavioral.observer.StockGrabber::setAppleStock(double) [3 time(s)]

behavioral.state.ATMMachine::ejectCard():
	---> behavioral.state.IATMState::ejectCard() [1 time(s)]

behavioral.state.ATMMachine::insertCard():
	---> behavioral.state.IATMState::insertCard() [1 time(s)]

behavioral.state.ATMMachine::insertPin(int):
	---> behavioral.state.IATMState::insertPin(int) [1 time(s)]

behavioral.state.ATMMachine::requestCash(int):
	---> behavioral.state.IATMState::requestCash(int) [1 time(s)]

behavioral.state.CorrectPin::ejectCard():
	---> behavioral.state.ATMMachine::getNoCardState() [1 time(s)]
	---> behavioral.state.ATMMachine::setATMState(behavioral.state.ATMState) [1 time(s)]

behavioral.state.CorrectPin::requestCash(int):
	---> behavioral.state.ATMMachine::getCashInMachine() [3 time(s)]
	---> behavioral.state.ATMMachine::getNoCashState() [1 time(s)]
	---> behavioral.state.ATMMachine::setCashInMachine(int) [1 time(s)]
	---> behavioral.state.ATMMachine::setATMState(behavioral.state.ATMState) [1 time(s)]
	---> behavioral.state.CorrectPin::ejectCard() [1 time(s)]

behavioral.state.HasCard::ejectCard():
	---> behavioral.state.ATMMachine::getNoCardState() [1 time(s)]
	---> behavioral.state.ATMMachine::setATMState(behavioral.state.ATMState) [1 time(s)]

behavioral.state.HasCard::insertPin(int):
	---> behavioral.state.HasCard::ejectCard() [1 time(s)]
	---> behavioral.state.ATMMachine::getCorrectPinState() [1 time(s)]
	---> behavioral.state.ATMMachine::setATMState(behavioral.state.ATMState) [1 time(s)]

behavioral.state.NoCard::ejectCard():
	---> behavioral.state.NoCard::defaultMessage() [1 time(s)]

behavioral.state.NoCard::insertCard():
	---> behavioral.state.ATMMachine::getHasCardState() [1 time(s)]
	---> behavioral.state.ATMMachine::setATMState(behavioral.state.ATMState) [1 time(s)]

behavioral.state.NoCard::insertPin(int):
	---> behavioral.state.NoCard::defaultMessage() [1 time(s)]

behavioral.state.NoCard::requestCash(int):
	---> behavioral.state.NoCard::defaultMessage() [1 time(s)]

behavioral.state.NoCash::ejectCard():
	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.NoCash::insertCard():
	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.NoCash::insertPin(int):
	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.NoCash::requestCash(int):
	---> behavioral.state.NoCash::defaultMessage() [1 time(s)]

behavioral.state.Test::main(java.lang.String[]):
	---> behavioral.state.ATMMachine::ejectCard() [1 time(s)]
	---> behavioral.state.ATMMachine::insertCard() [5 time(s)]
	---> behavioral.state.ATMMachine::requestCash(int) [2 time(s)]
	---> behavioral.state.ATMMachine::insertPin(int) [3 time(s)]

behavioral.strategy.Calculator::computeOperation(int, int):
	---> behavioral.strategy.ArithmeticOperation::execute(int, int) [1 time(s)]

behavioral.strategy.Test::computeAndDisplay(behavioral.strategy.ArithmeticOperation, java.lang.String, int, int):
	---> behavioral.strategy.Calculator::setOperation(behavioral.strategy.ArithmeticOperation) [1 time(s)]
	---> behavioral.strategy.Calculator::getResult() [1 time(s)]
	---> behavioral.strategy.Calculator::computeOperation(int, int) [1 time(s)]

behavioral.strategy.Test::main(java.lang.String[]):
	---> behavioral.strategy.Test::computeAndDisplay(behavioral.strategy.ArithmeticOperation, java.lang.String, int, int) [5 time(s)]

behavioral.template_method.Game::play():
	---> behavioral.template_method.Game::end() [1 time(s)]
	---> behavioral.template_method.Game::initialize() [1 time(s)]
	---> behavioral.template_method.Game::start() [1 time(s)]

behavioral.template_method.Test::main(java.lang.String[]):
	---> behavioral.template_method.Game::play() [2 time(s)]

behavioral.visitor.Liquor::accept(behavioral.visitor.Visitor):
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Liquor) [1 time(s)]

behavioral.visitor.Necessity::accept(behavioral.visitor.Visitor):
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Necessity) [1 time(s)]

behavioral.visitor.Product::Product(java.lang.String, double):
	---> behavioral.visitor.Product::setName(java.lang.String) [1 time(s)]
	---> behavioral.visitor.Product::setPrice(double) [1 time(s)]

behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Liquor):
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

behavioral.visitor.TaxHolidayVisitor::visit(behavioral.visitor.Tobacco):
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product):
	---> behavioral.visitor.Product::getPrice() [1 time(s)]

behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Liquor):
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Necessity):
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

behavioral.visitor.TaxVisitor::visit(behavioral.visitor.Tobacco):
	---> behavioral.visitor.TaxVisitor::computeTax(behavioral.visitor.Product) [1 time(s)]

behavioral.visitor.Test::computeTaxForProducts(java.util.List<behavioral.visitor.Product>, behavioral.visitor.TaxVisitor):
	---> behavioral.visitor.Visitable::accept(behavioral.visitor.Visitor) [1 time(s)]
	---> behavioral.visitor.TaxVisitor::getComputedTax() [1 time(s)]

behavioral.visitor.Test::main(java.lang.String[]):
	---> behavioral.visitor.Test::computeTaxForProducts(java.util.List<behavioral.visitor.Product>, behavioral.visitor.TaxVisitor) [2 time(s)]

behavioral.visitor.Tobacco::accept(behavioral.visitor.Visitor):
	---> behavioral.visitor.Visitor::visit(behavioral.visitor.Tobacco) [1 time(s)]

creational.abstract_factory.ShapeProducer::createFactory(creational.abstract_factory.ShapeFactoryType):
	---> creational.singleton.Singleton::getInstance(java.lang.Class<? extends creational.singleton.Singleton>) [2 time(s)]

creational.abstract_factory.Test::main(java.lang.String[]):
	---> creational.abstract_factory.ShapeProducer::createFactory(creational.abstract_factory.ShapeFactoryType) [2 time(s)]
	---> creational.abstract_factory.AbstractShapeFactory::createShape(creational.abstract_factory.ShapeType) [4 time(s)]
	---> creational.abstract_factory.Shape::draw() [4 time(s)]

creational.builder.OldRobotBuilder::buildArms():
	---> creational.builder.Robot::setArms(java.lang.String) [1 time(s)]

creational.builder.OldRobotBuilder::buildHead():
	---> creational.builder.Robot::setHead(java.lang.String) [1 time(s)]

creational.builder.OldRobotBuilder::buildLegs():
	---> creational.builder.Robot::setLegs(java.lang.String) [1 time(s)]

creational.builder.OldRobotBuilder::buildTorso():
	---> creational.builder.Robot::setTorso(java.lang.String) [1 time(s)]

creational.builder.RobotEngineer::RobotEngineer(creational.builder.IRobotBuilder):
	---> creational.builder.RobotEngineer::setRobotBuilder(creational.builder.IRobotBuilder) [1 time(s)]

creational.builder.RobotEngineer::constructRobot():
	---> creational.builder.IRobotBuilder::buildArms() [1 time(s)]
	---> creational.builder.IRobotBuilder::buildHead() [1 time(s)]
	---> creational.builder.IRobotBuilder::buildTorso() [1 time(s)]
	---> creational.builder.IRobotBuilder::buildLegs() [1 time(s)]

creational.builder.RobotEngineer::getRobot():
	---> creational.builder.IRobotBuilder::getRobot() [1 time(s)]

creational.builder.SophisticatedRobotBuilder::buildArms():
	---> creational.builder.Robot::setArms(java.lang.String) [1 time(s)]

creational.builder.SophisticatedRobotBuilder::buildHead():
	---> creational.builder.Robot::setHead(java.lang.String) [1 time(s)]

creational.builder.SophisticatedRobotBuilder::buildLegs():
	---> creational.builder.Robot::setLegs(java.lang.String) [1 time(s)]

creational.builder.SophisticatedRobotBuilder::buildTorso():
	---> creational.builder.Robot::setTorso(java.lang.String) [1 time(s)]

creational.builder.Test::main(java.lang.String[]):
	---> creational.builder.RobotEngineer::getRobot() [2 time(s)]
	---> creational.builder.RobotEngineer::setRobotBuilder(creational.builder.IRobotBuilder) [1 time(s)]
	---> creational.builder.RobotEngineer::constructRobot() [2 time(s)]

creational.factory.EnemyShip::EnemyShip(java.lang.String, double):
	---> creational.factory.EnemyShip::setName(java.lang.String) [1 time(s)]
	---> creational.factory.EnemyShip::setAmtDamage(double) [1 time(s)]

creational.factory.EnemyShipTesting::doStuffEnemy(creational.factory.EnemyShip):
	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]
	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

creational.factory.EnemyShipTesting::main(java.lang.String[]):
	---> creational.factory.EnemyShipFactory::createEnemyShip(java.lang.String) [1 time(s)]
	---> creational.factory.EnemyShipTesting::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

creational.factory.Test::doStuffEnemy(creational.factory.EnemyShip):
	---> creational.factory.EnemyShip::displayEnemyShip() [1 time(s)]
	---> creational.factory.EnemyShip::enemyShipShoots() [1 time(s)]
	---> creational.factory.EnemyShip::followHeroShip() [1 time(s)]

creational.factory.Test::main(java.lang.String[]):
	---> creational.factory.EnemyShipFactory::createEnemyShip(java.lang.String) [1 time(s)]
	---> creational.factory.Test::doStuffEnemy(creational.factory.EnemyShip) [1 time(s)]

creational.prototype.Shape::clone():
	---> creational.prototype.Position::clone() [1 time(s)]
	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [1 time(s)]
	---> creational.prototype.Shape::getPosition() [1 time(s)]

creational.prototype.ShapeCache::getShape(java.lang.String):
	---> creational.prototype.Shape::clone() [1 time(s)]

creational.prototype.ShapeCache::loadCache():
	---> creational.prototype.Shape::setId(java.lang.String) [3 time(s)]
	---> creational.prototype.Shape::getId() [3 time(s)]
	---> creational.prototype.Shape::setPosition(creational.prototype.Position) [3 time(s)]

creational.prototype.Test::main(java.lang.String[]):
	---> creational.prototype.ShapeCache::displayCacheContent() [1 time(s)]
	---> creational.prototype.ShapeCache::loadCache() [1 time(s)]
	---> creational.prototype.Position::setX(double) [2 time(s)]
	---> creational.prototype.Position::setY(double) [1 time(s)]
	---> creational.prototype.Shape::getPosition() [3 time(s)]
	---> creational.prototype.ShapeCache::getShape(java.lang.String) [3 time(s)]

creational.singleton.Singleton::Singleton():
	---> creational.singleton.Singleton::getRegistryKey(java.lang.Class<? extends creational.singleton.Singleton>) [1 time(s)]
	---> creational.singleton.SingletonRegistry::register(java.lang.String, creational.singleton.Singleton) [1 time(s)]

creational.singleton.Singleton::getInstance(java.lang.Class<? extends creational.singleton.Singleton>):
	---> creational.singleton.Singleton::getRegistryKey(java.lang.Class<? extends creational.singleton.Singleton>) [1 time(s)]
	---> creational.singleton.SingletonRegistry::lookup(java.lang.String) [1 time(s)]

creational.singleton.Test::main(java.lang.String[]):
	---> creational.singleton.Singleton::getInstance(java.lang.Class<? extends creational.singleton.Singleton>) [4 time(s)]

structural.adapter.EnemyRobotAdapter::EnemyRobotAdapter(structural.adapter.EnemyRobot):
	---> structural.adapter.EnemyRobotAdapter::setRobot(structural.adapter.EnemyRobot) [1 time(s)]

structural.adapter.EnemyRobotAdapter::assignDriver(java.lang.String):
	---> structural.adapter.EnemyRobot::reactToHuman(java.lang.String) [1 time(s)]

structural.adapter.EnemyRobotAdapter::driveForward():
	---> structural.adapter.EnemyRobot::walkForward() [1 time(s)]

structural.adapter.EnemyRobotAdapter::fireWeapon():
	---> structural.adapter.EnemyRobot::smashwithHands() [1 time(s)]

structural.adapter.Test::main(java.lang.String[]):
	---> structural.adapter.EnemyRobot::reactToHuman(java.lang.String) [1 time(s)]
	---> structural.adapter.EnemyAttacker::driveForward() [1 time(s)]
	---> structural.adapter.EnemyTank::assignDriver(java.lang.String) [1 time(s)]
	---> structural.adapter.EnemyRobot::walkForward() [1 time(s)]
	---> structural.adapter.EnemyAttacker::assignDriver(java.lang.String) [1 time(s)]
	---> structural.adapter.EnemyAttacker::fireWeapon() [1 time(s)]
	---> structural.adapter.EnemyTank::driveForward() [1 time(s)]
	---> structural.adapter.EnemyRobot::smashwithHands() [1 time(s)]
	---> structural.adapter.EnemyTank::fireWeapon() [1 time(s)]

structural.adapter.TestEnemyAttackers::main(java.lang.String[]):
	---> structural.adapter.EnemyRobot::reactToHuman(java.lang.String) [1 time(s)]
	---> structural.adapter.EnemyAttacker::driveForward() [1 time(s)]
	---> structural.adapter.EnemyRobot::walkForward() [1 time(s)]
	---> structural.adapter.EnemyTank::assignDriver(java.lang.String) [1 time(s)]
	---> structural.adapter.EnemyAttacker::assignDriver(java.lang.String) [1 time(s)]
	---> structural.adapter.EnemyAttacker::fireWeapon() [1 time(s)]
	---> structural.adapter.EnemyRobot::smashwithHands() [1 time(s)]
	---> structural.adapter.EnemyTank::driveForward() [1 time(s)]
	---> structural.adapter.EnemyTank::fireWeapon() [1 time(s)]

structural.bridge.AdvancedRemote::mute():
	---> structural.bridge.Device::setVolume(int) [1 time(s)]
	---> structural.bridge.Device::getName() [1 time(s)]
	---> structural.bridge.Device::getVolume() [1 time(s)]

structural.bridge.Remote::channelDown():
	---> structural.bridge.Device::setChannel(int) [1 time(s)]
	---> structural.bridge.Device::getChannel() [2 time(s)]

structural.bridge.Remote::channelUp():
	---> structural.bridge.Device::setChannel(int) [1 time(s)]
	---> structural.bridge.Device::getChannel() [2 time(s)]

structural.bridge.Remote::togglePower():
	---> structural.bridge.Device::enable() [1 time(s)]
	---> structural.bridge.Device::getName() [1 time(s)]
	---> structural.bridge.Device::disable() [1 time(s)]
	---> structural.bridge.Device::isEnabled() [2 time(s)]

structural.bridge.Remote::volumeDown():
	---> structural.bridge.Device::setVolume(int) [1 time(s)]
	---> structural.bridge.Device::getVolume() [2 time(s)]

structural.bridge.Remote::volumeUp():
	---> structural.bridge.Device::setVolume(int) [1 time(s)]
	---> structural.bridge.Device::getVolume() [2 time(s)]

structural.bridge.Test::advancedRemoteTest(structural.bridge.AdvancedRemote):
	---> structural.bridge.Remote::channelUp() [2 time(s)]
	---> structural.bridge.Remote::togglePower() [2 time(s)]
	---> structural.bridge.Remote::channelDown() [1 time(s)]
	---> structural.bridge.AdvancedRemote::mute() [1 time(s)]
	---> structural.bridge.Remote::volumeUp() [3 time(s)]
	---> structural.bridge.Remote::volumeDown() [1 time(s)]

structural.bridge.Test::main(java.lang.String[]):
	---> structural.bridge.Test::ordinaryRemoteTest(structural.bridge.Remote) [2 time(s)]
	---> structural.bridge.Test::advancedRemoteTest(structural.bridge.AdvancedRemote) [2 time(s)]

structural.bridge.Test::ordinaryRemoteTest(structural.bridge.Remote):
	---> structural.bridge.Remote::channelUp() [3 time(s)]
	---> structural.bridge.Remote::togglePower() [2 time(s)]
	---> structural.bridge.Remote::channelDown() [1 time(s)]
	---> structural.bridge.Remote::volumeUp() [4 time(s)]
	---> structural.bridge.Remote::volumeDown() [2 time(s)]

structural.composite.DiscJockey::displaySongList():
	---> structural.composite.SongComponent::displayInfo() [1 time(s)]

structural.composite.Song::getInfo():
	---> structural.composite.Song::getSongName() [1 time(s)]
	---> structural.composite.Song::getBandName() [1 time(s)]
	---> structural.composite.Song::getReleaseYear() [1 time(s)]

structural.composite.SongComponent::displayInfo():
	---> structural.composite.SongComponent::getInfo() [1 time(s)]

structural.composite.SongGroup::getInfo():
	---> structural.composite.SongGroup::getGroupDescription() [1 time(s)]
	---> structural.composite.SongComponent::getInfo() [2 time(s)]
	---> structural.composite.SongGroup::getGroupName() [1 time(s)]

structural.composite.SongListGenerator::main(java.lang.String[]):
	---> structural.composite.DiscJockey::displaySongList() [1 time(s)]
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [9 time(s)]

structural.composite.Test::main(java.lang.String[]):
	---> structural.composite.DiscJockey::displaySongList() [1 time(s)]
	---> structural.composite.SongComponent::add(structural.composite.SongComponent) [9 time(s)]

structural.decorator.CaramelDecorator::description():
	---> structural.decorator.Beverage::description() [1 time(s)]

structural.decorator.CaramelDecorator::price():
	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.SugarDecorator::description():
	---> structural.decorator.Beverage::description() [1 time(s)]

structural.decorator.SugarDecorator::price():
	---> structural.decorator.Beverage::price() [1 time(s)]

structural.decorator.Test::displayOrder(structural.decorator.Beverage):
	---> structural.decorator.Beverage::price() [1 time(s)]
	---> structural.decorator.Beverage::description() [1 time(s)]

structural.decorator.Test::main(java.lang.String[]):
	---> structural.decorator.Test::orderBeverage() [1 time(s)]

structural.decorator.Test::orderBeverage():
	---> structural.decorator.Test::selectAdditionalIngredients(structural.decorator.Beverage, java.util.Scanner) [1 time(s)]
	---> structural.decorator.Test::displayOrder(structural.decorator.Beverage) [1 time(s)]
	---> structural.decorator.Test::selectBeverage(java.util.Scanner) [1 time(s)]

structural.decorator.Test::selectAdditionalIngredients(structural.decorator.Beverage, java.util.Scanner):
	---> structural.decorator.Test::additionalIngredientsMenu() [1 time(s)]

structural.decorator.Test::selectBeverage(java.util.Scanner):
	---> structural.decorator.Test::beveragesMenu() [1 time(s)]

structural.facade.BankAccountBalanceSystem::canWithdraw(double):
	---> structural.facade.BankAccount::getBalance() [1 time(s)]

structural.facade.BankAccountBalanceSystem::deposit(double):
	---> structural.facade.BankAccountBalanceSystem::getAccountBalance() [2 time(s)]
	---> structural.facade.BankAccount::setBalance(double) [1 time(s)]

structural.facade.BankAccountBalanceSystem::getAccountBalance():
	---> structural.facade.BankAccount::getBalance() [1 time(s)]

structural.facade.BankAccountBalanceSystem::withdraw(double):
	---> structural.facade.BankAccountBalanceSystem::getAccountBalance() [3 time(s)]
	---> structural.facade.BankAccountBalanceSystem::canWithdraw(double) [1 time(s)]
	---> structural.facade.BankAccount::setBalance(double) [1 time(s)]

structural.facade.BankAccountFacade::BankAccountFacade(int, int):
	---> structural.facade.BankAccountFacade::fetchBankAccount() [1 time(s)]

structural.facade.BankAccountFacade::depositCash(double):
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]
	---> structural.facade.BankAccountBalanceSystem::deposit(double) [1 time(s)]
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

structural.facade.BankAccountFacade::withdrawCash(double):
	---> structural.facade.BankAccountBalanceSystem::canWithdraw(double) [1 time(s)]
	---> structural.facade.BankAccountSecurityCodeChecker::match(int) [1 time(s)]
	---> structural.facade.BankAccountBalanceSystem::withdraw(double) [1 time(s)]
	---> structural.facade.BankAccountNumberChecker::match(int) [1 time(s)]

structural.facade.BankAccountNumberChecker::getAccountNumber():
	---> structural.facade.BankAccount::getNumber() [1 time(s)]

structural.facade.BankAccountNumberChecker::match(int):
	---> structural.facade.BankAccountNumberChecker::getAccountNumber() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker::getAccountSecurityCode():
	---> structural.facade.BankAccount::getSecurityCode() [1 time(s)]

structural.facade.BankAccountSecurityCodeChecker::match(int):
	---> structural.facade.BankAccountSecurityCodeChecker::getAccountSecurityCode() [1 time(s)]

structural.facade.BankAccountWelcomeWindow::BankAccountWelcomeWindow(structural.facade.BankAccount):
	---> structural.facade.BankAccountWelcomeWindow::setWelcomeMessage() [1 time(s)]

structural.facade.BankAccountWelcomeWindow::setWelcomeMessage():
	---> structural.facade.BankAccount::getBalance() [1 time(s)]
	---> structural.facade.BankAccount::getNumber() [1 time(s)]

structural.facade.Test::main(java.lang.String[]):
	---> structural.facade.BankAccountFacade::withdrawCash(double) [2 time(s)]
	---> structural.facade.BankAccountFacade::depositCash(double) [1 time(s)]

structural.flyweight.Test::main(java.lang.String[]):
	---> structural.flyweight.ShapeFactory::getCircle(java.lang.String) [1 time(s)]
	---> structural.flyweight.Test::getRandomColor() [1 time(s)]
	---> structural.flyweight.Test::getRandomY() [1 time(s)]
	---> structural.flyweight.Test::getRandomX() [1 time(s)]
	---> structural.flyweight.Circle::setRadius(int) [1 time(s)]
	---> structural.flyweight.Circle::draw(structural.flyweight.Position) [1 time(s)]
	---> structural.flyweight.Test::getRandomRadius() [1 time(s)]

structural.proxy.ProxyInternet::connectTo(java.lang.String):
	---> structural.proxy.Internet::connectTo(java.lang.String) [1 time(s)]

structural.proxy.Test::main(java.lang.String[]):
	---> structural.proxy.Internet::connectTo(java.lang.String) [2 time(s)]


